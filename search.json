[{"title":"Flutter 使用 Riverpod+Retrofit 构建MVVM开发模式","url":"%2FflutterMVVM.html","content":"\n{% li https://cdn.lishaoy.net/image/flutterMVVM/cover.png, flutter app, flutter app %}\n\n最近，在使用 **Flutter** 做一个图片分享的应用，自己创建出一套 **Flutter** 版的 **MVVM** 开发模式，觉得还挺好用，所以在此分享出来。\n\n<!-- more -->\n\n## 应用功能展示\n\n首先，我们来看看我们这套MVVM开发模式，开发出来的应用是个什么样子，大概的一部分功能如下：(也可以点击观看 [演示视频](https://www.bilibili.com/video/BV1ur4y1A7of))\n\n下拉刷新，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/refresh.gif \"refresh\")\n\n</div>\n\n上拉加载更多，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/loadMore.gif \"load more\")\n\n</div>\n\n点赞，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/liked.gif \"liked\")\n\n</div>\n\n缺省页(空数据)，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/empty.gif \"empty\")\n\n</div>\n\nloading页，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/loading.gif \"loading\")\n\n</div>\n\n渐变的Appbar，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/appbar.gif \"appbar\")\n\n</div>\n\n评论，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/comment.gif \"comment\")\n\n</div>\n\n我的页面，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/profile.gif \"profile\")\n\n</div>\n\n以上只是 App 的一部分功能，大家也可以也可以点击观看 [演示视频](https://www.bilibili.com/video/BV1ur4y1A7of)，或者扫描二维码下载 App(android) 体验：\n\n<div style=\"width: 26%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/apk.png \"apk\")\n\n</div>\n\n<hr />\n\n在介绍这套 **MVVM** 开发模式之前，我们首先需要了解 `riverpod` 和 `retrofit` 是什么。\n\n下面我们来分别了解他们是什么。\n\n## riverpod\n\n**riverpod** 是 **Flutter** 状态管理库，flutter 的状态管理库有很多，例如： `Redux`、 `Bloc`、 `Provider` 等，flutter 官方推荐我们使用 `provider`，一般我们使用 `provider` 的时候，会结合 `ChangeNotifier` 、 `StateNotifier`、 `freezed` 去使用，而 `riverpod` 是 `provider` 的一个升级加强版，解决了 `provider` 一些疑难杂症，在这里就不过多介绍，如想了解更多 `riverpod` 信息，可以访问 [riverpod官网](https://riverpod.dev/) ，也可以参考我之前写的以下[Demo](https://github.com/persilee/flutter_pro/tree/master/lib/demo/provider_demo) 。\n\n## retrofit\n\n**retrofit** 是一个网络请求库，做过 android 的同学应该比较熟悉，可以用注解的方式生成请求 Rest Api 的各种方法，如，以下的简单的用法：\n\n```dart\nimport 'package:retrofit/retrofit.dart';\n\npart 'api_client.g.dart';\n\n@RestApi(baseUrl: 'https://api.lishaoy.net')\nabstract class ApiClient {\n  factory ApiClient({Dio dio, String baseUrl}) {\n    dio ??= BaseDio.getInstance().getDio();\n    return _ApiClient(dio, baseUrl: baseUrl);\n  }\n\n  /**\n   * 获取首页推荐文章\n   */\n  @GET('/posts')\n  Future<PostModel> getPosts(\n      @Query('pageIndex') String pageIndex, @Query('pageSize') String pageSize,\n      {@Query('sort') String sort = 'recommend'});\n\n  /**\n   * 获取文章详情\n   */\n  @GET('/posts/{postId}')\n  Future<SinglePostModel> getPostsById(@Path('postId') int postId,\n      {@Query('notView') bool notView});\n\n  /**\n   * 登录\n   */\n  @POST('/login')\n  Future<LoginModel> login(@Body() Login login);\n\n}\n```\n\n更多详情可以访问 [pub.dev retrofit](https://pub.dev/packages/retrofit) 。\n\n## 目录结构\n\n接下来我们来看看项目的目录结构，如下：\n\n```bash\n.\n├── android  ## 原生android目录\n│   ├── app\n│   └── gradle\n├── assets  ## 资源文件目录\n│   ├── fonts\n│   ├── images\n│   └── json\n├── ios ## 原生iOS目录\n│   ├── Flutter\n│   ├── Frameworks\n│   ├── Pods\n│   ├── Runner\n│   ├── Runner.xcodeproj\n│   └── Runner.xcworkspace\n└── lib ## 项目文件目录\n    ├── http ##对网格请求相关的封装\n    │   ├── api_client.dart ## rest api 请求类\n    │   ├── api_client.g.dart ## retrofit 自动生成的类\n    │   ├── base_dio.dart ## 对dio封装类\n    │   ├── base_error.dart ## 服务端基本错误类型封装类\n    │   └── header_interceptor.dart  ##网络请求拦截器\n    ├── models ## json序列化的model类，相对于MVVM的 M 层\n    ├── pages ## 主要的UI页面目录，相对于MVVM的 V 层\n    ├── utils ## 一些工具类\n    │   ├── date_util.dart\n    │   ├── screen_util.dart\n    │   ├── status_bar_util.dart\n    │   ├── timeline_util.dart\n    │   └── widget_util.dart\n    ├── view_model ## 处理数据状态，业务逻辑，相对于 MVVM的 VM 层\n    │   ├── details_view_model.dart\n    │   ├── login_view_model.dart\n    │   ├── posts_view_model.dart\n    │   └── profile_view_model.dart\n    └── widgets ##公用或自定义组件\n        ├── cache_image.dart\n        ├── custom_circular_rect_angle.dart\n        ├── custom_indicator.dart\n        ├── custom_tabs.dart\n        ├── error_page.dart\n        ├── gradient_button.dart\n        ├── icon_animation_widget.dart\n        ├── iconfont.dart\n        ├── image_paper.dart\n        ├── over_scroll_behavior.dart\n        ├── page_state.dart\n        ├── per_flexible_space_bar.dart\n        ├── pic_swiper.dart\n        └── refresh.dart\n```\n\n从目录结构可知， `models`、 `pages`、`view_model` 分别是 MVVM 开发模式的 M(数据层)、 V(视图层)、 VM(通过riverpod的StateNotifier将数据层和视图层绑定，state变化时数据层也跟着变化，当然这里也可以处理一些页面逻辑)，做过 android 的同学应该知道 android 的MVVM是使用 jetpack 组件库里的 DataBinding 和 LiveData 完成的，我这套开发模式灵感就是来源于此。\n\n## 网络请求模块\n\n首先，我们来对网络请求模块封装一把，让它能够通用易用。\n\n**retrofit** 是依赖网络请求库的，我们可以选择不同的库，例如：`http`、`Dio` 等。\n\n在这里我们选择 `Dio` ，如下，是官方提供的案例代码：\n\n```dart\n@RestApi(baseUrl: \"https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v1/\")\nabstract class RestClient {\n  factory RestClient(Dio dio, {String baseUrl}) = _RestClient;\n\n  @GET(\"/tasks\")\n  Future<List<Task>> getTasks();\n}\n```\n\n### Dio的封装\n\n它需要传一个 Dio 的实例和一个可选的 baseUrl，我们需要对这里重新封装一下，使用者不用传递任何参数就可以使用，也可以选择使用不同的网络库和 baseUrl；所以，我们要封装一个 `baseDio` 单例类，如果用户没有传，我们就传递一个默认的 `baseDio` 类，代码大概如下所示：\n\n```dart\n@RestApi(baseUrl: 'https://api.lishaoy.net')\nabstract class ApiClient {\n  factory ApiClient({Dio dio, String baseUrl}) {\n    dio ??= BaseDio.getInstance().getDio();\n    return _ApiClient(dio, baseUrl: baseUrl);\n\n  @POST('/login')\n  Future<LoginModel> login(@Body() Login login);\n}  \n```\n\n所以我要对 `Dio` 进行一次封装，代码如下：\n\n```dart\nimport 'package:dio/dio.dart';\nimport 'package:pretty_dio_logger/pretty_dio_logger.dart';\nimport 'package:pro_flutter/http/base_error.dart';\nimport 'package:pro_flutter/http/header_interceptor.dart';\n\nclass BaseDio {\n  BaseDio._(); // 把构造方法私有化\n\n  static BaseDio _instance; \n\n  static BaseDio getInstance() {  // 通过 getInstance 获取实例\n    _instance ??= BaseDio._();\n\n    return _instance;\n  }\n\n  Dio getDio() {\n    final Dio dio = Dio();\n    dio.options = BaseOptions(receiveTimeout: 66000, connectTimeout: 66000); // 设置超时时间等 ...\n    dio.interceptors.add(HeaderInterceptor()); // 添加拦截器，如 token之类，需要全局使用的参数\n    dio.interceptors.add(PrettyDioLogger(  // 添加日志格式化工具类\n      requestHeader: true,\n      requestBody: true,\n      responseBody: true,\n      responseHeader: false,\n      compact: false,\n    ));\n\n    return dio;\n  }\n\n  BaseError getDioError(Object obj) {  // 这里封装了一个 BaseError 类，会根据后端返回的code返回不同的错误类\n    switch (obj.runtimeType) {\n      case DioError:\n        if ((obj as DioError).type == DioErrorType.RESPONSE) {\n          final response = (obj as DioError).response;\n          if (response.statusCode == 401) {\n            return NeedLogin();\n          } else if (response.statusCode == 403) {\n            return NeedAuth();\n          } else if (response.statusCode == 408) {\n            return UserNotExist();\n          } else if (response.statusCode == 409) {\n            return PwdNotMatch();\n          } else if (response.statusCode == 405) {\n            return UserNameEmpty();\n          } else if (response.statusCode == 406) {\n            return PwdEmpty();\n          } else {\n            return OtherError(\n              statusCode: response.statusCode,\n              statusMessage: response.statusMessage,\n            );\n          }\n        }\n    }\n\n    return OtherError();\n  }\n}\n```\n\n### BaseError的封装\n\n以上代码中的 `BaseError` 类是一个抽象类，我们可以实现这个抽象类，告诉UI不同的错误类型，UI只需要用实现类就可以访问错误码和错误消息，代码如下：\n\n```dart\nabstract class BaseError {\n  final int code;\n  final String message;\n\n  BaseError({this.code, this.message});\n}\n\nclass NeedLogin implements BaseError {\n  @override\n  int get code => 401;\n\n  @override\n  String get message => \"请先登录\";\n}\n\nclass NeedAuth implements BaseError {\n  @override\n  int get code => 403;\n\n  @override\n  String get message => \"非法访问，请使用正确的token\";\n}\n\nclass UserNotExist implements BaseError {\n  @override\n  int get code => 408;\n\n  @override\n  String get message => \"用户不存在\";\n}\n\nclass UserNameEmpty implements BaseError {\n  @override\n  int get code => 405;\n\n  @override\n  String get message => \"用户名不能为空\";\n}\n\nclass PwdNotMatch implements BaseError {\n  @override\n  int get code => 409;\n\n  @override\n  String get message => \"用户密码不正确\";\n}\n\nclass PwdEmpty implements BaseError {\n  @override\n  int get code => 406;\n\n  @override\n  String get message => \"用户密码不能为空\";\n}\n\nclass OtherError implements BaseError {\n\n  final int statusCode;\n  final String statusMessage;\n\n  OtherError({this.statusCode, this.statusMessage});\n\n  @override\n  int get code => statusCode;\n\n  @override\n  String get message => statusMessage;\n\n}\n```\n\n### 网络模块的使用\n\n这样我们的一个网络请求模块基本就封装好了，使用起来非常简单，首先我们需要定义接口，代码如下： \n\n```dart\n@RestApi(baseUrl: 'https://api.lishaoy.net')\nabstract class ApiClient {\n  factory ApiClient({Dio dio, String baseUrl}) {\n    dio ??= BaseDio.getInstance().getDio();\n    return _ApiClient(dio, baseUrl: baseUrl);\n  }\n\n  /**\n   * 获取首页推荐文章\n   */\n  @GET('/posts')\n  Future<PostModel> getPosts(\n      @Query('pageIndex') String pageIndex, @Query('pageSize') String pageSize,\n      {@Query('sort') String sort = 'recommend'});\n\n  /**\n   * 获取文章详情\n   */\n  @GET('/posts/{postId}')\n  Future<SinglePostModel> getPostsById(@Path('postId') int postId,\n      {@Query('notView') bool notView});\n\n  /**\n   * 登录\n   */\n  @POST('/login')\n  Future<LoginModel> login(@Body() Login login);\n\n  /**\n   * 点赞\n   */\n  @POST('/posts/{postId}/like')\n  Future<BaseModel> like(@Path('postId') int postId);\n\n  ...\n```\n\n然后，我们会在 view model 使用它，如下：\n\n```dart\n  /**\n   * 点赞\n   */\n  Future<void> clickLike(int postId, int index) async {\n    try {\n      BaseModel data = await ApiClient().like(postId); // 使用非常简单一句代码即可\n      if (data.message == 'success') {\n        updatePostById(postId, index);\n      }\n    } catch (e) {\n      state = state.copyWith(\n          pageState: PageState.errorState,\n          error: BaseDio.getInstance().getDioError(e));\n    }\n  }\n```\n\n## View Model 模块\n\nView Model 模块主要处理数据和状态的绑定、业务逻辑等。\n\n### 创建状态类\n\n我们首先需要创建一个状态类，来存放数据状态和页面状态等，如下：\n\n```dart\n/// 存储页面状态和数据状态（如，缺省页、错误页、加载中...）\nclass PostState {\n  final List<Post> posts;\n  final List<Category> categories;\n  final int pageIndex;\n  final PageState pageState; // 页面状态类\n  final BaseError error; // 根据后端返回的错误的错误类\n\n  PostState(\n      {this.posts,\n      this.categories,\n      this.pageIndex,\n      this.pageState,\n      this.error});\n\n  PostState.initial()\n      : posts = [],\n        categories = [],\n        pageIndex = 1,\n        pageState = PageState.initializedState,\n        error = null;\n\n  PostState copyWith({\n    List<Post> posts,\n    List<Category> categories,\n    int pageIndex,\n    PageState pageState,\n    BaseError error,\n  }) {\n    return PostState(\n      posts: posts ?? this.posts,\n      categories: categories ?? this.categories,\n      pageIndex: pageIndex ?? this.pageIndex,\n      pageState: pageState ?? this.pageState,\n      error: error ?? this.error,\n    );\n  }\n}\n```\n\n当然这个状态类也可以用 `freezed` 自动生成。\n\n### 请求网络数据和处理页面状态\n\n我们会返回这个状态类给UI，riverpod 的 StateNotifier 会监听这个状态类里的所有成员变量，当我们更改这些数据之后，UI会自动刷新，代码如下：\n\n```dart\n/**\n   * 获取文章列表\n   */\n  Future<void> getPosts(int categoryId, {bool isRefresh = false}) async {\n    if (state.pageState == PageState.initializedState) {\n      state = state.copyWith(pageState: PageState.busyState); // UI收到这个状态可以呈现loading页面\n    }\n    try {\n      if (isRefresh) {  // 下拉刷新\n        PostModel postModel;\n        if(categoryId == -2) {\n          state = state.copyWith(pageState: PageState.emptyDataState); // UI收到这个状态，可以显示缺省页空数据\n          return;\n        } else if (categoryId == -1) {\n          postModel = await ApiClient().getPosts('1', '10'); // 请求网络接口\n        } else {\n          postModel =\n              await ApiClient().getPostsByCategoryId('1', '10', categoryId);\n        }\n        if (postModel.data.posts.isEmpty && state.pageIndex == 1) {\n          state = state.copyWith(pageState: PageState.emptyDataState);\n        } else {\n          initPostState();\n          state = state.copyWith(\n            posts: [...postModel.data.posts],  // 把数据发给UI\n            pageState: PageState.refreshState, // 更改页面状态为刷新\n            pageIndex: 2,\n          );\n        }\n      } else {  // 下拉加载更多\n        PostModel postModel;\n        if(categoryId == -2) {\n          state = state.copyWith(pageState: PageState.emptyDataState); // UI收到这个状态可以呈现loading页面\n          return;\n        } else if (categoryId == -1) {\n          postModel =\n              await ApiClient().getPosts(state.pageIndex.toString(), '10'); // 请求网络接口\n        } else {\n          postModel = await ApiClient().getPostsByCategoryId(\n              state.pageIndex.toString(), '10', categoryId);\n        }\n        if (postModel.data.posts.isEmpty && state.pageIndex == 1) {\n          state = state.copyWith(pageState: PageState.emptyDataState);\n        } else {\n          state = state.copyWith(\n              posts: [...state.posts, ...postModel.data.posts],  // 把数据发给UI\n              pageIndex: state.pageIndex + 1,\n              pageState: PageState.dataFetchState); // 更改页面状态\n          if (postModel.data.posts.isEmpty ||\n              postModel.data.posts.length < 10) {\n            state = state.copyWith(pageState: PageState.noMoreDataState);\n          }\n        }\n      }\n    } catch (e) {\n      state = state.copyWith(\n          pageState: PageState.errorState,  // 如果发生错误，更改页面状态\n          error: BaseDio.getInstance().getDioError(e));\n    }\n  }\n```\n\n以上一个方面就完成了应用首页的所有列表数据请求和页面状态处理，在UI层，不需要写 setState() 和 请求数据的任何代码，UI层只是呈现UI。\n\n## View 模块\n\n那么在UI层怎么处理这些状态呢？\n\n这也非常简单，代码如下：\n\n```dart\n// 创建provider，返回viewModel\nfinal postsProvider = StateNotifierProvider.family<PostsViewModel, int>(\n    (ref, categoryId) => PostsViewModel(categoryId));\n\nclass PostsPageCategory extends ConsumerWidget {  // 继承 ConsumerWidget\n\n  final int categoryId;\n  final ScrollController scrollController;\n  final RefreshController refreshController;\n\n  PostsPageCategory(\n      {this.categoryId, this.scrollController, this.refreshController});\n\n  @override\n  Widget build(BuildContext context, ScopedReader watch) { \n    final postsViewModel = watch(postsProvider(categoryId)); // 使用 watch 来监听Provider\n    final postState = watch(postsProvider(categoryId).state); // 使用 watch 来监听Provider的状态\n    return Refresh(\n      controller: refreshController,\n      onLoading: () async {  // 加载更多处理\n        await postsViewModel.getPosts(categoryId);\n        if (postState.pageState == PageState.noMoreDataState) {\n          refreshController.loadNoData();\n        } else {\n          refreshController.loadComplete();\n        }\n      },\n      onRefresh: () async { // 刷新处理\n        await context\n            .read(postsProvider(categoryId))\n            .getPosts(categoryId, isRefresh: true);\n        refreshController.refreshCompleted();\n        refreshController.footerMode.value = LoadStatus.canLoading;\n      },\n      content: _createContent(postState, context),\n    );\n  }\n\n  Widget _createContent(PostState postState, BuildContext context) {\n    if (postState.pageState == PageState.busyState ||\n        postState.pageState == PageState.initializedState) {  // loading 状态处理\n      return Center(\n        child: Lottie.asset(\n          'assets/json/loading2.json',\n          width: 126,\n          fit: BoxFit.cover,\n          alignment: Alignment.center,\n        ),\n      );\n    }\n\n    if (postState.pageState == PageState.emptyDataState) {\n      return ErrorPage( // 错误处理\n        isEmptyPage: true,\n        icon: Lottie.asset(\n          'assets/json/empty3.json',\n          width: ScreenUtil.instance.width / 1.8,\n          height: 220,\n          fit: BoxFit.contain,\n          alignment: Alignment.center,\n        ),\n        desc: '暂 无 数 据',\n        buttonAction: () => context.refresh(postsProvider(categoryId)),\n      );\n    }\n\n    if (postState.pageState == PageState.errorState) {\n      return ErrorPage(\n        title: postState.error is NeedLogin\n            ? '😮 你竟然忘记登录 😮'\n            : postState.error.code?.toString(),\n        desc: postState.error.message,\n        buttonAction: () async {\n          if (postState.error is NeedLogin) {\n            LoginState loginState = await Navigator.of(context).push(\n                MaterialPageRoute(builder: (context) => FlareSignInDemo()));\n            if (loginState.isLogin) {\n              context.refresh(postsProvider(categoryId));\n            }\n          } else {\n            context.refresh(postsProvider(categoryId));\n          }\n        },\n        buttonText: postState.error is NeedLogin ? '登录' : null,\n      );\n    }\n    return ListView.separated(  // 加载数据，现在页面\n      shrinkWrap: true,\n      separatorBuilder: (context, index) {\n        return Padding(padding: EdgeInsets.only(top: 12));\n      },\n      padding: EdgeInsets.fromLTRB(12, 18, 12, 18),\n      reverse: false,\n      itemCount: postState.posts.length,\n      controller: scrollController,\n      itemBuilder: (BuildContext context, int index) {\n        return PostsPageItem(\n          post: postState.posts[index],\n          index: index,\n          categoryId: categoryId,\n        );\n      },\n    );\n  }\n}\n```\n\n是不是非常简单，不需要写 setState() 和 请求数据的任何代码，代码结构也非常清晰。在上述APP应用里的首页以及分类页面列表数据及页面的loading和缺省页等都是这一个简单 `PostsPageCategory` 完成的。\n\n\n## 其他相关\n\n以上这套开发模式我给出了大概的思路和部分代码，大家也可以顺着这个思路试试；这套开发模式后续还会继续优化它。\n\n### 应用功能相关\n\n用过 Flutter TabBar 同学应该知道，它在字体放大时会卡顿，以及如何自定义指示器等， 如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/TabBar.gif \"TabBar\")\n\n</div>\n\n以及，渐变的高斯模糊背景和图片标题动画的实现等，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/image/flutterMVVM/profile.gif \"profile\")\n\n</div>\n\n及更多这个应用的功能实现和细节并没有在这里讲述，这篇文章主要介绍 MVVM，关于这个图片分享APP，只是我在业余时间对Flutter的研究探索和学习，这个应用大概只完成了一半，后续应该还好写关于这个APP的文章。\n\n### REST API接口相关\n\n还有，这个APP的后端API也是我自己开发的，使用的是 nodejs 的 **express** + **ts** 开发的，如首页推荐接口及分类页接口数据都是通过这个API查询到的： [首页API接口](https://api.lishaoy.net/posts?sort=recommend&pageIndex=1&pageSize=10)\n\n具体的实现是使用一条SQL语句查询得到，代码如下：\n\n```sql\n    SELECT \n    post.id, \n    post.content, \n    post.title,\n    category.name as category,\n    post.views,\n    JSON_OBJECT(\n      'id', user.id,\n      'name', user.name,\n      'avatar', CAST(\n        IF(COUNT(avatar.id), \n          GROUP_CONCAT(\n            DISTINCT JSON_OBJECT(\n              'largeAvatarUrl', concat('http://localhost:3001/avatar/', user.id, '|@u003f|size=large'),\n              'mediumAvatarUrl', concat('http://localhost:3001/avatar/', user.id, '|@u003f|size=medium'),\n              'smallAvatarUrl', concat('http://localhost:3001/avatar/', user.id, '|@u003f|size=small')\n            )\n          ),\n        NULL)\n      AS JSON)\n    ) as user,\n    (\n      SELECT COUNT(comment.id) FROM comment\n      WHERE comment.postId = post.id\n      GROUP BY comment.postId\n\t  ) as totalComments,   \n    CAST(\n      IF(\n        COUNT(cover.id),\n            GROUP_CONCAT(\n              DISTINCT JSON_OBJECT(\n                'id', cover.id,\n                'width', cover.width,\n                'height', cover.height,\n                'largeImageUrl', concat('http://localhost:3001/files/', cover.id, '/serve|@u003f|size=large'),\n                'mediumImageUrl', concat('http://localhost:3001/files/', cover.id, '/serve|@u003f|size=medium'),\n                'small', concat('http://localhost:3001/files/', cover.id, '/serve|@u003f|size=thumbnail')\n              ) ORDER BY cover.id DESC\n            ),\n        NULL\n      ) AS JSON\n    ) AS coverImage,\n    CAST(\n      IF(\n        COUNT(file.id),\n        CONCAT(\n          '[',\n            GROUP_CONCAT(\n              DISTINCT JSON_OBJECT(\n                'id', file.id,\n                'width', file.width,\n                'height', file.height,\n                'largeImageUrl', concat('http://localhost:3001/files/', file.id, '/serve|@u003f|size=large'),\n                'mediumImageUrl', concat('http://localhost:3001/files/', file.id, '/serve|@u003f|size=medium'),\n                'small', concat('http://localhost:3001/files/', file.id, '/serve|@u003f|size=thumbnail')\n              ) ORDER BY file.id DESC\n            ),\n          ']'\n        ),\n        NULL\n      ) AS JSON\n    ) AS files,\n    CAST(\n      IF(\n        COUNT(tag.id),\n        CONCAT(\n          '[', \n            GROUP_CONCAT(\n              DISTINCT JSON_OBJECT(\n                'id', tag.id,\n                'name', tag.name\n              )\n            ),\n          ']'\n        ),\n        NULL\n      ) AS JSON\n    ) AS tags,\n    (\n      SELECT COUNT(user_like_post.postId)\n      FROM user_like_post\n      WHERE user_like_post.postId = post.id\n    ) AS totalLikes\n  FROM post \n    LEFT JOIN user \n      ON user.id = post.userId\n    LEFT JOIN avatar\n      ON avatar.userId = user.id\n    LEFT JOIN LATERAL (\n      SELECT * FROM file\n      WHERE file.postId = post.id\n      ORDER BY file.id DESC\n      LIMIT 9\n    ) AS file ON file.postId = post.id\n    LEFT JOIN LATERAL(\n\t  \tSELECT * FROM file\n\t  \tWHERE file.isCover = 1 AND file.postId = post.id\n\t  \tGROUP BY file.id\n\t  \tLIMIT 1\n    ) AS cover ON cover.postId = post.id and cover.isCover = 1 \n    LEFT JOIN post_tag\n    ON post_tag.postId = post.id\n    LEFT JOIN tag\n    ON tag.id = post_tag.tagId\n    LEFT JOIN category \n    ON post.categoryId = category.id\n  WHERE post.id IS NOT NULL\n  GROUP BY post.id\n  ORDER BY post.id DESC\n  LIMIT 10\n  OFFSET 0\n```\n\n这个是打印出来的log，具体的代码如下(可根据不同的参数查询不同的数据)，如下：\n\n```js\nexport const getPosts = async (options: GetPostOptions) => {\n  const {\n    sort,\n    filter,\n    pagination: { limit, offset },\n    userId,\n  } = options;\n  let params: Array<any> = [limit, offset];\n  if (filter.param) {\n    params = [filter.param, ...params];\n  }\n  if (userId) {\n    params = [userId, ...params];\n  }\n  console.log(`params: ${params}`);\n\n  const sql = `\n  SELECT \n    post.id, \n    post.content, \n    post.title,\n    category.name as category,\n    post.views,\n    post.createdAt,\n    post.updatedAt,\n    ${sqlFragment.user},\n    ${sqlFragment.totalComments},\n    ${sqlFragment.coverImage},\n    ${sqlFragment.file},\n    ${sqlFragment.tags}\n    ${userId ? `, ${sqlFragment.liked} ` : ''},\n    ${sqlFragment.totalLikes}\n  FROM post \n    ${sqlFragment.leftJoinUser}\n    ${sqlFragment.leftJoinOneFile}\n    ${sqlFragment.leftJoinCover}\n    ${sqlFragment.leftJoinTag}\n    ${sqlFragment.leftJoinCategory}\n    ${filter.name == 'userLiked' ? sqlFragment.innerJoinUserLikePost : ''}\n  WHERE ${filter.sql}\n  GROUP BY post.id\n  ORDER BY ${sort}\n  LIMIT ?\n  OFFSET ?\n  `;\n\n  console.log(sql);\n\n  const [data] = await connection.promise().query(sql, params);\n\n  return data;\n};\n```\n\n如果这个后端 REST API 接口应用感兴趣的同学可以参考 [宁皓网](https://ninghao.net/package/xb2-node) 的视频，我就是根据这套视频做的，不过自己加了很多东西。\n\n最后，很多同学都希望我开源，所以，给出项目的地址，不过项目还没有完成，架构也在优化中...后续可能项目地址会变化，目前可以先参考以下地址：\n项目地址：[https://github.com/persilee/flutter_pro](https://github.com/persilee/flutter_pro)","tags":["dart"],"categories":["Dart"]},{"title":"Android响应式编程之RxJava","url":"%2Frxjava.html","content":"\n{% li https://cdn.lishaoy.net/rxjava/rxjava_cover.png, RxJava,RxJava %}\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.35; color: #333; font-family: Optima-Regular, PingFangTC-light; letter-spacing: 1.5px;\"><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">本篇文章将概述 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>Android<span>」</span></strong> 响应式编程 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong>，会从设计模式、使用到原理结合案例，由浅到深、由表到里、循序渐进的概述。</p></section>\n\n<!-- more -->\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.35; color: #333; font-family: Optima-Regular, PingFangTC-light; letter-spacing: 1.5px;\"><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">本篇文章的示例代码放在 <a href=\"https://github.com/persilee/android_practice\" style=\"text-decoration: none; word-wrap: break-word; color: #399003; font-weight: normal; border-bottom: 1px solid #399003;\">Github</a> 上。</p>\n<h2 id=\"观察者模式(Observer pattern)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">观察者模式(Observer pattern)</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">在使用 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 之前，我们需要先理解观察者设计模式，因为，<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 就使用了观察者设计模式。</p>\n<h3 id=\"定义\" data-tool=\"mdnice编辑器\" style=\"padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"color: #2b2b2b; padding-bottom: 2px;\"><span style=\"width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;\"></span>定义</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">观察者模式(又被称为发布-订阅 Publish/Subscribe 模式)，属于行为型模式的一种，它定义了一对多的依赖关系，让多个观察者对象同时监听某一个被观察者对象，被观察者对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新。</p>\n<h3 id=\"结构\" data-tool=\"mdnice编辑器\" style=\"padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"color: #2b2b2b; padding-bottom: 2px;\"><span style=\"width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;\"></span>结构</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">观察者模式结构，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/UML.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">一般我们写一个观察者模式都需要定义如下角色：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;\">Observable(被观察者)：一般为抽象类，用于保存观察者对象和新增、删除、通知观察者的方法。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;\">ConcreteObservable(具体的被观察者)：继承 Observable 类，实现 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">notifyObservers()</code> 方法，当被观察者发生变化时，通知所有的观察者。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;\">Observer(观察者)：一般为接口，包含 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">update()</code> 方法，当收到具体的被观察者通知时被调用。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;\">ConcreteObserver(具体的观察者)：实现 Observer 接口，重写 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">update()</code> 方法，以便更新自身状态。</section></li></ul>\n<h3 id=\"案例\" data-tool=\"mdnice编辑器\" style=\"padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"color: #2b2b2b; padding-bottom: 2px;\"><span style=\"width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;\"></span>案例</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">接下来，我们来实现一个简单的观察者模式的案例，案例情景，如下：</p>\n<blockquote data-tool=\"mdnice编辑器\" style=\"display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid #1b900d; background: #fff;\"><span style=\"color: #74b56d; font-size: 34px; line-height: 1; font-weight: 700;\">❝</span>\n<p style=\"padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px; margin: 0px; color: black; line-height: 26px;\">小明的水果店里的 🍊 非常甜，所以很快就卖光了，但是，接二连三的有顾客过来买 🍊，于是，小明告诉顾客：🍊已经卖完了，你们可以扫下这个公众号，订阅之后，等 🍊有货了会自动通知你们！</p>\n<span style=\"float: right; color: #74b56d;\">❞</span></blockquote>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">这种场景我们就可以使用观察者模式，我们先创建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observer</code> 接口(观察者)，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observer</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">update</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">再创建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Customer</code> 客户类(具体的观察者)，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;实现&nbsp;Observer&nbsp;接口</span><br><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Customer</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observer</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Customer</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;重新&nbsp;Observer&nbsp;的&nbsp;update()&nbsp;方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">update</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"&nbsp;购买了&nbsp;🍊\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">之后创建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable</code> 抽象类(被观察者)，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observable</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;List&lt;Observer&gt;&nbsp;observers&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ArrayList&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;新增观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">add</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Observer&nbsp;observer)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observers.add(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;移除观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">remove</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Observer&nbsp;observer)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observers.remove(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;通知观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">abstract</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">notifyObservers</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">最后创建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">FruitStore</code> 水果店类(具体的被观察者)，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;继承&nbsp;Observable&nbsp;类</span><br><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">FruitStore</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observable</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;重写&nbsp;notifyObservers()&nbsp;通知所有的观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">notifyObservers</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span>&nbsp;(Observer&nbsp;observer:&nbsp;observers)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.update();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.notifyObservers();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们再创建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Client</code> 进行测试，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Client</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建一个水果店实例(被观察者)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FruitStore&nbsp;fruitStore&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;FruitStore();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fruitStore.add(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Customer(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>));&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;新增观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fruitStore.add(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Customer(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"per\"</span>));&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;新增观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fruitStore.add(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Customer(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"zimu\"</span>));&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;新增观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fruitStore.run();&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;通知所有观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\">lsy&nbsp;购买了&nbsp;🍊<br>per&nbsp;购买了&nbsp;🍊<br>zimu&nbsp;购买了&nbsp;🍊<br><br>Process&nbsp;finished&nbsp;with&nbsp;<span class=\"hljs-built_in\" style=\"color: #c18401; line-height: 26px;\">exit</span>&nbsp;code&nbsp;0<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可见，使用观察者模式可以降低观察者和被观察者之间的耦合性，可以建立一套触发机制；当然，Java JDK 已经提供了 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observer</code>、<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable</code>，我们使用它们同样可以实现功能。</p>\n<h2 id=\"RxJava的使用\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">RxJava的使用</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">通过上文的对观察者模式的理解之后，再来看看 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 是如何使用的，它同样有如下几个角色，如下：</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>Observable<span>」</span></strong> :被观察者，也就是事件的发生者<br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>Observer<span>」</span></strong> :观察者，也就是事件的接受者<br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>subscribe<span>」</span></strong> :两者产生订阅关系</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">具体的使用如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">UseRxJava</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建&nbsp;Observable&nbsp;被观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observable&nbsp;observable&nbsp;=&nbsp;Observable.create(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObservableOnSubscribe&lt;String&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;ObservableEmitter&lt;String&gt;&nbsp;emitter)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊&nbsp;到货了！\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"大家可以来买&nbsp;🍊&nbsp;了！\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onError(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Throwable(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊&nbsp;又卖完了！\"</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"WOW！🍊&nbsp;卖光了\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onComplete();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onComplete();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊&nbsp;加急进货中...\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建&nbsp;Observer&nbsp;观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observer&lt;String&gt;&nbsp;observer&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Observer&lt;String&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onSubscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Disposable&nbsp;d)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onSubscribe:\"</span>&nbsp;+&nbsp;d.isDisposed());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onNext</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;String&nbsp;s)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onNext:\"</span>&nbsp;+&nbsp;s);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onError</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Throwable&nbsp;e)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onError:\"</span>&nbsp;+&nbsp;e.getMessage());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onComplete</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onComplete\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;关联订阅关系</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observable.subscribe(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\">onSubscribe:<span class=\"hljs-literal\" style=\"color: #0184bb; line-height: 26px;\">false</span><br>onNext:🍊&nbsp;到货了！<br>onNext:大家可以来买&nbsp;🍊&nbsp;了！<br>onError:🍊&nbsp;又卖完了！<br><br>BUILD&nbsp;SUCCESSFUL&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span>&nbsp;328ms<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">通过简单的使用案例和运行结果，可知：</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onNext()<span>」</span></strong>: 可以多次发送事件<br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onComplete()<span>」</span></strong>: 可以多次调用不会报错，但只执行一次<br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onError()<span>」</span></strong>: 只能发送一次，多次调用会报错，不可和 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onComplete()</code> 共存<br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onComplete()<span>」</span></strong>: 和 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onError()<span>」</span></strong> 都存在时，只执行 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onError()</code><br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onComplete()<span>」</span></strong>: 和 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onError()<span>」</span></strong> 之后，观察者无法接收到发送事件<br>\n<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>onSubscribe()<span>」</span></strong>: 是在订阅之后，发送事件之前执行</p>\n<h2 id=\"RxJava编程思想\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">RxJava编程思想</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 是在 Java 上的响应式扩展，通过使用可观察序列，用于组成异步和基于事件编程的类库，也就是以响应式编程思维来进行编程的Java类库。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">响应式编程是面向数据流的编程思想，在响应式编程思想下，一切皆数据流。响应式编程所侧重的是数据流的流动。</p>\n<h3 id=\"响应式编程案例\" data-tool=\"mdnice编辑器\" style=\"padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"color: #2b2b2b; padding-bottom: 2px;\"><span style=\"width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;\"></span>响应式编程案例</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们在理解响应式编程之前，先来使用我们传统的思想实现一个加载网络图片的案例：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MainActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"MainActivity\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;ImageView&nbsp;imageView;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;String&nbsp;URL&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"https://cdn.lishaoy.net/serializable/serializable.png\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;Handler&nbsp;handler&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Handler(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Handler.Callback()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">handleMessage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Message&nbsp;msg)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"handleMessage:&nbsp;aaa\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;(Bitmap)&nbsp;msg.obj;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageView.setImageBitmap(bitmap);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(loading&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;loading.dismiss();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;ProgressDialog&nbsp;loading;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageView&nbsp;=&nbsp;findViewById(R.id.image_view);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">loadImage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(View&nbsp;view)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loading&nbsp;=&nbsp;ProgressDialog.show(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"loading\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Thread(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Runnable()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL&nbsp;url&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;URL(URL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpURLConnection&nbsp;urlConnection&nbsp;=&nbsp;(HttpURLConnection)&nbsp;url.openConnection();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlConnection.setConnectTimeout(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6000</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;responseCode&nbsp;=&nbsp;urlConnection.getResponseCode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>(responseCode&nbsp;==&nbsp;HttpURLConnection.HTTP_OK)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;inputStream&nbsp;=&nbsp;urlConnection.getInputStream();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;BitmapFactory.decodeStream(inputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Message&nbsp;message&nbsp;=&nbsp;handler.obtainMessage();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message.obj&nbsp;=&nbsp;bitmap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler.sendMessage(message);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(MalformedURLException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).start();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">如上，我们可能会用 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">new Thread()</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Handler</code> 来实现或者其他方法，每个人的实现方法可能都不同。如果，使用 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 思想实现呢，必然实现方式要按照响应式编程数据流的编程思想，实现方式也就一致了。下面，我们再用 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 来实现它，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MainActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"MainActivity\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;ImageView&nbsp;imageView;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;String&nbsp;URL&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"https://cdn.lishaoy.net/image/112131.jpg\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;ProgressDialog&nbsp;loading;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Disposable&nbsp;disposable;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageView&nbsp;=&nbsp;findViewById(R.id.image_view);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">rxJavaLoadImage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(View&nbsp;view)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;Observable.just(URL)&nbsp;创建被观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observable.just(URL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.map(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;String,&nbsp;Bitmap&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Bitmap&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;s)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL&nbsp;url&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;URL(URL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpURLConnection&nbsp;urlConnection&nbsp;=&nbsp;(HttpURLConnection)&nbsp;url.openConnection();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlConnection.setConnectTimeout(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6000</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;responseCode&nbsp;=&nbsp;urlConnection.getResponseCode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(responseCode&nbsp;==&nbsp;HttpURLConnection.HTTP_OK)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;inputStream&nbsp;=&nbsp;urlConnection.getInputStream();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;BitmapFactory.decodeStream(inputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;bitmap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribeOn(Schedulers.io())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;上面的代码分配工作线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(AndroidSchedulers.mainThread())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;下面的代码分别UI线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;链式调用&nbsp;subscribe&nbsp;绑定观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Observer&lt;Bitmap&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;onSubscribe()&nbsp;方法在发送事件之前执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onSubscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Disposable&nbsp;d)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loading&nbsp;=&nbsp;ProgressDialog.show(MainActivity.<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"loading\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;d;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;onNext()&nbsp;在发送事件之后执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onNext</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bitmap&nbsp;bitmap)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageView.setImageBitmap(bitmap);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onError</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Throwable&nbsp;e)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.e(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onError:&nbsp;\"</span>&nbsp;+&nbsp;e.getMessage(),&nbsp;e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onComplete</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(loading&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;loading.dismiss();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onDestroy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onDestroy();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable.dispose();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/load_image.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 以链式调用，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable.just(URL)</code> 分发事件，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">map()</code> 来加工数据流(可以使用多个map处理不同的业务)、<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeOn(Schedulers.io())</code> 切换工作线程、<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observeOn(AndroidSchedulers.mainThread())</code> 切换主线程，数据流流向 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribe</code> 进行处理(下游的处理根据上游的数据流变化而变化)。</p>\n<h2 id=\"RxJava结合Retrofit使用(案例)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">RxJava结合Retrofit使用(案例)</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">通过 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 使用，现在我们已经了解它的流式的响应式编程的思想，下面我们通过和 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Retrofit</code> 结合使用，看看是什么体验？</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们使用 <a href=\"https://www.wanandroid.com/blog/show/2\" style=\"text-decoration: none; word-wrap: break-word; color: #399003; font-weight: normal; border-bottom: 1px solid #399003;\">玩Android 开放API</a> 来完成本次案例。首先我们使用 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Retrofit</code> 定义一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Api</code> 的接口，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Api</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;获取项目分类数据</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@GET</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"project/tree/json\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">Observable&lt;ProjectBean&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getProject</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;获取项目列表数据(项目列表数据依赖于项目分类数据的id)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@GET</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"project/list/{pageIndex}/json\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">Observable&lt;ProjectItem&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getProjectItem</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Path(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"pageIndex\"</span>)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;pageIndex,&nbsp;@<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Query</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"cid\"</span>)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;cid)</span>;<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ProjectBean</code>、<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ProjectItem</code> JavaBean 我们根据接口返回的数据利用工具 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">GsonFormat</code> 生成。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">然后，新建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">HttpClient</code> 生成 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Retrofit</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">HttpClient</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;api&nbsp;的&nbsp;base&nbsp;url</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;String&nbsp;BASE_URL&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"https://www.wanandroid.com/\"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setBaseUrl</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;baseUrl)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BASE_URL&nbsp;=&nbsp;baseUrl;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建&nbsp;Retrofit</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;Retrofit&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getRetrofit</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建&nbsp;OkHttp&nbsp;客户端</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OkHttpClient.Builder&nbsp;builder&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;OkHttpClient.Builder();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;配置参数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OkHttpClient&nbsp;httpClient&nbsp;=&nbsp;builder.addNetworkInterceptor(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;StethoInterceptor())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.readTimeout(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6666</span>,&nbsp;TimeUnit.SECONDS)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.connectTimeout(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6666</span>,&nbsp;TimeUnit.SECONDS)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.writeTimeout(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6666</span>,&nbsp;TimeUnit.SECONDS)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.build();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Retrofit.Builder().baseUrl(BASE_URL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.client(httpClient)&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;使用&nbsp;OkHttp&nbsp;访问网络</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.addConverterFactory(GsonConverterFactory.create(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Gson()))&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;设置&nbsp;json&nbsp;解析工具</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.addCallAdapterFactory(RxJava2CallAdapterFactory.create())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;设置&nbsp;rxjava</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.build();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">再新建一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RetrofitActivity</code> 来演示，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">RetrofitActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"RetrofitActivity\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Api&nbsp;api;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;TextView&nbsp;textView;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;itemData;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Disposable&nbsp;disposable;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_retrofit);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textView&nbsp;=&nbsp;findViewById(R.id.text_view);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;api&nbsp;=&nbsp;HttpClient.getRetrofit().create(Api.class);&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;生成&nbsp;api</span><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;查询项目分类数据</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SuppressLint</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"CheckResult\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getProject</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(View&nbsp;view)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;api.getProject()&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;查询项目分类数据(返回的是&nbsp;Observable&nbsp;被观察者)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribeOn(Schedulers.io())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给上面的代码分配工作线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(AndroidSchedulers.mainThread())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给下面的代码分配主线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Consumer&lt;ProjectBean&gt;()&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;订阅并创建观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">accept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ProjectBean&nbsp;projectBean)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textView.setText(projectBean.toString());&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;进行&nbsp;UI&nbsp;操作</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onDestroy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onDestroy();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable.dispose();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/get_project.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可见 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Retrofit</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJava</code> 结合使用，代码量减少的同时，整个流程思路更为清晰，且可以为所欲为的切换线程。</p>\n<h3 id=\"防抖\" data-tool=\"mdnice编辑器\" style=\"padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"color: #2b2b2b; padding-bottom: 2px;\"><span style=\"width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;\"></span>防抖</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们再使用防抖(防止用户操作带来的频繁发起请求问题)的方式来查询项目列表数据，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">RetrofitActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"RetrofitActivity\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Api&nbsp;api;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;TextView&nbsp;textView;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;itemData;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Disposable&nbsp;disposable;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_retrofit);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textView&nbsp;=&nbsp;findViewById(R.id.text_view);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;api&nbsp;=&nbsp;HttpClient.getRetrofit().create(Api.class);&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;生成&nbsp;api</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getProjectItemData();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;查询项目列表数据，项目列表数据需要根据项目分类数据的&nbsp;id&nbsp;进行查询</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;且使用&nbsp;rxbinding&nbsp;增加防抖功能</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getProjectItemData</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button&nbsp;button&nbsp;=&nbsp;findViewById(R.id.get_item_button_fd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;RxView.clicks(button)&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;设置防抖的&nbsp;view</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.throttleFirst(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">2600</span>,&nbsp;TimeUnit.MILLISECONDS)&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;设置在&nbsp;2.6&nbsp;秒内只响应一次点击事件</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Consumer&lt;Object&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">accept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;o)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;api.getProject()&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;查询项目分类数据(返回的是&nbsp;Observable&nbsp;被观察者)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribeOn(Schedulers.io())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给上面的代码分配工作线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(AndroidSchedulers.mainThread())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给下面的代码分配主线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Consumer&lt;ProjectBean&gt;()&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;订阅并创建观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">accept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;ProjectBean&nbsp;projectBean)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span>&nbsp;(ProjectBean.DataBean&nbsp;bean:&nbsp;projectBean.getData())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;api.getProjectItem(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">1</span>,&nbsp;bean.getId())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;根据项目分类数据的&nbsp;id&nbsp;查询项目列表数据(返回的是&nbsp;Observable&nbsp;被观察者)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribeOn(Schedulers.io())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给上面的代码分配工作线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(AndroidSchedulers.mainThread())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给下面的代码分配主线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Consumer&lt;ProjectItem&gt;()&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;订阅并创建观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">accept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ProjectItem&nbsp;projectItem)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.d(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"accept:&nbsp;\"</span>&nbsp;+&nbsp;projectItem);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textView.setText(projectItem.toString());&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;进行&nbsp;UI&nbsp;操作</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onDestroy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onDestroy();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable.dispose();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/get_item.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可见以上代码虽然实现了防抖和嵌套查询的功能，但是，代码嵌套过多，难以维护。</p>\n<h3 id=\"解决网络嵌套问题\" data-tool=\"mdnice编辑器\" style=\"padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"color: #2b2b2b; padding-bottom: 2px;\"><span style=\"width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;\"></span>解决网络嵌套问题</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">上面的代码虽没什么问题，但是嵌套太多，所以我们使用 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">flatMap</code> 操作符来解决此问题，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">RetrofitActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"RetrofitActivity\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Api&nbsp;api;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;TextView&nbsp;textView;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;itemData;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Disposable&nbsp;disposable;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_retrofit);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textView&nbsp;=&nbsp;findViewById(R.id.text_view);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;api&nbsp;=&nbsp;HttpClient.getRetrofit().create(Api.class);&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;生成&nbsp;api</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getProjectItemData();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getItemData();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;查询项目列表数据，使用&nbsp;flatMap&nbsp;操作符，解决网络嵌套问题</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getItemData</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button&nbsp;button&nbsp;=&nbsp;findViewById(R.id.get_item_button);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;RxView.clicks(button)&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;设置防抖的&nbsp;view</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.throttleFirst(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">2600</span>,&nbsp;TimeUnit.MILLISECONDS)&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;设置在&nbsp;2.6&nbsp;秒内只响应一次点击事件</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(Schedulers.io())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给下面的代码分配工作线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.flatMap(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;Object,&nbsp;ObservableSource&lt;ProjectBean&gt;&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;ObservableSource&lt;ProjectBean&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;o)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;api.getProject();&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;查询项目分类数据，并且把数据流向下游</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.flatMap(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;ProjectBean,&nbsp;ObservableSource&lt;ProjectBean.DataBean&gt;&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;ObservableSource&lt;ProjectBean.DataBean&gt;&nbsp;apply(ProjectBean&nbsp;projectBean)&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;Observable.fromIterable(projectBean.getData());&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;根据上游流过来的数据，迭代出每个&nbsp;ProjectItem&nbsp;项目列表数据，并且流向下游</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.flatMap(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;ProjectBean.DataBean,&nbsp;ObservableSource&lt;ProjectItem&gt;&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;ObservableSource&lt;ProjectItem&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ProjectBean.DataBean&nbsp;dataBean)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;api.getProjectItem(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">1</span>,&nbsp;dataBean.getId());&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;根据上游流过来的数据，查询每个列表数据，并且流向下游</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(AndroidSchedulers.mainThread())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Consumer&lt;ProjectItem&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">accept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ProjectItem&nbsp;projectItem)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemData&nbsp;+=&nbsp;projectItem.toString()&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"\\n&nbsp;================================================&nbsp;\\n\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textView.setText(itemData);&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;根据上游流过来的数据，进行&nbsp;UI&nbsp;操作</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onDestroy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onDestroy();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable.dispose();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/get_item1.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可见，使用 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">flatMap</code> 操作符后，思路更为清晰，代码平铺下来更易理解，以一种流式的方式不断的向下游流去数据，下游根据上游的数据可以决定是否继续向下游流或者做UI更新操作等，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">flatMap</code> 操作符可以重复使用，且线程的切换可以随意切换，这个就是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJava</code> 数据流式的响应式编程思想。</p>\n<h2 id=\"Hook钩子函数\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">Hook钩子函数</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们已经了解了 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJava</code> 的思想和使用，现在我们来看看它的源码，我们从创建一个被观察者(Observable)开始 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable.create</code>，点击 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">create</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;&lt;T&gt;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">Observable&lt;T&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">create</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;ObservableOnSubscribe&lt;T&gt;&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(source,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"source&nbsp;is&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;RxJavaPlugins.onAssembly(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObservableCreate&lt;&gt;(source));<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">很简单，就这么一句 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJavaPlugins.onAssembly()</code> 代码，我们点进 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onAssembly</code> 如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;*&nbsp;Calls&nbsp;the&nbsp;associated&nbsp;hook&nbsp;function.<br>&nbsp;&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #a626a4; line-height: 26px;\">@param</span>&nbsp;&lt;T&gt;&nbsp;the&nbsp;value&nbsp;type<br>&nbsp;&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #a626a4; line-height: 26px;\">@param</span>&nbsp;source&nbsp;the&nbsp;hook's&nbsp;input&nbsp;value<br>&nbsp;&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #a626a4; line-height: 26px;\">@return</span>&nbsp;the&nbsp;value&nbsp;returned&nbsp;by&nbsp;the&nbsp;hook<br>&nbsp;&nbsp;*/</span><br><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SuppressWarnings</span>({&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"rawtypes\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"unchecked\"</span>&nbsp;})<br><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@NonNull</span><br><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;&lt;T&gt;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">Observable&lt;T&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onAssembly</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Observable&lt;T&gt;&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;Observable,&nbsp;?&nbsp;extends&nbsp;Observable&gt;&nbsp;f&nbsp;=&nbsp;onObservableAssembly;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(f&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;apply(f,&nbsp;source);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;source;<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可以看到注释：Calls the associated hook function(调用关联的钩子函数)，把 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 赋值给了 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">f</code> 函数，我们通过查找 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 发现他并没有赋值，也就是说它始终是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">null</code>，所以，在没有给 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 赋值的情况下，这个函数什么也不会做；所以，我们需要给 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 函数赋值就可以先 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">if</code> 语句执行 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 函数，那么怎么赋值呢？我们对 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 进行搜索发现，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"rawtypes\"</span>)<br><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">volatile</span>&nbsp;Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;Observable,&nbsp;?&nbsp;extends&nbsp;Observable&gt;&nbsp;onObservableAssembly;<br><br>RxJavaPlugins.onObservableAssembly&nbsp;=&nbsp;onObservableAssembly;<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onObservableAssembly</code> 是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJavaPlugins</code> 类的一个静态变量，于是我们就知道如何赋值了，我们用之前例子来测试，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">UseRxJava</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;给&nbsp;hook&nbsp;钩子函数赋值</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RxJavaPlugins.setOnObservableAssembly(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;Observable,&nbsp;Observable&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Observable&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Observable&nbsp;observable)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(observable&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"&nbsp;你想买🍊&nbsp;？\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;observable;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;新增一个测试被观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observable.just(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.map(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;String,&nbsp;Object&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;s)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy&nbsp;买了&nbsp;\"</span>&nbsp;+&nbsp;s;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Consumer&lt;Object&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">accept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;o)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(o);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建&nbsp;Observable&nbsp;被观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observable&nbsp;observable&nbsp;=&nbsp;Observable.create(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObservableOnSubscribe&lt;String&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;ObservableEmitter&lt;String&gt;&nbsp;emitter)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊&nbsp;到货了！\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"大家可以来买&nbsp;🍊&nbsp;了！\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onError(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Throwable(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊&nbsp;又卖完了！\"</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"WOW！🍊&nbsp;卖光了\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onComplete();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onComplete();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emitter.onNext(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍊&nbsp;加急进货中...\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建&nbsp;Observer&nbsp;观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observer&lt;String&gt;&nbsp;observer&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Observer&lt;String&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onSubscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Disposable&nbsp;d)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onSubscribe:\"</span>&nbsp;+&nbsp;d.isDisposed());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onNext</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;String&nbsp;s)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onNext:\"</span>&nbsp;+&nbsp;s);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onError</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Throwable&nbsp;e)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onError:\"</span>&nbsp;+&nbsp;e.getMessage());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onComplete</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onComplete\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;关联订阅关系</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observable.subscribe(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\">io.reactivex.rxjava3.internal.operators.observable.ObservableJust@694f9431&nbsp;你想买🍊&nbsp;？<br>io.reactivex.rxjava3.internal.operators.observable.ObservableMap@f2a0b8e&nbsp;你想买🍊&nbsp;？<br>lsy&nbsp;买了&nbsp;🍊<br>io.reactivex.rxjava3.internal.operators.observable.ObservableCreate@515f550a&nbsp;你想买🍊&nbsp;？<br>onSubscribe:<span class=\"hljs-literal\" style=\"color: #0184bb; line-height: 26px;\">false</span><br>onNext:🍊&nbsp;到货了！<br>onNext:大家可以来买&nbsp;🍊&nbsp;了！<br>onError:🍊&nbsp;又卖完了！<br><br>BUILD&nbsp;SUCCESSFUL&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span>&nbsp;868ms<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">hook</code> 钩子函数执行了3次，分别是：<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableJust</code>、<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableMap</code>、<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableCreate</code>，可知，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">hook</code> 钩子函数是一个全局监听函数，所以我们可以利用它做很多事情。</p>\n<h2 id=\"RxJava观察者模式和标准观察者模式\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">RxJava观察者模式和标准观察者模式</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们来继续解读源码，通过标准观察者模式和 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJava</code> 观察者模式的比较已区别来更加深刻的理解 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJava</code>。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">上面我们通过源码了解到 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">hook</code> 钩子函数，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable.create</code> 创建一个被观察者时如果我们给钩子函数赋值，就会先执行钩子函数；那么，我们的准观察者模式和 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 观察者模式有什么不同呢？</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">标准观察者模式有4个角色：Observable(被观察者)、ConcreteObservable(具体的被观察者)、Observer(观察者)、ConcreteObserver(具体的观察者)，<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 观察者模式的这4个角色分别是什么呢？对应关系如下：</p>\n<section class=\"table-container\" data-tool=\"mdnice编辑器\" style=\"overflow-x: auto;\"><table style=\"display: table; text-align: left;\">\n<thead>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: white;\">\n<th style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-weight: bold; background-color: #f0f0f0; font-size: 16px; color: #595959; min-width: 85px;\">标准观察者模式</th>\n<th style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-weight: bold; background-color: #f0f0f0; font-size: 16px; color: #595959; min-width: 85px;\">RxJava观察者模式</th>\n</tr>\n</thead>\n<tbody style=\"border: 0;\">\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: white;\">\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">Observable (被观察者)</td>\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">Observable 接口</td>\n</tr>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: #F8F8F8;\">\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">ConcreteObservable(具体的被观察者)</td>\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">Observable.create(）创建出来的，最终是一个 ObservableCreate 对象</td>\n</tr>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: white;\">\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">Observer(观察者)</td>\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">Observer 接口</td>\n</tr>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: #F8F8F8;\">\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">ConcreteObserver(具体的观察者)</td>\n<td style=\"border: 1px solid #ccc; padding: 5px 10px; text-align: left; font-size: 16px; color: #595959; min-width: 85px;\">new Observer<string>() { } 创建出来的观察者对象</string></td>\n</tr>\n</tbody>\n</table>\n</section><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">在标准的观察者模式中 Observable (被观察者) 是持有 Observer(观察者) 列表的，那么 <strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 观察者模式呢？</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们来继续看源码，上文我们已经看过 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable.create</code>，点击 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">create</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;&lt;T&gt;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">Observable&lt;T&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">create</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;ObservableOnSubscribe&lt;T&gt;&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(source,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"source&nbsp;is&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;RxJavaPlugins.onAssembly(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObservableCreate&lt;&gt;(source));<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">RxJavaPlugins.onAssembly()</code> 我们已经看过，我们来看看 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">new ObservableCreate&lt;&gt;(source)</code>， 这个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source</code> 就是我们传进来的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">new ObservableOnSubscribe(){ ... }</code>，我们点进 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableCreate</code> 如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ObservableCreate</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observable</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;ObservableOnSubscribe&lt;T&gt;&nbsp;source;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">ObservableCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObservableOnSubscribe&lt;T&gt;&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.source&nbsp;=&nbsp;source;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可知，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">return RxJavaPlugins.onAssembly(new ObservableCreate&lt;&gt;(source));</code> 返回的是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableCreate(ObservableOnSubscribe&lt;T&gt; source) { this.source = source; }</code>，而 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source</code> 是我们自己传进去的；</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们再来看看订阅 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observable.subscribe(observer)</code> 代码，点进 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribe</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SchedulerSupport</span>(SchedulerSupport.NONE)<br><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(observer,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"observer&nbsp;is&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer&nbsp;=&nbsp;RxJavaPlugins.onSubscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;observer);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(observer,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"The&nbsp;RxJavaPlugins.onSubscribe&nbsp;hook&nbsp;returned&nbsp;a&nbsp;null&nbsp;Observer.&nbsp;Please&nbsp;change&nbsp;the&nbsp;handler&nbsp;provided&nbsp;to&nbsp;RxJavaPlugins.setOnObservableSubscribe&nbsp;for&nbsp;invalid&nbsp;null&nbsp;returns.&nbsp;Further&nbsp;reading:&nbsp;https://github.com/ReactiveX/RxJava/wiki/Plugins\"</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subscribeActual(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(NullPointerException&nbsp;e)&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;NOPMD</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span>&nbsp;e;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(Throwable&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exceptions.throwIfFatal(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;can't&nbsp;call&nbsp;onError&nbsp;because&nbsp;no&nbsp;way&nbsp;to&nbsp;know&nbsp;if&nbsp;a&nbsp;Disposable&nbsp;has&nbsp;been&nbsp;set&nbsp;or&nbsp;not</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;can't&nbsp;call&nbsp;onSubscribe&nbsp;because&nbsp;the&nbsp;call&nbsp;might&nbsp;have&nbsp;set&nbsp;a&nbsp;Subscription&nbsp;already</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RxJavaPlugins.onError(e);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NullPointerException&nbsp;npe&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;NullPointerException(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Actually&nbsp;not,&nbsp;but&nbsp;can't&nbsp;throw&nbsp;other&nbsp;exceptions&nbsp;due&nbsp;to&nbsp;RS\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npe.initCause(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span>&nbsp;npe;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们看到重点代码 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeActual(observer);</code> 点进 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeActual</code> 如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">abstract</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribeActual</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer)</span></span>;<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">是一个抽象函数，也就说它的实现是在 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableCreate</code> 类里面的，因为，是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableCreate</code> 调用了 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribe</code> 方法，那么，我们就回到 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeActual</code> 类，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ObservableCreate</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observable</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;ObservableOnSubscribe&lt;T&gt;&nbsp;source;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">ObservableCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObservableOnSubscribe&lt;T&gt;&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.source&nbsp;=&nbsp;source;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;subscribeActual&nbsp;抽象方法的实现</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribeActual</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;创建了一个&nbsp;CreateEmitter&nbsp;发射器，且传入了目标观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateEmitter&lt;T&gt;&nbsp;parent&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;CreateEmitter&lt;&gt;(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;执行了目标观察者的&nbsp;onSubscribe&nbsp;方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.onSubscribe(parent);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;执行目标被观察者(ObservableCreate)&nbsp;的&nbsp;subscribe&nbsp;方法且传入了&nbsp;发射器&nbsp;CreateEmitter</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.subscribe(parent);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(Throwable&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exceptions.throwIfFatal(ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.onError(ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可知，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeActual</code> 抽象方法的实现：创建了一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">CreateEmitter</code> 发射器，且传入了目标观察者，且执行了目标观察者的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onSubscribe()</code> 方法；这就是为什么 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onSubscribe()</code> 方法会在订阅之后，发送事件之前执行的原因。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">之后，又执行目标被观察者(ObservableCreate) 的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribe</code> 方法且传入了发射器 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">CreateEmitter</code>，在看下我们的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">CreateEmitter</code> 发射器源码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">CreateEmitter</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AtomicReference</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Disposable</span>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ObservableEmitter</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;,&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Disposable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;-<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">3434801548987643227L</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;持有目标观察者&nbsp;observer</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateEmitter(Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.observer&nbsp;=&nbsp;observer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;执行&nbsp;onNext()&nbsp;会调用&nbsp;observer.onNext(t)&nbsp;执行目标观察者的&nbsp;onNext()</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onNext</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(T&nbsp;t)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(t&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError(ExceptionHelper.createNullPointerException(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onNext&nbsp;called&nbsp;with&nbsp;a&nbsp;null&nbsp;value.\"</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(!isDisposed())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.onNext(t);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onError</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Throwable&nbsp;t)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(!tryOnError(t))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RxJavaPlugins.onError(t);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">CreateEmitter</code> 发射器持有目标观察者 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer</code> 目标观察者，执行 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onNext()</code> 会调用 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer.onNext(t)</code> 执行目标观察者的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onNext()</code>。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 的观察者模式整个流程，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/observer_uml.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可见，<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 观察者模式和标准的观察者模式完全不同，<strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 观察者模式的被观察者并没有持有观察者的列表，而是通过一个中间层 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">CreateEmitter</code> 发射器来完成事件的传递，它更像是一个发布订阅者模式，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/observable.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<h2 id=\"Map操作符原理\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"display: flex; color: #4CAF50; font-size: 20px;\">Map操作符原理</span><span class=\"suffix\" style=\"display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">上文加载图片的案例里我们已经使用过 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">map</code> 操作符，用来把 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">String</code> 数据加工成 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Bitmap</code> 数据，从而流向下游，我们来回顾一下上文的案例代码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">rxJavaLoadImage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(View&nbsp;view)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;Observable.just(URL)&nbsp;创建被观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observable.just(URL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;使用&nbsp;map&nbsp;操作符加工数据,从&nbsp;String&nbsp;转换为&nbsp;Bitmap</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.map(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Function&lt;String,&nbsp;Bitmap&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Bitmap&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;s)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL&nbsp;url&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;URL(URL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpURLConnection&nbsp;urlConnection&nbsp;=&nbsp;(HttpURLConnection)&nbsp;url.openConnection();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlConnection.setConnectTimeout(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6000</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;responseCode&nbsp;=&nbsp;urlConnection.getResponseCode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(responseCode&nbsp;==&nbsp;HttpURLConnection.HTTP_OK)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;inputStream&nbsp;=&nbsp;urlConnection.getInputStream();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;BitmapFactory.decodeStream(inputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;bitmap;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;将&nbsp;Bitmap&nbsp;数据流向下游</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribeOn(Schedulers.io())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;上面的代码分配工作线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.observeOn(AndroidSchedulers.mainThread())&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;下面的代码分别UI线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;链式调用&nbsp;subscribe&nbsp;绑定观察者</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Observer&lt;Bitmap&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;onSubscribe()&nbsp;方法在发送事件之前执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onSubscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Disposable&nbsp;d)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loading&nbsp;=&nbsp;ProgressDialog.show(MainActivity.<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"loading\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disposable&nbsp;=&nbsp;d;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;onNext()&nbsp;在发送事件之后执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onNext</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bitmap&nbsp;bitmap)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageView.setImageBitmap(bitmap);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onError</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Throwable&nbsp;e)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.e(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onError:&nbsp;\"</span>&nbsp;+&nbsp;e.getMessage(),&nbsp;e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onComplete</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(loading&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;loading.dismiss();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">我们点进 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">map</code> 查看源码，如下</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@CheckReturnValue</span><br><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SchedulerSupport</span>(SchedulerSupport.NONE)<br><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;&lt;R&gt;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">Observable&lt;R&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">map</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T,&nbsp;?&nbsp;extends&nbsp;R&gt;&nbsp;mapper)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;ObjectHelper.requireNonNull(mapper,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"mapper&nbsp;is&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;RxJavaPlugins.onAssembly(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObservableMap&lt;T,&nbsp;R&gt;(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;mapper));<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">可知，最终返回的是一个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableMap</code>，点进 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableMap</code> 如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ObservableMap</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">U</span>&gt;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AbstractObservableWithUpstream</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">U</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T,&nbsp;?&nbsp;extends&nbsp;U&gt;&nbsp;function;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">ObservableMap</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObservableSource&lt;T&gt;&nbsp;source,&nbsp;Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T,&nbsp;?&nbsp;extends&nbsp;U&gt;&nbsp;function)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>(source);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.function&nbsp;=&nbsp;function;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;new&nbsp;MapObserver&lt;T,&nbsp;U&gt;(t,&nbsp;function)&nbsp;把我们传进来的函数包上了一次&nbsp;MapObserver</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribeActual</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;U&gt;&nbsp;t)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.subscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;MapObserver&lt;T,&nbsp;U&gt;(t,&nbsp;function));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">关键代码 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source.subscribe(new MapObserver&lt;T, U&gt;(t, function))</code> 把我们传进来的函数包上了一次 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">MapObserver</code>，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source.subscribe()</code> 这个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source</code> 就是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable</code>，就相当于 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observable.subscribe()</code>，而 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">MapObserver</code> 继承与 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">BasicFuseableObserver</code>，<code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">BasicFuseableObserver</code> 实现了 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">Observer</code>，最终 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source.subscribe()</code> 会执行到：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\">&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SchedulerSupport</span>(SchedulerSupport.NONE)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribe</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@NonNull&nbsp;Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(observer,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"observer&nbsp;is&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer&nbsp;=&nbsp;RxJavaPlugins.onSubscribe(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;observer);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(observer,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"The&nbsp;RxJavaPlugins.onSubscribe&nbsp;hook&nbsp;returned&nbsp;a&nbsp;null&nbsp;Observer.&nbsp;Please&nbsp;change&nbsp;the&nbsp;handler&nbsp;provided&nbsp;to&nbsp;RxJavaPlugins.setOnObservableSubscribe&nbsp;for&nbsp;invalid&nbsp;null&nbsp;returns.&nbsp;Further&nbsp;reading:&nbsp;https://github.com/ReactiveX/RxJava/wiki/Plugins\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;是一个静态抽象方法，最终由实现类完成</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subscribeActual(observer);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(NullPointerException&nbsp;e)&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;NOPMD</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span>&nbsp;e;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(Throwable&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exceptions.throwIfFatal(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;can't&nbsp;call&nbsp;onError&nbsp;because&nbsp;no&nbsp;way&nbsp;to&nbsp;know&nbsp;if&nbsp;a&nbsp;Disposable&nbsp;has&nbsp;been&nbsp;set&nbsp;or&nbsp;not</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;can't&nbsp;call&nbsp;onSubscribe&nbsp;because&nbsp;the&nbsp;call&nbsp;might&nbsp;have&nbsp;set&nbsp;a&nbsp;Subscription&nbsp;already</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RxJavaPlugins.onError(e);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NullPointerException&nbsp;npe&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;NullPointerException(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Actually&nbsp;not,&nbsp;but&nbsp;can't&nbsp;throw&nbsp;other&nbsp;exceptions&nbsp;due&nbsp;to&nbsp;RS\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npe.initCause(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span>&nbsp;npe;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeActual(observer)</code> 是一个静态抽象方法，最终由实现类完成，也就是 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">ObservableJust</code> 的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">subscribeActual</code> 方法，如下</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ObservableJust</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Observable</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ScalarSupplier</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;T&nbsp;value;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">ObservableJust</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;T&nbsp;value)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.value&nbsp;=&nbsp;value;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;source.subscribe(new&nbsp;MapObserver&lt;T,&nbsp;U&gt;(t,&nbsp;function));&nbsp;又对&nbsp;observer&nbsp;包裹了一层</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">subscribeActual</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T&gt;&nbsp;observer)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScalarDisposable&lt;T&gt;&nbsp;sd&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ScalarDisposable&lt;&gt;(observer,&nbsp;value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.onSubscribe(sd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sd.run();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;T&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">get</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;value;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer</code> 是我们从 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">source.subscribe</code> 里 传进来的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">MapObserver</code>，而此段代码又对 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer</code> 包裹了一层。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer.onSubscribe(sd)</code> 就会执行我们自己 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">new</code> 出来的目标观察者的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onSubscribe</code> 里的逻辑。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">sd.run()</code> 进去看看源码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ScalarDisposable</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AtomicInteger</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">QueueDisposable</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt;,&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Runnable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(get()&nbsp;==&nbsp;START&nbsp;&amp;&amp;&nbsp;compareAndSet(START,&nbsp;ON_NEXT))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;observer&nbsp;就是我们传进来的&nbsp;MapObserver</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.onNext(value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(get()&nbsp;==&nbsp;ON_NEXT)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lazySet(ON_COMPLETE);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.onComplete();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer.onNext(value)</code> 的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">observer</code> 就是我们传进来的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">MapObserver</code>，也就是执行 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">MapObserver.onNext()</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MapObserver</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">U</span>&gt;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">BasicFuseableObserver</span>&lt;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">U</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T,&nbsp;?&nbsp;extends&nbsp;U&gt;&nbsp;mapper;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MapObserver(Observer&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;U&gt;&nbsp;actual,&nbsp;Function&lt;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>&nbsp;T,&nbsp;?&nbsp;extends&nbsp;U&gt;&nbsp;mapper)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>(actual);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.mapper&nbsp;=&nbsp;mapper;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onNext</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(T&nbsp;t)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(done)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(sourceMode&nbsp;!=&nbsp;NONE)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;downstream.onNext(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U&nbsp;v;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v&nbsp;=&nbsp;Objects.requireNonNull(mapper.apply(t),&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"The&nbsp;mapper&nbsp;function&nbsp;returned&nbsp;a&nbsp;null&nbsp;value.\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(Throwable&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail(ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;downstream.onNext(v);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">onNext()</code> 通过 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">mapper.apply(t)</code> 对我们的数据进行转换，如下</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; border-radius: 6px; background: white;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Function</span>&lt;@<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">NonNull</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>,&nbsp;@<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">NonNull</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">R</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Apply&nbsp;some&nbsp;calculation&nbsp;to&nbsp;the&nbsp;input&nbsp;value&nbsp;and&nbsp;return&nbsp;some&nbsp;other&nbsp;value.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #a626a4; line-height: 26px;\">@param</span>&nbsp;t&nbsp;the&nbsp;input&nbsp;value<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #a626a4; line-height: 26px;\">@return</span>&nbsp;the&nbsp;output&nbsp;value<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #a626a4; line-height: 26px;\">@throws</span>&nbsp;Throwable&nbsp;if&nbsp;the&nbsp;implementation&nbsp;wishes&nbsp;to&nbsp;throw&nbsp;any&nbsp;type&nbsp;of&nbsp;exception<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">R&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">apply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(T&nbsp;t)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;Throwable</span>;<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\">传入 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">T</code> 返回 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">R</code>，而这个 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">apply</code> 会执行我们实现的重写 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">apply</code> 方法的里面逻辑。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 的 <code style=\"font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #0bb712; background: rgba(127, 226, 159, 0.48); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px; box-shadow: none;\">map</code> 操作符使用了装饰器模式，在不影响主数据流的情况下，对需要加工的数据进行包装，在自己的包装类里完成数据的加工。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;\"><strong style=\"color: #399003; font-weight: bold;\"><span>「</span>RxJava<span>」</span></strong> 里的操作符非常多，只要你理解其中的几个的原理，其它的操作符原理都差不多，下面列出了基本所有的操作符，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: block; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://cdn.lishaoy.net/rxjava/rxjava.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div></section>\n","tags":["RxJava"],"categories":["Java"]},{"title":"解读Android中的序列化与Json解析","url":"%2Fserializable.html","content":"\n{% li https://cdn.lishaoy.net/serializable/serializable.png, Serializable,Serializable %}\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.75; color: #595959; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们在日常工作中，网络数据传输最主流的的格式就是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">json</code>，我们常使用 <strong style=\"color: #595959; font-weight: bold;\"><span>「</span>Gson<span>」</span></strong> 开源框架来处理它，那么它们是如何工作的呢？本篇文章将解读 <strong style=\"color: #595959; font-weight: bold;\"><span>「</span>Android<span>」</span></strong> 中的序列化与 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">json</code> 解析，如：Java 语言提供的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code>、Android 提供的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parceable</code>。</p>\n<hr data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; height: 1px; padding: 0; border: none; border-top: 2px solid #d9b8fa;background: none;\"></section>\n\n<!-- more -->\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.75; color: #595959; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">本篇文章的示例代码放在 <a href=\"https://github.com/persilee/android_practice\" style=\"text-decoration: none; word-wrap: break-word; color: #664D9D; font-weight: normal; border-bottom: 1px solid #664D9D;\">Github</a> 上，所有知识点，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/serializable/serializable.xmind1.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; text-align: left; margin: 20px 10px 0px 0px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; font-weight: bold; display: inline-block; padding-left: 10px; border-left: 5px solid #DEC6FB; color: #595959;\">序列化的定义及相关概念</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">在系统的底层，数据传输形式是字节序列形式传输，系统并不认识对象，只认识字节序列，那么我们如何进行进程间的通讯，我们需要先将数据序列化，就是将对象传化为字节序列；反序列化，当底层的字节序列传输到相应的进程时，就需要反序列化，就是字节序列转化为对象。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">在进程间通讯、本地数据存储、网络数据传输都离不开序列化，对于不同的场景选择合适的序列化方案对应用的性能有着极大的影响。</p>\n<h3 id=\"序列化\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">序列化</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">数据结构或对象转换成二进制的过程，就是将数据结构或对象转换成可以存储或者传输的数据格式的过程。</p>\n<h3 id=\"反序列化\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">反序列化</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">二进制串转换成数据结构或对象的过程，就是序列化生成的二进制串数据被还原成数据结构或对象的过程。</p>\n<h3 id=\"序列化和反序列化的目的\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">序列化和反序列化的目的</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;\">序列化：主要用于网络传输，数据持久化，一般序列化也称为编码(Encode)</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;\">反序列化：主要用于从网络，磁盘上读取字节数组还原成原始对象，一般反序列化也称为解码 (Decode)</section></li></ul>\n<h2 id=\"Serializable接口\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; text-align: left; margin: 20px 10px 0px 0px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; font-weight: bold; display: inline-block; padding-left: 10px; border-left: 5px solid #DEC6FB; color: #595959;\">Serializable接口</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 是 Java 提供的序列化接口，它非常简单，如下</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 只是一个标记，用来被 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">ObjectOutputStream</code> 序列化，被 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">ObjectInputStream</code> 反序列化。</p>\n<h3 id=\"Serializable的使用\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Serializable的使用</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们先来新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Student</code> 类，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Student</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">7911650650846382143L</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;Integer&nbsp;age;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;List&lt;Course&gt;&nbsp;courses;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;获取课程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;List&lt;Course&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getCourses</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;courses;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;新增课程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">addCourse</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Course&nbsp;course)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.courses.add(course);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;用&nbsp;transient&nbsp;关键字标记的成员变量不参与序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">transient</span>&nbsp;Date&nbsp;createTime;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;静态成员变量属于类而不属于对象，也不参与序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;SimpleDateFormat&nbsp;dateFormat&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;SimpleDateFormat();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Student</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name,&nbsp;Integer&nbsp;age)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;courses&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ArrayList&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createTime&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Integer&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getAge</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;age;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setAge</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Integer&nbsp;age)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Student{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;age=\"</span>&nbsp;+&nbsp;age&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;courses=\"</span>&nbsp;+&nbsp;courses&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;createTime=\"</span>&nbsp;+&nbsp;createTime&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Student</code> 类依赖于 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Course</code> 类，所以，我们再新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Course</code> 类，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Course</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">7980496416494451794L</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Course</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getScore</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setScore</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;score=\"</span>&nbsp;+&nbsp;score&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们再新建一个序列化的工具类，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">SerializableUtil</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;String&nbsp;path&nbsp;=&nbsp;System.getProperty(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"user.dir\"</span>)&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"/serializable/src/main/java/net/lishaoy/serializable/serializable/out/student.out\"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">synchronized</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">serializable</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;o)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(o&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;outputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectOutputStream(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;FileOutputStream(path));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.writeObject(o);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"序列化成功！\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(SecurityException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(outputStream&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">synchronized</span>&nbsp;&lt;T&gt;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\">T&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">reverseSerializable</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;inputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;FileInputStream(path));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;object&nbsp;=&nbsp;inputStream.readObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"反序列化成功！\\n\"</span>&nbsp;&nbsp;+&nbsp;object);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;(T)&nbsp;object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(inputStream&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputStream.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">SerializableUtil</code> 工具类，来序列化和反序列化我们的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Student</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">UseSerializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;student&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Student(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>,&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.addCourse(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"英语\"</span>,<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SerializableUtil.serializable(student);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SerializableUtil.reverseSerializable();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">序列化成功！<br>反序列化成功！<br>Student{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'lsy'</span>,&nbsp;age=66,&nbsp;courses=[Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'英语'</span>,&nbsp;score=66.0}],&nbsp;createTime=null}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">在使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 时，可以发现以下几个特点：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;\">需要现象 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 的类，才可以序列化和反序列化</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;\">用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">transient</code> 关键字标记的成员变量不参与序列化</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;\">静态成员变量不参与序列化</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;\">一个实现序列化的类，它的子类也是可序列化的</section></li></ul>\n<h3 id=\"serialVersionUID与兼容性\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">serialVersionUID与兼容性</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><strong style=\"color: #595959; font-weight: bold;\"><span>「</span>serialVersionUID的作用：<span>」</span></strong> 用来表明类的不同版本间的兼容性。Java 序列化机制会通过判断类的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">serialVersionUID</code> 来验证版本一致性；在反序列化时，JVM 会把传来的字节流中的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">serialVersionUID</code> 与本地相应实体类的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">serialVersionUID</code> 进行比较。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><strong style=\"color: #595959; font-weight: bold;\"><span>「</span>兼容性问题：<span>」</span></strong> 为了在反序列化时，确保类版本的兼容性，最好在每个要序列化的类中加入 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">private static final long serialVersionUID = XXX</code> 属性。如果不显式定义该属性，这个属 性值将由JVM根据类的相关信息计算，而修改后的类的计算 结果与修改前的类的计算结果往往不 同，从而造成对象的反序列化因为类版本不兼容而失败。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">serialVersionUID</code> 可以用 Android Studio 自动生成，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/serializable/UID1.png\" alt=\"no-shadow\" title=\"UID\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">使用时按 <kbd>option</kbd> + <kbd>enter</kbd>，如图：</p>\n<div style=\"width: 66%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/serializable/UID.png\" alt=\"no-shadow\" title=\"UID\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<h3 id=\"Externalizable接口\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Externalizable接口</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">JDK 提供了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 接口外还提供了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Externalizable</code> 接口，它继承了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code>，优先级高于 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code>，源码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Externalizable</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">writeExternal</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObjectOutput&nbsp;var1)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">readExternal</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObjectInput&nbsp;var1)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;ClassNotFoundException</span>;<br>}<br></code></pre>\n<h3 id=\"Externalizable接口的使用\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Externalizable接口的使用</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们来看下简单的使用，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Course</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Externalizable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;-<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">342346458732794596L</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Course</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Course</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course:&nbsp;\"</span>&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name&nbsp;\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"&nbsp;score&nbsp;\"</span>&nbsp;+&nbsp;score);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getScore</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setScore</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">writeExternal</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObjectOutput&nbsp;objectOutput)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"writeExternal&nbsp;...\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectOutput.writeObject(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">readExternal</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObjectInput&nbsp;objectInput)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;ClassNotFoundException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"readExternal&nbsp;...\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;(String)&nbsp;objectInput.readObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;score=\"</span>&nbsp;+&nbsp;score&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;ClassNotFoundException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Course&nbsp;course&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>,<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByteArrayOutputStream&nbsp;byteArrayOutputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ByteArrayOutputStream();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;outputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectOutputStream(byteArrayOutputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.writeObject(course);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">byte</span>[]&nbsp;bytes&nbsp;=&nbsp;byteArrayOutputStream.toByteArray();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.close();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;inputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ByteArrayInputStream(bytes));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println((Course)inputStream.readObject());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">Course:&nbsp;name&nbsp;数学&nbsp;score&nbsp;66.0<br>writeExternal&nbsp;...<br>readExternal&nbsp;...<br>Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'数学'</span>,&nbsp;score=0.0}<br><br>BUILD&nbsp;SUCCESSFUL&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span>&nbsp;576ms<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">可以看到，在序列化时会调用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">writeExternal</code> 方法，反序列化时会调用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readExternal</code> 方法，也就是说我们可以灵活的控制想序列化的字段。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Externalizable</code> 接口，在反序列化时，需要写默认的空构造函数，否则报错：<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">InvalidClassException</code>。</p>\n<h3 id=\"使用Serializable的注意点\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">使用Serializable的注意点</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<h4 id=\"readObject和writeObject\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">readObject和writeObject</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readObject</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">writeObject</code> 并没有在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 接口里定义，但是通过查看源码，可知，如：<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">ObjectOutputStream</code> 点击进入源码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><br>...<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">writeSerialData</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;var1,&nbsp;ObjectStreamClass&nbsp;var2)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassDataSlot[]&nbsp;var3&nbsp;=&nbsp;var2.getClassDataLayout();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span>(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;var4&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>;&nbsp;var4&nbsp;&lt;&nbsp;var3.length;&nbsp;++var4)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectStreamClass&nbsp;var5&nbsp;=&nbsp;var3[var4].desc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;hasWriteObjectMethod&nbsp;会判断我们是否重写了&nbsp;writeObject()&nbsp;方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(var5.hasWriteObjectMethod())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream.PutFieldImpl&nbsp;var6&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curPut;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curPut&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SerialCallbackContext&nbsp;var7&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curContext;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(extendedDebugInfo)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.debugInfoStack.push(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"custom&nbsp;writeObject&nbsp;data&nbsp;(class&nbsp;\\\"\"</span>&nbsp;+&nbsp;var5.getName()&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"\\\")\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curContext&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;SerialCallbackContext(var1,&nbsp;var5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.bout.setBlockDataMode(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;通过反射执行&nbsp;writeObject()&nbsp;方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var5.invokeWriteObject(var1,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.bout.setBlockDataMode(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.bout.writeByte(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">120</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curContext.setUsed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curContext&nbsp;=&nbsp;var7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(extendedDebugInfo)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.debugInfoStack.pop();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.curPut&nbsp;=&nbsp;var6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.defaultWriteFields(var1,&nbsp;var5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>...<br><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">所以，我们也可以像 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Externalizable</code> 接口提供的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">writeExternal</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readExternal</code> 方法一样使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readObject</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">writeObject</code> 来灵活的序列化和反序列化。例如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ReadWriteObjectCourse</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;-<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">6828110073372979297L</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">ReadWriteObjectCourse</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">ReadWriteObjectCourse</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course:&nbsp;\"</span>&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name&nbsp;\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"&nbsp;score&nbsp;\"</span>&nbsp;+&nbsp;score);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getScore</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setScore</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;重写&nbsp;writeObject()&nbsp;方法，只序列化&nbsp;name&nbsp;字段</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">writeObject</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObjectOutputStream&nbsp;outputStream)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"writeObject&nbsp;...\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.writeObject(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;重写&nbsp;readObject()&nbsp;方法，只反序列化&nbsp;name&nbsp;字段</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">readObject</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ObjectInputStream&nbsp;inputStream)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;ClassNotFoundException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"readObject&nbsp;...\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;(String)&nbsp;inputStream.readObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;score=\"</span>&nbsp;+&nbsp;score&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;ClassNotFoundException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadWriteObjectCourse&nbsp;course&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ReadWriteObjectCourse(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>,<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByteArrayOutputStream&nbsp;byteArrayOutputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ByteArrayOutputStream();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;outputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectOutputStream(byteArrayOutputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.writeObject(course);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">byte</span>[]&nbsp;bytes&nbsp;=&nbsp;byteArrayOutputStream.toByteArray();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.close();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;inputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ByteArrayInputStream(bytes));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadWriteObjectCourse&nbsp;course1&nbsp;=&nbsp;(ReadWriteObjectCourse)&nbsp;inputStream.readObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(course1);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">Course:&nbsp;name&nbsp;数学&nbsp;score&nbsp;66.0<br>writeObject&nbsp;...<br>readObject&nbsp;...<br>Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'数学'</span>,&nbsp;score=0.0}<br><br>BUILD&nbsp;SUCCESSFUL&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span>&nbsp;722ms<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readObject</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">writeObject</code> 方法都被执行，自定义序列化 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">name</code> 字段。<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 接口除了这2个方法可以重写外，还有2个方法，分别是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readResolve</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">writeReplace</code>。</p>\n<h4 id=\"多引用写入\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">多引用写入</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><strong style=\"color: #595959; font-weight: bold;\"><span>「</span>多引用写入<span>」</span></strong> 问题，我们来看如下代码：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;ClassNotFoundException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Course&nbsp;course&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>,<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;ByteArrayOutputStream&nbsp;byteArrayOutputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ByteArrayOutputStream();<br>&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;outputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectOutputStream(byteArrayOutputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;outputStream.writeObject(course);<br>&nbsp;&nbsp;&nbsp;&nbsp;course.setName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"英语\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;outputStream.writeObject(course);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">byte</span>[]&nbsp;bytes&nbsp;=&nbsp;byteArrayOutputStream.toByteArray();<br>&nbsp;&nbsp;&nbsp;&nbsp;outputStream.close();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;inputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ByteArrayInputStream(bytes));<br>&nbsp;&nbsp;&nbsp;&nbsp;Course&nbsp;course1&nbsp;=&nbsp;(Course)&nbsp;inputStream.readObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;Course&nbsp;course2&nbsp;=&nbsp;(Course)&nbsp;inputStream.readObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(course1);<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(course2);<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">Course:&nbsp;name&nbsp;数学&nbsp;score&nbsp;66.0<br>writeExternal&nbsp;...<br>readExternal&nbsp;...<br>Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'数学'</span>,&nbsp;score=0.0}<br>Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'数学'</span>,&nbsp;score=0.0}<br><br>BUILD&nbsp;SUCCESSFUL&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span>&nbsp;557ms<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">course.setName(\"英语\");</code> 把 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">name</code> 修改后，重新 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">outputStream.writeObject(course);</code> 但是结果并没有改变。这个就是多引用问题：对于一个实例的多个引用，为了节省空间，只会写入一次。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">我们可以使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">outputStream.reset();</code> 来解决问题。</p>\n<h4 id=\"子类实现 Serializable，而父类没有实现 Serializable\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">子类实现 Serializable，而父类没有实现 Serializable</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><strong style=\"color: #595959; font-weight: bold;\"><span>「</span>子类实现 Serializable，而父类没有实现 Serializable<span>」</span></strong> 问题，我们新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Person</code> 类，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Person</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Person</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Person{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">让 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Student</code> 类继承它，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Student</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Person</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Student</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name,&nbsp;Integer&nbsp;age)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;courses&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;ArrayList&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createTime&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Student:&nbsp;name:\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"&nbsp;age:\"</span>&nbsp;+&nbsp;age&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"&nbsp;createTime:\"</span>&nbsp;+&nbsp;createTime);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;...<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">java.io.InvalidClassException:&nbsp;net.lishaoy.serializable.serializable.Student;&nbsp;no&nbsp;valid&nbsp;constructor<br>...<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">提示我们没有构造函数，我们需要在父类 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Person</code> 加入无参的构造函数，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Person</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;加入无参构造函数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Person</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Person</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Person{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"单例模式的序列化\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">单例模式的序列化</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">序列化会导致单例失效，就是序列化前后会产生多个对象，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Single</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">SingleClass</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">9153534024695280942L</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">boolean</span>&nbsp;flag&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">false</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;SingleClass&nbsp;singleClass;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;SingleClass&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getInstance</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>(singleClass&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">synchronized</span>&nbsp;(SingleClass.class)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(singleClass&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleClass&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;SingleClass();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;singleClass;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">SingleClass</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>&nbsp;(!flag)&nbsp;flag&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">true</span>;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;RuntimeException(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"单例模式被侵犯！\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SingleClass&nbsp;singleClass&nbsp;=&nbsp;SingleClass.getInstance();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SerializableUtil.serializable(singleClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SingleClass&nbsp;singleClass1&nbsp;=&nbsp;SerializableUtil.reverseSerializable();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"序列化之前：\"</span>&nbsp;+&nbsp;singleClass.hashCode());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"序列化之后：\"</span>+&nbsp;singleClass1.hashCode());<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">序列化成功！<br>反序列化成功！<br>net.lishaoy.serializable.serializable.Single<span class=\"hljs-variable\" style=\"color: #986801; line-height: 26px;\">$SingleClass</span>@41629346<br>序列化之前：1442407170<br>序列化之后：1096979270<br><br>BUILD&nbsp;SUCCESSFUL&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span>&nbsp;621ms<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">单例模式序列化前后会产生多个对象的问题，可以重写 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">readResolve()</code> 方法解决。</p>\n<h2 id=\"Parcelable接口\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; text-align: left; margin: 20px 10px 0px 0px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; font-weight: bold; display: inline-block; padding-left: 10px; border-left: 5px solid #DEC6FB; color: #595959;\">Parcelable接口</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code> 是 Android SDK 为我们提供的序列化接口，它是基于内存的，由于内存读写速度高于硬盘，因此 Android 中的跨进程对象的传输一般使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code>；<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code> 相对于 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 的使用复杂一些，但是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code> 的效率比 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 也高很多</p>\n<h3 id=\"Parcelable的使用\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Parcelable的使用</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">由于 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code> 是 Android SDK 提供的，所以，需要在 Android 工程下使用，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Course</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Parcelable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"Course{\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name='\"</span>&nbsp;+&nbsp;name&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'\\''</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\",&nbsp;score=\"</span>&nbsp;+&nbsp;score&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'}'</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Course</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Parcel&nbsp;in)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;in.readString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;in.readFloat();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化，将&nbsp;Parcel&nbsp;对象转换为&nbsp;Parcelable</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;Creator&lt;Course&gt;&nbsp;CREATOR&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Creator&lt;Course&gt;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//反序列化的方法，将Parcel还原成Java对象</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Course&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">createFromParcel</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Parcel&nbsp;in)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course(in);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//提供给外部类反序列化这个数组使用。</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;Course[]&nbsp;newArray(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;size)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course[size];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Course</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>&nbsp;score)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score&nbsp;=&nbsp;score;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">describeContents</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化，将对象转换成一个&nbsp;Parcel&nbsp;对象</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">writeToParcel</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Parcel&nbsp;dest,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;flags)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest.writeString(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest.writeFloat(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.score);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">MainActivity</code> 里通过 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Intent</code> 来传递数据，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MainActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Course.runParcel();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button&nbsp;button&nbsp;=&nbsp;findViewById(R.id.button);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.setOnClickListener(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;View.OnClickListener()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onClick</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(View&nbsp;v)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Intent&nbsp;intent&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Intent(MainActivity.<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>,&nbsp;ParcelActivity.class);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intent.putExtra(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"course\"</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>,&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66f</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startActivity(intent);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">ParcelActivity</code> 接受数据并打印，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ParcelActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"ParcelActivity\"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_parcel);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Intent&nbsp;intent&nbsp;=&nbsp;getIntent();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parcelable&nbsp;course&nbsp;=&nbsp;intent.getParcelableExtra(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"course\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"onCreate:&nbsp;\"</span>&nbsp;+&nbsp;course.toString());<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">I/ParcelActivity:&nbsp;onCreate:&nbsp;Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'数学'</span>,&nbsp;score=66.0}<br></code></pre>\n<h2 id=\"Parcelable与Serializable的性能比较\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; text-align: left; margin: 20px 10px 0px 0px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; font-weight: bold; display: inline-block; padding-left: 10px; border-left: 5px solid #DEC6FB; color: #595959;\">Parcelable与Serializable的性能比较</span><span class=\"suffix\"></span></h2>\n<h3 id=\"Serializable性能分析\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Serializable性能分析</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code> 是 Java 中的序列化接口，其使用起来简单但开销较大(因为 Serializable 在序列化过程中使用了反射机制，故而会产生大量的临时变量，从而导致频繁的GC)，并且在读写数据过程中，它是通 过IO流的形式将数据写入到硬盘或者传输到网络上。</p>\n<h3 id=\"Parcelable性能分析\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Parcelable性能分析</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code> 则是以 IBinder 作为信息载体，在内存上开销比较小，因此在内存之间进行数据传递时，推荐使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code>，而 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Parcelable</code> 对数据进行持久化或者网络传输时操作复杂，一般这个时候推荐使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Serializable</code>。</p>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; text-align: left; margin: 20px 10px 0px 0px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; font-weight: bold; display: inline-block; padding-left: 10px; border-left: 5px solid #DEC6FB; color: #595959;\">JSON解析方式</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，通常用于：数据标记，存储，传输。</p>\n<h3 id=\"Android Studio自带org.json解析\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Android Studio自带org.json解析</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">org.json 解析是基于文档驱动，需要把全部文件读入到内存中，然后遍历所有数据，根据需要检索想要 的数据，具体使用，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">OrgJsonActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"OrgJsonActivity\"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_org_json);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createJson();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseJson();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(JSONException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">createJson</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;JSONException,&nbsp;IOException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;File(getFilesDir(),&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"orgJson.json\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONObject&nbsp;student&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;JSONObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.put(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.put(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"age\"</span>,&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONObject&nbsp;course&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;JSONObject();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;course.put(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;course.put(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"score\"</span>,<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.put(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"course\"</span>,&nbsp;course);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONArray&nbsp;courses&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;JSONArray();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;courses.put(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>,&nbsp;course);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.put(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"courses\"</span>,courses);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream&nbsp;outputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;FileOutputStream(file);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.write(student.toString().getBytes());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputStream.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"createJson:&nbsp;\"</span>&nbsp;+&nbsp;student.toString());<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">parseJson</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>&nbsp;IOException,&nbsp;JSONException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;File(getFilesDir(),&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"orgJson.json\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream&nbsp;inputStream&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;FileInputStream(file);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStreamReader&nbsp;streamReader&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;InputStreamReader(inputStream);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BufferedReader&nbsp;reader&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;BufferedReader(streamReader);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;line;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer&nbsp;stringBuffer&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;StringBuffer();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">while</span>&nbsp;((line&nbsp;=&nbsp;reader.readLine())&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringBuffer.append(line);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputStream.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;streamReader.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reader.close();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;student&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Student();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONObject&nbsp;jsonObject&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;JSONObject(stringBuffer.toString());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;jsonObject.optString(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;age&nbsp;=&nbsp;jsonObject.optInt(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"age\"</span>,&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.setName(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.setAge(age);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONArray&nbsp;courses&nbsp;=&nbsp;jsonObject.optJSONArray(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"courses\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>;&nbsp;i&nbsp;&lt;&nbsp;courses.length();&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSONObject&nbsp;course&nbsp;=&nbsp;courses.getJSONObject(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Course&nbsp;course1&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;course1.setName(course.optString(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"\"</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;course1.setScore((<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">float</span>)&nbsp;course.optDouble(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"score\"</span>,&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.addCourse(course1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"parseJson:&nbsp;\"</span>&nbsp;+&nbsp;student);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">I/OrgJsonActivity:&nbsp;createJson:&nbsp;{<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>:<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"age\"</span>:<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"course\"</span>:{<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>:<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"score\"</span>:<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>},<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"courses\"</span>:[{<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>:<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"数学\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"score\"</span>:<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>}]}<br>I/OrgJsonActivity:&nbsp;parseJson:&nbsp;Student{id=<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>,&nbsp;name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'lsy'</span>,&nbsp;age=<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>,&nbsp;courses=[Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'数学'</span>,&nbsp;score=<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66.0</span>}]}<br></code></pre>\n<h3 id=\"Gson解析\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Gson解析</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">Gson 解析也是基于事件驱动，它根据所需取的数据 建立1个对应于JSON数据的JavaBean类，即可通过简单操作解析出 所需数据，具体使用如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">GsonActivity</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span>&nbsp;String&nbsp;TAG&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"GsonActivity\"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle&nbsp;savedInstanceState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_gson);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createGson();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">createGson</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;student&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Student(<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">1</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>,&nbsp;<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student.addCourse(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Course(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"英语\"</span>,<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gson&nbsp;gson&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span>&nbsp;Gson();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;json&nbsp;=&nbsp;gson.toJson(student);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"createGson:&nbsp;json&nbsp;\"</span>&nbsp;+&nbsp;json);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//&nbsp;反序列化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"createGson:&nbsp;json1\"</span>&nbsp;+&nbsp;gson.fromJson(json,&nbsp;Student.class));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; background: #fafafa;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch; box-shadow: none;\">I/GsonActivity:&nbsp;createGson:&nbsp;json&nbsp;{<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"age\"</span>:66,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"courses\"</span>:[{<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>:<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"英语\"</span>,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"score\"</span>:66.0}],<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"id\"</span>:1,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>:<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>}<br>I/GsonActivity:&nbsp;createGson:&nbsp;json1Student{id=1,&nbsp;name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'lsy'</span>,&nbsp;age=66,&nbsp;courses=[Course{name=<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">'英语'</span>,&nbsp;score=66.0}]}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">Json 解析方式还有 Jackson 解析、Fastjson解析等，在此就不具体介绍。</p>\n<h2 id=\"Gson原理解析\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; text-align: left; margin: 20px 10px 0px 0px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; font-weight: bold; display: inline-block; padding-left: 10px; border-left: 5px solid #DEC6FB; color: #595959;\">Gson原理解析</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">在序列化和反序列化的过程中，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">Gson</code> 充当了一个解析器的角色，如图</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/serializable/gson.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<h3 id=\"JsonElement\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">JsonElement</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">该类是一个抽象类，代表着 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #595959; box-shadow: none;\">json</code> 串的某一个元素。这个元素可以是一个 Json(JsonObject)、可以是一个数组(JsonArray)、可以是一个Java的基本类型( JsonPrimitive)、当然也可以为\nnull( JsonNull)；JsonObject、JsonArray、JsonPrimitive、JsonNull 都是 JsonElement 这个抽象类的子类。JsonElement 提供了一系列的方法来判断当前的JsonElement。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">JsonObject 对象可以看成 name/values 的集合，而这写 values 就是一个个 JsonElement，他们的结构可以 用如下图表示:</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/serializable/json3.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div>\n<h3 id=\"Gson的工作流程\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; color: black; font-size: 16px; font-weight: bold; text-align: center;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"border-bottom: 2px solid #DEC6FB; color: #595959;\">Gson的工作流程</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #595959; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;\">Gson的工作流程，如图</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/serializable/gson2.png\" alt=\"no-shadow\" style=\"max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain;\"></figure>\n</div></section>\n","tags":["Serbalizable"],"categories":["Java"]},{"title":"Android并发编程你了解多少","url":"%2Fthread-concurrent.html","content":"\n{% li https://cdn.lishaoy.net/thread-concurrent/concurrent1.png, concurrent,concurrent %}\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">对于 <strong style=\"font-weight: bold; color: black;\">Android</strong> 开发人员来说，并发编程知识的使用并不是那么频繁(相对于 <strong style=\"font-weight: bold; color: black;\">Java</strong> 开发者而言)，但是，我们想写一些框架或者阅读开源框架源码都需要掌握并发编程的相关知识，而且，并发编程相关知识也是面试高频问题之一，所以，我们也要全面的掌握并发编程知识，本篇文章将从浅入深概述并发编程知识。</p>\n<hr data-tool=\"mdnice编辑器\" style=\"height: 1px; margin: 0; margin-top: 10px; margin-bottom: 10px; border: none; border-top: 1px solid black;background: white;\"></section>\n\n<!-- more -->\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">本篇文章的示例代码放在 <a href=\"https://github.com/persilee/android_practice\" style=\"text-decoration: none; word-wrap: break-word; font-weight: bold; color: rgb(239, 112, 96); border-bottom: 1px solid rgb(239, 112, 96);\">Github</a> 上，所有知识点，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/concurrent.xmind.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<h2 id=\"基础概念\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">基础概念</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在理解并发编程之前，我需要理解一些相关的基本概念，我们先从一些相关的基本概念开始。</p>\n<h3 id=\"CPU核心数和线程数的关系\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">CPU核心数和线程数的关系</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">多核心:</strong> 是物理上的，单核、双核、多核，指的就是物理核心的数目。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">多线程:</strong> 是逻辑上的，简单的说就是模拟出的 CPU 核心数；</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">核心数和线程数的关系:</strong> 目前主流 CUP 有双核、三核和四核，增加核心数目就是为了增加线程数,因为操作系统是通过线程来执行任务的，一般情况下它们是1:1对应关系，也就是说四核CPU一般拥有四个线程。但 Intel 引入超线程技术后,使核心数与线程数形成1:2的关系。</p>\n<h3 id=\"CPU时间片轮转机制\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">CPU时间片轮转机制</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们平时在开发的时候，感觉并没有受cpu核心数的限制，想启动线程就启动线程，哪怕是在单核CPU上，为什么？这是因为操作系统提供了一种CPU时间片轮转机制。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">时间片轮转调度是一种最古老、最简单、最公平且使用最广的算法,又称RR(Round-Robin，RR)调度。根据先进先出原则，排成队列(就绪队列)，调度时，将 CPU 分配给队首进程，让其执行一个时间段(称为：时间片)，时间片通常为 10-100ms 数量级，当执行的时间片用完时，会由计时器发出时钟中断请求，调度程序便据此来停止该进程的执行，并将它排到队列末尾，然后再把 CPU 重新分配给当前队列的队首进程，同理如此往复。</p>\n<h3 id=\"什么是进程和线程\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">什么是进程和线程</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">进程是程序运行资源分配的最小单位</strong>，其中资源包括：CPU、内存空间、磁盘等,同一进程中的多个线程共享该进程中的全部系统资源，而进程和进程之间是相互独立的。进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的、静态的，进程是活的、动态的。进程可以分为系统进程和用户进程，凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身，用户进程就是所有由你启动的进程。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">线程是 CPU 调度的最小单位,必须依赖于进程而存在</strong>，线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的、能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器，一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">并行和并发</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们举个例子，如果有条高速公路A上面并排有6条车道，公路中间有个收费站，那么，在某一时刻，同时通过此收费站的，就是并行；在单位时间内通过此收收费站的，就是并发。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">当谈论并发的时候一定要加个单位时间，也就是说单位时间内并发量是多少，离开了单位时间其实是没有意义的。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">并行:</strong> ：指在同一时刻，有多条指令在多个处理器上同时执行。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><strong style=\"font-weight: bold; color: black;\">并发:</strong> ：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p>\n<h2 id=\"线程(Thread)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">线程(Thread)</span><span class=\"suffix\"></span></h2>\n<h3 id=\"线程的启动\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">线程的启动</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">启动线程的方式有，如下：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">className extends Thread，重新 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">run()</code> 方法</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">className implements Runnable，然后，由 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Thread</code> 运行</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">className implements Callable，然后，由 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Thread</code> 运行</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">NewThread</span> </span>{\n  <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">\n    // 继承 Thread，重写 run() 方法\n  </span>\n   <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UseThread</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">super</span>.run();\n<span/>\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"extends Thread\"</span>);\n<span/>        }\n<span/>    }\n    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">\n     // 实现 Runnable 接口\n    </span>\n    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UseRunnable</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Runnable</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"implements Runnable\"</span>);\n<span/>        }\n<span/>    }\n   <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">\n     // 实现 Callable 接口\n     </span>\n  <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UseCallable</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Callable</span>&lt;<span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">String</span>&gt; </span>{\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> String <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">call</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> Exception </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"implements Callable\"</span>);\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">return</span> <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"return UseCallable\"</span>;\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> ExecutionException, InterruptedException </span>{\n<span/>        <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 使用 Thread 创建线程</span>\n<span/>        UseThread useThread = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UseThread();\n<span/>        useThread.start();\n<span/>        <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 使用 Runnable 创建线程</span>\n<span/>        UseRunnable useRunnable = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UseRunnable();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread(useRunnable).start();\n<span/>        <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 使用 Callable 创建线程</span>\n<span/>        UseCallable useCallable = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UseCallable();\n<span/>        FutureTask&lt;String&gt; task = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> FutureTask&lt;&gt;(useCallable);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread(task).start();\n<span/>        System.out.println(task.get()); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 通过 get 获取返回结果</span>\n<span/>\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">extends Thread\n<span/>implements Runnable\n<span/>implements Callable\n<span/><span class=\"hljs-built_in\" style=\"color: #a6e22e; line-height: 26px;\">return</span> UseCallable\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 753ms\n<span/></code></pre>\n<blockquote data-tool=\"mdnice编辑器\" style=\"display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); padding-top: 10px; padding-bottom: 10px; border-left-color: rgb(221, 221, 221); margin-top: 1.2em; margin-bottom: 1.2em; padding-right: 1em; padding-left: 1em; border-left-width: 4px; color: rgb(119, 119, 119); quotes: none; border-left-color: black; background: rgba(0, 0, 0, .16);\">\n<p style=\"padding-top: 8px; padding-bottom: 8px; box-sizing: border-box; margin-bottom: 16px; text-align: start; white-space: normal; text-size-adjust: auto; margin: 0px; font-size: 15px; font-family: -apple-system-font, BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei UI', 'Microsoft YaHei', Arial, sans-serif; color: rgb(119, 119, 119); line-height: 1.75em;\">继承 Thread 的方式和实现 Runnable 的方式，执行完成后无法返回结果，实现 Callable 的方式，执行完成后可以返回结果。 (md partial supported)</p>\n</blockquote>\n<h3 id=\"run()和start()的区别\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">run()和start()的区别</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们通过 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">new Thread()</code> 只是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">new</code> 出一个 Thread 的示例，并没有和操作系统中的真正的线程挂钩，只有执行 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">start()</code> 方法后，才真正的启动线程。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">进入 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">start()</code> 方法查看源码，可得知最终是调用了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">private native void start0()</code>，是一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">native</code> 方法，是由 C 或 C++ 来操作系统(分配CPU等操作)，之后才调用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">run()</code> 方法，且 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">start()</code> 方法不能重复调用。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">run()</code> 只是类的一个成员方法，和普通方法并无区别，可重复执行(如单独执行 run() 方法，并不会启动线程)。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">示例代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">StartRunMethod</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">StartAndRun</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"run: This is \"</span> + Thread.currentThread().getName()); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 获取当前线程名</span>\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">runMethod</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"runMethod: This is \"</span> + Thread.currentThread().getName()); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 获取当前线程名</span>\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>\n<span/>        StartAndRun startAndRun = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> StartAndRun();\n<span/>        startAndRun.setName(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"ThreadRun\"</span>); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 设置线程的名字</span>\n<span/>        startAndRun.start(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 真正启动名字为 ThreadRun 的线程</span>\n<span/>        startAndRun.run();  <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 只是一个普通方法，和 runMethod() 没有区别</span>\n<span/>        startAndRun.runMethod(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 输出结果和 startAndRun.run() 相同</span>\n<span/>\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">run: This is main\n<span/>runMethod: This is main\n<span/>run: This is ThreadRun\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 381ms\n<span/></code></pre>\n<h3 id=\"线程的中止\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">线程的中止</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">线程的终止，要么是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">run()</code> 执行完成，要么是抛出异常导致线程结束，我们也可以手动的中止线程，线程 Thread 的 API 给我们提供了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">stop()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">resume()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">suspend()</code> 方法，但是，他们都被标记为 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">@deprecated</code>，也就是过期的，不建议使用，因为这些方法，在调用后，线程不会释放已经占有的资源，所以，容易导致死锁问题。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">安全的中止线程，我们可以用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">interrupt()</code> 方法，此方法是一种协作的，也就是说它只是发送一个中断信号，不代表线程会立即停止，需要线程通过 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">isInterrupted()</code> 方法进行判断是否中止线程。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">示例代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">InterruptThread</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">MyThread</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            String threadName = Thread.currentThread().getName(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 获取当前线程名</span>\n<span/>           <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">while</span> (!isInterrupted()) { <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 判断是否需要中止</span>\n<span/>               System.out.println(threadName + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\" running ...\"</span>);\n<span/>           }\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>\n<span/>        MyThread myThread = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> MyThread();\n<span/>        myThread.start();\n<span/>        Thread.sleep(<span class=\"hljs-number\" style=\"line-height: 26px;\">6</span>);\n<span/>        myThread.interrupt(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 发出中断信号</span>\n<span/>\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h3 id=\"按顺序执行线程\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">按顺序执行线程</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们来新建一个类，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">JoinThread</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">JoinMethod</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> Thread thread;\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">JoinMethod</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Thread thread)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.thread = thread;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; <span class=\"hljs-number\" style=\"line-height: 26px;\">6</span>; i++) {\n<span/>                System.out.println(thread.getName() + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\" running ... \"</span>);\n<span/>            }\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>\n<span/>        JoinMethod joinMethod = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> JoinMethod(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread());\n<span/>        JoinMethod joinMethod1 = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> JoinMethod(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread());\n<span/>        joinMethod.start();\n<span/>        joinMethod1.start();\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 213ms\n<span/>2 actionable tasks: 1 executed, 1 up-to-date\n<span/>11:31:47 PM: Task execution finished <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">'JoinThread.main()'</span>.\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">发现，joinMethod 线程和 joinMethod1 线程是随机交替执行的，那么如何让它们按顺序执行呢，我们可以使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">join()</code> 方法，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>\n<span/>    JoinMethod joinMethod = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> JoinMethod(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread());\n<span/>    JoinMethod joinMethod1 = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> JoinMethod(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread());\n<span/>    joinMethod.start();\n<span/>    joinMethod.join(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 使用 join() 方法，由 joinMethod 执行完成之后才让出执行权</span>\n<span/>    joinMethod1.start();\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">输出结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-0 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>Thread-2 running ... \n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 482ms\n<span/>2 actionable tasks: 2 executed\n<span/>11:36:17 PM: Task execution finished <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">'JoinThread.main()'</span>.\n<span/></code></pre>\n<h3 =\"线程的状态\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">线程的状态</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在 Java 中线程的状态分为 6 中：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">初始(NEW)：新创建了一个线程对象，但还没有调用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">start()</code> 方法。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">运行(RUNNABLE)：Java 线程中将就绪(ready)和运行中(running)两种状态笼统的称为“运行”。线程对象创建后，其他线程(比如main线程)调用了该对象的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">start()</code> 方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取 CPU 的使用权，此时处于就绪状态(ready)。就绪状态的线程在获得 CPU 时间片后变为运行中状态(running)。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">阻塞(BLOCKED)：表示线程阻塞于锁。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。1</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">终止(TERMINATED)：表示该线程已经执行完毕。</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">状态之间的变迁，如图：</p>\n<div style=\"width: 86%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/thread.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<h2 id=\"线程间的共享和协作\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">线程间的共享和协作</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">Java 支持多个线程同时访问一个对象或者访问一个对象里的成员变量，这个就是线程间的共享，共享的资源有，如：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">堆：由于堆是在进程空间中开辟出来的，所以它是理所当然地被共享的，因此new出来的都是共享的</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">全局变量：它是与具体某一方法无关的，所以也与特定线程无关；因此也是共享的</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">静态变量：是共享的</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">文件等公用资源：是共享的</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">独享的资源有：栈和寄存器</p>\n<h3 id=\"线程的同步(Synchronization)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">线程的同步(Synchronization)</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">但是，线程间的共享存在一些问题，例如(让两个线程操作一个 count 变量进行累加)：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">SharedThread</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> count = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>;\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">getCount</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">return</span> count;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">setCount</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> count)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.count = count;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">addCount</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{\n<span/>        count++;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">CountThread</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> SharedThread sharedThread;\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">CountThread</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(SharedThread sharedThread)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.sharedThread = sharedThread;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; <span class=\"hljs-number\" style=\"line-height: 26px;\">6666</span>; i++) {\n<span/>                sharedThread.addCount();\n<span/>            }\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>        SharedThread sharedThread = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> SharedThread();\n<span/>        CountThread countThread = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> CountThread(sharedThread);\n<span/>        CountThread countThread1 = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> CountThread(sharedThread);\n<span/>        countThread.start();\n<span/>        countThread1.start();\n<span/>        Thread.sleep(<span class=\"hljs-number\" style=\"line-height: 26px;\">66</span>);\n<span/>        System.out.println(sharedThread.getCount());\n<span/>        System.out.println(<span class=\"hljs-number\" style=\"line-height: 26px;\">6666</span> * <span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-number\" style=\"line-height: 26px;\">7045</span>\n<span/><span class=\"hljs-number\" style=\"line-height: 26px;\">13332</span>\n<span/>\n<span/>BUILD SUCCESSFUL in <span class=\"hljs-number\" style=\"line-height: 26px;\">247</span>ms\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行了几次，都是小于 13332(6666 * 2)，这就是线程间共享的同步问题，解决此问题我们需要使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code>。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">所以，我们把以上代码稍作修改，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">SharedThread</span> </span>{\n<span/>\n<span/>    ...\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">addCount</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{\n<span/>        count++;\n<span/>    }\n<span/>\n<span/>    ...\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">13332\n<span/>13332\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 324ms\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们也可以使用，这种方式，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">SharedThread</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> count = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> Object object = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Object(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 使用 Object 作为锁</span>\n<span/>\n<span/>    ...\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">addCount</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> (object) {\n<span/>            count++;\n<span/>        }\n<span/>    }\n<span/>\n<span/>    ...\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">这两种方式并没有任何的差别，都是对象锁。</p>\n<h3 id=\"类锁和对象锁\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">类锁和对象锁</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们来创建一个类 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ClassObjectLock</code> 来演示类锁和对象锁，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">ClassObjectLock</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">ClassLock</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Class Lock is running ...\"</span>);\n<span/>            lockClass();\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">ObjectLock</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> ClassObjectLock classObjectLock;\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">ObjectLock</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ClassObjectLock classObjectLock)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.classObjectLock = classObjectLock;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Object Lock is running ...\"</span>);\n<span/>            classObjectLock.lockObject();\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">ObjectLock1</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> ClassObjectLock classObjectLock;\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">ObjectLock1</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ClassObjectLock classObjectLock)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.classObjectLock = classObjectLock;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Object Lock1 is running ...\"</span>);\n<span/>            classObjectLock.lockObject1();\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 对象锁</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">lockObject</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        SleepTool.second(<span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Object Lock use\"</span>);\n<span/>        SleepTool.second(<span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Object Lock end\"</span>);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 对象锁</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">lockObject1</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        SleepTool.second(<span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Object Lock1 use\"</span>);\n<span/>        SleepTool.second(<span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Object Lock1 end\"</span>);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 类锁，实际是锁类的class对象</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">lockClass</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        SleepTool.second(<span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Class Lock use\"</span>);\n<span/>        SleepTool.second(<span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"Class Lock end\"</span>);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        ClassObjectLock classObjectLock = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ClassObjectLock();\n<span/>        ObjectLock objectLock = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ObjectLock(classObjectLock);\n<span/>\n<span/>        ClassObjectLock classObjectLock1 = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ClassObjectLock();\n<span/>        ObjectLock1 objectLock1 = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ObjectLock1(classObjectLock1);\n<span/>        objectLock.start();\n<span/>        objectLock1.start();\n<span/>\n<span/>        ClassLock classLock = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ClassLock();\n<span/>        classLock.start();\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Object Lock is running ...\n<span/>Object Lock1 is running ...\n<span/>Class Lock is running ...\n<span/>Object Lock use\n<span/>Object Lock1 use\n<span/>Class Lock use\n<span/>Class Lock end\n<span/>Object Lock end\n<span/>Object Lock1 end\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 4s\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">由运行结果可知，对象锁和对象锁之前是互不影响的，对象锁和类锁之前也是互不影响的。</p>\n<h3 id=\"等待和通知(wait、notify)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">等待和通知(wait、notify)</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">等待和通知就是属于线程间的协作，一般有等待方获取锁之后进行条件检查，条件满足，则执行逻辑代码，否则不执行；而通知方获取锁之后进行修改条件，之后通知等待方，实例代码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">WaitNotify</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">final</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> String CITY = <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"beijing\"</span>;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> km;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> String site;\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">WaitNotify</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> km, String site)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.km = km;\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.site = site;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 改变公里数，并通知</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">changeKm</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.km = <span class=\"hljs-number\" style=\"line-height: 26px;\">66</span>;\n<span/>        notifyAll();\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 改变公站点，并通知</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">changeSite</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.site = <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"guangzhou\"</span>;\n<span/>        notifyAll();\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 如果公里数小于 66，就等待</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">waitKm</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">while</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.km &lt; <span class=\"hljs-number\" style=\"line-height: 26px;\">66</span>) {\n<span/>            wait();\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"check km thread: \"</span> + Thread.currentThread().getName());\n<span/>        }\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"km is \"</span> + <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.km);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 如果站点是beijing，就等待</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">waitSite</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">while</span> (CITY.equals(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.site)) {\n<span/>            wait();\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"check site thread: \"</span> + Thread.currentThread().getName());\n<span/>        }\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"site is \"</span> + <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.site);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">再新建一个测试类，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Client</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> WaitNotify waitNotify = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> WaitNotify(<span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>, WaitNotify.CITY);\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">CheckKm</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">try</span> {\n<span/>                waitNotify.waitKm();\n<span/>            } <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">catch</span> (InterruptedException e) {\n<span/>                e.printStackTrace();\n<span/>            }\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">CheckSite</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Thread</span> </span>{\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">try</span> {\n<span/>                waitNotify.waitSite();\n<span/>            } <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">catch</span> (InterruptedException e) {\n<span/>                e.printStackTrace();\n<span/>            }\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">throws</span> InterruptedException </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; <span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>; i++) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> CheckKm().start();\n<span/>        }\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; <span class=\"hljs-number\" style=\"line-height: 26px;\">2</span>; i++) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> CheckSite().start();\n<span/>        }\n<span/>\n<span/>        Thread.sleep(<span class=\"hljs-number\" style=\"line-height: 26px;\">1000</span>);\n<span/>        waitNotify.changeKm();\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">check site thread: Thread-3\n<span/>check site thread: Thread-2\n<span/>check km thread: Thread-1\n<span/>km is 66\n<span/>check km thread: Thread-0\n<span/>km is 66\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">可知 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">notifyAll()</code> 方法会唤醒所有的线程，而 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">notify()</code> 只会唤醒一个线程，且这个线程不一定是我们想唤醒的线程，所有，我们在使用时最好使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">notifyAll()</code> 方法。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">如上代码 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">changeKm()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">waitKm()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">changeSite()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">waitSite()</code> 方法都是对象锁，且锁的是同一个对象，如果有多个线程执行方法，那么他们之间不是有冲突吗？他们之间不会有冲突，因为，调用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">wait()</code> 方法之后，会释放锁，其他方法就可以获取锁。</p>\n<h2 id=\"显示锁(Lock)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">显示锁(Lock)</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 也被称作内置锁，因为 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 的使用有些局限性，如：无法中断、无法实现尝试获取锁等，所以，Java 给我们提供了 <strong style=\"font-weight: bold; color: black;\">Lock</strong> 也称为显示锁。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Lock</code> 是一个接口，需要我们手动获取或释放锁，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Lock</code> 拥有 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 所没有的功能，可以被中断 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">lockInterruptibly()</code>，可以尝试获取锁 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">tryLock()</code>等。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Lock</code> 既然是一个接口，必然有实现，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Lock</code> 的使用有6个，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/lock.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">常用的有 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ReadLock</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">WriteLock</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ReentrantLock</code> 读写锁和可重入锁。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">一般我们会这样使用它，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">LockDemo</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> count = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> Lock lock = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ReentrantLock();\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">add</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        lock.lock();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">try</span> {\n<span/>            count ++;\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">finally</span> {\n<span/>            lock.unlock(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 在 finally 里释放锁，确保一定可以执行</span>\n<span/>        }\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h3 id=\"可重入锁(ReentrantLock)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">可重入锁(ReentrantLock)</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">可重入锁就是可以重复获取锁，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 本身就实现了可重入的功能，所以它也是可重入锁，可重入锁可以防止我们在递归调用时避免自己把自己锁死，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">synchronized</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">add</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>    count ++;\n<span/>    add();\n<span/>}\n<span/></code></pre>\n<h3 id=\"公平锁和非公平锁\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">公平锁和非公平锁</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">公平锁就是在多个线程申请获取锁时，先申请的一定先拿到，非公平锁就是当多个线程去申请获取锁时，后申请的反而先获取到锁。<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 在内部实现上是一个非公平锁，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ReentrantLock</code> 在默认也是非公平锁，一般非公平锁要比公平锁性能好，因为公平锁需要频繁的挂起和唤醒线程，存在大量的上下文切换。</p>\n<h2 id=\"ThreadLocal的原理\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">ThreadLocal的原理</span><span class=\"suffix\"></span></h2>\n<h3 id=\"ThreadLocal和synchronized区别\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">ThreadLocal和synchronized区别</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 都用于解决多线程并发访问，它们的区别在于 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 是利用锁机制，使变量在某一时刻仅被一个线程访问，而 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 是为每个线程都提供了变量的副本，使每个线程在某一时刻访问到的并非同一对象，隔离了多个线程对数据的共享。</p>\n<h3 id=\"ThreadLocal的使用\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">ThreadLocal的使用</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 就提供了线程的局部变量，每个线程都可以通过 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">set()</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">get()</code> 来操作这个局部变量，不会和其他线程的局部变量产生冲突，实现了线程的数据隔离。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们来看下不使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 的一个案例，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UseThreadLocal</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> Integer count = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Integer(<span class=\"hljs-number\" style=\"line-height: 26px;\">1</span>);\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 启动 3 个线程</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">StartThread</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        Thread[] threads = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread[<span class=\"hljs-number\" style=\"line-height: 26px;\">3</span>];\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; threads.length; i++) {\n<span/>            threads[i] = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> RunnableThread(i));\n<span/>        }\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; threads.length; i++) {\n<span/>            threads[i].start();\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 希望每个线程单独操作自己 count 变量</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">RunnableThread</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Runnable</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> id;\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">RunnableThread</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> id)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.id = id;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\" start\"</span>);\n<span/>            count = count + id;\n<span/>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\" count \"</span> + count);\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        UseThreadLocal threadLocal = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UseThreadLocal();\n<span/>        threadLocal.StartThread();\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Thread-0 start\n<span/>Thread-0 count 1\n<span/>Thread-2 start\n<span/>Thread-1 start\n<span/>Thread-1 count 4\n<span/>Thread-2 count 3\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 169ms\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">并不是我们设想的那样，这是因为，count 变量是3个线程所共享的数据导致，我们再来使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code>，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UseThreadLocal</span> </span>{\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 使用 ThreadLocal</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> ThreadLocal&lt;Integer&gt; count = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> ThreadLocal&lt;Integer&gt;(){\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> Integer <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">initialValue</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">return</span> <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>;\n<span/>        }\n<span/>    };\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 启动 3 个线程</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">StartThread</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        Thread[] threads = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread[<span class=\"hljs-number\" style=\"line-height: 26px;\">3</span>];\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; threads.length; i++) {\n<span/>            threads[i] = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> Thread(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> RunnableThread(i));\n<span/>        }\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> i = <span class=\"hljs-number\" style=\"line-height: 26px;\">0</span>; i &lt; threads.length; i++) {\n<span/>            threads[i].start();\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 希望每个线程单独操作自己 count 变量</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">RunnableThread</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Runnable</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> id;\n<span/>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">RunnableThread</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> id)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.id = id;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\" start\"</span>);\n<span/>            Integer integer = count.get(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 获取 ThreadLocal 里的值</span>\n<span/>            integer = integer + id;\n<span/>            count.set(integer); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 如果下次还有使用，需要 set 值</span>\n<span/>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\" count \"</span> + integer);\n<span/>        }\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        UseThreadLocal threadLocal = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UseThreadLocal();\n<span/>        threadLocal.StartThread();\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Thread-0 start\n<span/>Thread-2 start\n<span/>Thread-1 start\n<span/>Thread-0 count 0\n<span/>Thread-2 count 2\n<span/>Thread-1 count 1\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">in</span> 530ms\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">这样就保证了每个线程操作自己的变量的副本，实现了线程的数据隔离。</p>\n<h3 id=\"ThreadLocal原理解析\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">ThreadLocal原理解析</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们先可以进入 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">set()</code> 方法查看源码，如下</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">set</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(T var1)</span> </span>{\n<span/>    Thread var2 = Thread.currentThread(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 获取当前线程</span>\n<span/>    ThreadLocal.ThreadLocalMap var3 = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.getMap(var2); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 调用了 getMap() 方法，返回的是 ThreadLocal.ThreadLocalMap</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">if</span> (var3 != <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">null</span>) {\n<span/>        var3.set(<span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>, var1);\n<span/>    } <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">else</span> {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.createMap(var2, var1);\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们再进入 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal.ThreadLocalMap</code> 里，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">ThreadLocalMap</span> </span>{\n<span/>  <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">final</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> INITIAL_CAPACITY = <span class=\"hljs-number\" style=\"line-height: 26px;\">16</span>;\n<span/>  <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> ThreadLocal.ThreadLocalMap.Entry[] table;  <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 持有 Entry[] 数组</span>\n<span/>  <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> size;\n<span/>  <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> threshold;\n<span/>\n<span/>  ...\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">我们再来看看这个数组的定义，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">Entry</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">WeakReference</span>&lt;<span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">ThreadLocal</span>&lt;?&gt;&gt; </span>{\n<span/>    Object value;\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// Entry 又持有 ThreadLocal 和 Object 成员变量</span>\n<span/>    Entry(ThreadLocal&lt;?&gt; var1, Object var2) {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">super</span>(var1);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.value = var2;\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">也就是当我们去 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">new ThreadLocal</code> 它就在当前线程里创建了一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocalMap</code>且这个 Map 里持有多个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Entry[]</code> 型的数组，而每个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Entry</code> 持有成员 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Object</code>，结构如图：</p>\n<div style=\"width: 66%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/threadlocal1.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">那么，为什么用数组保存 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Entry</code> 呢，因为可能有多个变量需要线程隔离。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">其实，上面我们使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocal</code> 时，用其实例 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">count.get()</code> 就是获取到每个线程独有的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">ThreadLocalMap</code>，然后通过其实例获取到对应的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Entry</code>，就可以获取返回值。</p>\n<h2 id=\"CAS(Compare And Swap)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">CAS(Compare And Swap)</span><span class=\"suffix\"></span></h2>\n<h3 id=\"什么是原子操作\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">什么是原子操作</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在编程中，atomic(原子) 动作是一次性完全发生的动作，原子动作不能在中间停止：它要么完全发生，要么根本不发生。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">假设有两个操作 A 和 B (A 和 B 可能都很复杂)，如果从执行 A 的线程来看，当另一个线程执行 B 时，要么将 B 全部执行完成，要么全部执行不完成，那么 A 和 B 对彼此来说是原子的。</p>\n<h3 id=\"如何实现原子操作\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">如何实现原子操作</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">实现原子操作可以使用锁，锁机制可以满足基本需求，比如：<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">synchronized</code> 所包围的代码就是一个原子操作，Java 也我我们提供了很多原子变量类，如：<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">Atomic</code> 开头的一些类</p>\n<div style=\"width: 66%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/atomic.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在现代 CUP 里基本都提供了一个 Compare And Swap (CAS)的指令，每个 CAS 操作都包含3个运算符：内存地址、期望值、新值，操作时如果这个地址存放的值等于期望值，则将地址的上的值赋为新增，否则不做任何操作，重新获取值，再来一次，直到成功，如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/cas.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<h3 id=\"CAS原子操作的三大问题\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">CAS原子操作的三大问题</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<h4 id=\"ABA问题\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px; margin: 10px auto -1px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 16px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">ABA问题</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是 A，变成了 B，又变成了 A，那么使用 CAS 进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">ABA 问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A→B→A 就会变成 1A→2B→3A。举个通俗点的例子，你倒了一杯水放桌子上，干了点别的事，然后同事把你水喝了又给你重新倒了一杯水，你回来看水还在，拿起来就喝，如果你不管水中间被人喝过，只关心水还在，这就是ABA问题。</p>\n<h4 id=\"开销问题\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px; margin: 10px auto -1px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 16px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">开销问题</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">因为，Java 实现 CAS 操作是使用自旋机制，如果 Compare 长时间不相等，会重复执行，给 CPU 带来非常大的开销。</p>\n<h4 id=\"只能保证一个共享变量的原子操作\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px; margin: 10px auto -1px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 16px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">只能保证一个共享变量的原子操作</span><span class=\"suffix\" style=\"display: none;\"></span></h4>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">因为，CAS 是对地址上的值进行操作，因此它只能操作一个变量，如果我们需要同时操作多个变量 CAS 就无法保证操作的原子性。</p>\n<h3 id=\"原子操作类的使用\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">原子操作类的使用</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">AtomicInteger</code> 的使用，如下:</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">AtomicInt</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> AtomicInteger atomicInteger = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> AtomicInteger(<span class=\"hljs-number\" style=\"line-height: 26px;\">6</span>);\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        atomicInteger.getAndDecrement(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 自增1，返回之前的值</span>\n<span/>        System.out.println(atomicInteger);\n<span/>        atomicInteger.incrementAndGet(); <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 自增1，返回新增</span>\n<span/>        System.out.println(atomicInteger);\n<span/>        System.out.println(atomicInteger.addAndGet(<span class=\"hljs-number\" style=\"line-height: 26px;\">6</span>));\n<span/>        System.out.println(atomicInteger.getAndAdd(<span class=\"hljs-number\" style=\"line-height: 26px;\">6</span>));\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">AtomicReference</code> 的使用，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UseAtomicReference</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> AtomicReference&lt;UserInfo&gt; reference; <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 原子更新引用类型</span>\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        UserInfo user = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UserInfo(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"lsy\"</span>, <span class=\"hljs-number\" style=\"line-height: 26px;\">66</span>);\n<span/>        reference = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> AtomicReference(user);\n<span/>        UserInfo updateUser = <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">new</span> UserInfo(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"per\"</span>,<span class=\"hljs-number\" style=\"line-height: 26px;\">36</span>);\n<span/>        reference.compareAndSet(user,updateUser);\n<span/>\n<span/>        System.out.println(reference.get());\n<span/>        System.out.println(user);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">//定义一个实体类</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">static</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">UserInfo</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">volatile</span> String name;\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> age;\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">UserInfo</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String name, <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> age)</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.name = name;\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.age = age;\n<span/>        }\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> String <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">getName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">return</span> name;\n<span/>        }\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">getAge</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">return</span> age;\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>        <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> String <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>            <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">return</span> <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"UserInfo{\"</span> +\n<span/>                    <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"name='\"</span> + name + <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">'\\''</span> +\n<span/>                    <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\", age=\"</span> + age +\n<span/>                    <span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">'}'</span>;\n<span/>        }\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">UserInfo{name=<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">'per'</span>, age=<span class=\"hljs-number\" style=\"line-height: 26px;\">36</span>}\n<span/>UserInfo{name=<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">'lsy'</span>, age=<span class=\"hljs-number\" style=\"line-height: 26px;\">66</span>}\n<span/>\n<span/>BUILD SUCCESSFUL in <span class=\"hljs-number\" style=\"line-height: 26px;\">552</span>ms\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">Jdk中相关原子操作类有如下：</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">更新基本类型类：AtomicBoolean，AtomicInteger，AtomicLong\n更新数组类：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray\n更新引用类型：AtomicReference，AtomicMarkableReference，AtomicStampedReference</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">大部分用法都是类似的，在此，就不一一演示，感兴趣的小伙伴可以自行尝试。</p>\n<h2 id=\"阻塞队列\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">阻塞队列</span><span class=\"suffix\"></span></h2>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">队列</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">队列(queue)是一种采用先进先出(FIFO)策略的抽象数据结构，即最先进队列的数据元素，同样要最先出队列。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队，因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出(FIFO—first in first out)线性表。</p>\n<h3 id=\"什么是阻塞队列\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">什么是阻塞队列</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">支持阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列空余。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">支持阻塞的移除方法：当队列为空时，获取元素的线程会等待队列为非空。</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在并发编程中使用生产者和消费者模式可以解决大多数并发问题，该模式通过平衡生产线程和消费线程的工作能力来提高程序处理数据的速度。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">为了解决这种生产消费能力不均衡的问题，便有了生产者和消费者模式。生产者和消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通信，而是通过阻塞队列来进行通信，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">在 Java 中阻塞队列有一个专门的接口 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">BlockingQueue</code>，如图</p>\n<div style=\"width: 66%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/BlockingQueue.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">它定义了一些方法，但是这些方法不是所有的都是阻塞的，如：<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">add()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">remove()</code> 方法都是非阻塞的，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">put()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">take()</code> 方法是阻塞的。</p>\n<h3 id=\"常用的阻塞队列\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">常用的阻塞队列</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">以下的阻塞队列都实现了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">BlockingQueue</code> 接口，也都是线程安全的，如：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">DelayQueue：一个使用优先级队列实现的无界阻塞队列。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">SynchronousQueue：一个不存储元素的阻塞队列。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</section></li></ul>\n<h3 id=\"有界无界阻塞队列\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">有界无界阻塞队列</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">有界队列就是长度有限，满了以后生产者会阻塞，无界队列就是里面能放无数的东西而不会因为队列长度限制被阻塞，当然空间限制来源于系统资源的限制，如果处理不及时，导致队列越来越大。所以，在我们实际开发中尽量使用有界阻塞队列。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">无界也会阻塞，因为阻塞不仅仅体现在生产者放入元素时会阻塞，消费者拿取元素时，如果没有元素，同样也会阻塞。</p>\n<h2 id=\"AQS(AbstractQueuedSynchronizer)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; margin: 10px auto; height: 40px; background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(246, 246, 246); overflow: hidden; box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-left: -10px; display: inline-block; width: auto; height: 40px; background-color: rgb(33, 33, 34); border-bottom-right-radius: 100px; color: rgb(255, 255, 255); padding-right: 30px; padding-left: 30px; line-height: 40px; font-size: 20px;\">AQS(AbstractQueuedSynchronizer)</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">队列同步器 AbstractQueuedSynchronizer(简称同步器或AQS)，是用来构建锁或者其他同步组件的基础框架，它使用了一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">int</code> 成员变量表示同步状态，通过内置的 FIFO 队列来完成资源获取线程的排队工作。</p>\n<h3 id=\"AQS使用方式\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">AQS使用方式</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">AQS 的主要使用方式是继承，子类通过继承 AQS 并实现它的抽象方法来管理同步状态，在 AQS 里由一个<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">int</code> 型的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">state</code> 来代表这个状态，在抽象方法的实现过程中对同步状态进行更改，这时就需要使用同步器提供的3个方法 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">getState()</code>、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">setState(int newState)</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">compareAndSetState(int expect,int update)</code> 来进行操作，因为它们能够保证状态的改变是安全的。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">AQS 是实现锁的关键，锁是面向使用者，它定义了使用者与锁交互的接口，隐藏了实现细节；AQS 面向的是锁的实现者，它简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待、唤醒等底层操作。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">实现者需要继承 AQS 并重写指定方法，然后将 AQS 组合在自定义同步组件的实现中，并调用 AQS 提供的模板方法，而这些模板方法将会调用使用者重写的方法。</p>\n<h3 id=\"模板方法设计模式\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">模板方法设计模式</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">AQS 的设计师基于模板方法设计模式，模板方法设计模式是定义一个操作的算法的架子，而将一些步骤的实现延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">例如，我们想要做蛋糕，我们需要一个模型，每个人想做什么蛋糕，由他自己实现，代码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 蛋糕的模型，定义好了做蛋糕的步骤方法</span>\n<span/><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">abstract</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">AbstractCake</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">abstract</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">mould</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>; <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 制作形状</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">abstract</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">butter</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>; <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 涂抹奶油</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">abstract</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">toast</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>; <span class=\"hljs-comment\" style=\"color: #75715e; line-height: 26px;\">// 烤面包</span>\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">final</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">making</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.mould();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.butter();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">this</span>.toast();\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">子类去继承它，重写这些方法，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; background: #272822; color: #ddd; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">CheeseCake</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"font-weight: bold; color: white; line-height: 26px;\">AbstractCake</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">mould</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"芝士蛋糕制作形状 ...\"</span>);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">butter</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"芝士蛋糕涂抹奶油 ...\"</span>);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #75715e; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #f92672; font-weight: bold; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #a6e22e; font-weight: bold; line-height: 26px;\">toast</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #a6e22e; line-height: 26px;\">\"芝士蛋糕烤面包 ...\"</span>);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h3 id=\"CLH队列锁\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin: 20px auto 5px; border-top: 1px solid rgb(221, 221, 221); box-sizing: border-box;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"margin-top: -1px; padding-top: 6px; padding-right: 5px; padding-left: 5px; font-size: 18px; border-top: 2px solid rgb(33, 33, 34); display: inline-block; line-height: 1.1;\">CLH队列锁</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">CLH 队列锁也是一种基于链表的可扩展、高性能、公平的自旋锁，线程仅仅在本地变量上自旋，不断轮询前驱的状态，发现前驱释放了锁就结束自旋。</p>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">当一个线程需要获取锁时：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">创建一个 QNode，将其中的 locked 设为 true 表示获取锁，如图：</section></li></ul>\n<div style=\"width: 30%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/qnode.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">myPred 表示前驱节点的引用。</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">线程 A 对 tail 域调用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);\">getAndSet</code> 方法，使自己成为队列的尾部，同时获取一个指向前驱节点的引用 myPred，如图：</section></li></ul>\n<div style=\"width: 46%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/qnode1.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">线程 B 需要获得锁，于是，也需要按照相同的流程，如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/qnode2.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">线程就在前驱的节点的 locked 字段上自旋，直到前驱节点释放锁</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; font-size: 15px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\">当一个线程需要释放锁时，会将当前节点的 locked 域设置为 false，同时回收前驱节点，如图</section></li></ul>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/thread-concurrent/qnode3.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px; padding-bottom: 8px; margin: 0; color: black; box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 15px; text-align: start; white-space: normal; text-size-adjust: auto; line-height: 1.75em;\">前驱节点释放锁后，线程 A 的 myPred 所指向的前驱节点的 locked 字段变为 false，线程 A 就可以获取锁。AQS 就是 CLH 队列锁的一种变体实现。</p></section>\n","tags":["Thread"],"categories":["Java"]},{"title":"Android coder 需要理解的注解、反射和动态代理","url":"%2Fannotations-reflect.html","content":"\n{% li https://cdn.lishaoy.net/annotations-reflect/annotations-reflect-proxy2.png, annotations reflect proxy, annotations reflect proxy %}\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"padding: 0 10px; line-height: 1.6; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; font-size: 15px; letter-spacing: 0.05em; color: #595959;\"><p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">注解我们经常使用它，很多框架也提供了很多注解给我们使用，如 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ARouter</code> 的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Route(path = \"/test/activity\")</code> 、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">butterknife</code> 的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@BindView(R.id.user) EditText username;</code> 等，但是，你有没有自定义过注解，写过自己的注解处理器呢？反射听起来很高大上，但是实际上你真的了解他之后，只是一些API的调用而已；动态代理其实只是在静态代理(代理模式)基础上使用了反射技术；本篇文章将带领大家对注解、反射及动态代理有更清晰的认知。</p>\n<hr data-tool=\"mdnice编辑器\" style=\"height: 1px; margin-top: 10px; margin-bottom: 10px; border-top: 1px solid black; border: 1px solid #35b378; margin: 1.5em auto;background: white;\"></section>\n\n<!-- more -->\n\n<section id=\"nice\" data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"padding: 0 10px; line-height: 1.6; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; font-size: 15px; letter-spacing: 0.05em; color: #595959;\"><p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">本篇文章的示例代码放在 <a href=\"https://github.com/persilee/android_practice\" style=\"text-decoration: none; word-wrap: break-word; font-weight: bold; color: #35b378; border-bottom: 1px solid #35b378;\">Github</a> 上，所有知识点，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations-reflect-proxy.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; bmin-height: 32px; line-height: 32px; border-bottom: solid 1px #000000; color: #35b378; display: inline-block; border-bottom-width: 0px; border-bottom-style: solid; border-color: #35b378; padding-top: 5px; padding-right: 0.5em; padding-left: 0.5em; font-size: 23px; margin: 1em 0 0rem 0; padding: 0.5em 0; text-align: leftt; font-weight: bold;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">注解</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">注解(Annotations)，元数据的一种形式，提供有关于程序但不属于程序本身的数据。注解对它们注解的代码的操作没有直接影响。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">注解有多种用途，例如：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">为编译器提供信息：编译器可以使用注解来检查错误或抑制警告</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">编译或部署时处理：可以生成代码、XML、文件等</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">运行时处理：注解可以在运行时检查</section></li></ul>\n<h3 id=\"注解的格式\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">注解的格式</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">注解的格式如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>\n<span/><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MyClass</span> </span>{ ... }\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">注解以 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@</code> 开头后面跟上内容，注解可以包含元素，例如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>(id=<span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">666</span>, value = <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>)\n<span/><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MyClass</span> </span>{ ... }\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">如果，只有一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">value</code> 元素，则可以省略该名称，如果，没有元素，则可以省略括号，例如</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>) <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 只有一个 value 元素</span>\n<span/><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MyClass</span> </span>{ ... }\n<span/>\n<span/><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span> <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 没有元素</span>\n<span/><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MyClass</span> </span>{ ... }\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">如果，注解有相同的类型，则是重复注解，如</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>)\n<span/><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"zimu\"</span>)\n<span/><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MyClass</span> </span>{ ... }\n<span/></code></pre>\n<h3 id=\"注解声明\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">注解声明</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">注解的定义类似于接口的定义，在关键字 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">interface</code> 前加上 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@</code>，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@interface</span> Persilee {\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">id</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\">String <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">value</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;\n<span/>}\n<span/></code></pre>\n<h3 id=\"注解类型\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">注解类型</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">int id()</code> 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">String value()</code> 是注解类型(annotation type)，它们也可以定义可选的默认值，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@interface</span> Persilee {\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">id</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\">String <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">value</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">default</span> \"lsy\"</span>;\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在使用注解时，如果定义的注解的注解类型没有默认值，则必须进行赋值，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>(id = <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">666</span>) <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// id 必须要赋值，如，@Persilee 会提示 id 必须赋值</span>\n<span/><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MyClass</span> </span>{ ... }\n<span/></code></pre>\n<h3 id=\"元注解\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">元注解</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在注解上面的注解称为元注解(meta-annotations)，如</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Target</span>({ElementType.TYPE, ElementType.METHOD})\n<span/><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Retention</span>(RetentionPolicy.SOURCE)\n<span/><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@interface</span> Persilee {\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">id</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\">String <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">value</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">default</span> \"lsy\"</span>;\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">java.lang.annotation</code> 中定义了几种元注解类型(常使用的是 @Retention、@Target)，如</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><strong style=\"font-weight: bold; color: #35b378;\">@Retention</strong> 指定注解的存储方式，我们由 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">RetentionPolicy.java</code> (是一个枚举)可知，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">enum</span> RetentionPolicy {\n<span/>    SOURCE, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 标记的注解仅保留在源级别中，并被编译器忽略。</span>\n<span/>    CLASS, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 标记的注解在编译时由编译器保留，但 Java 虚拟机(JVM)会忽略。</span>\n<span/>    RUNTIME <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 标记的注解由 JVM 保留，因此运行时环境可以使用它。</span>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><strong style=\"font-weight: bold; color: #35b378;\">@Target</strong> 指定注解可以使用的范围，我们由 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ElementType.java</code> (是一个枚举)可知使用范围，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">enum</span> ElementType {\n<span/>    TYPE, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 类</span>\n<span/>    FIELD, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 字段或属性</span>\n<span/>    METHOD, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 方法</span>\n<span/>    PARAMETER, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 参数</span>\n<span/>    CONSTRUCTOR, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 构造方法</span>\n<span/>    LOCAL_VARIABLE, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 局部变量</span>\n<span/>    ANNOTATION_TYPE, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 也可以使用在注解上</span>\n<span/>    PACKAGE, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 包</span>\n<span/>    TYPE_PARAMETER, <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 类型参数</span>\n<span/>    TYPE_USE <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 任何类型</span>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">对于 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">TYPE_PARAMETER</code> (类型参数) 、 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">TYPE_USE</code> (任何类型名称) 可能不是很好理解，如果把 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Target</code> 设置成 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Target({ElementType.TYPE_PARAMETER})</code>，表示可以使用在\b泛型(上篇文章有介绍过<a href=\"https://h.lishaoy.net/generics.html\" style=\"text-decoration: none; word-wrap: break-word; font-weight: bold; color: #35b378; border-bottom: 1px solid #35b378;\">泛型</a>)的类型参数上，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">TypeParameterClass</span>&lt;@<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Persilee</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">T</span>&gt; </span>{\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> &lt;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span> T&gt; <span class=\"hljs-function\" style=\"line-height: 26px;\">T <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">foo</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(T t)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">如果把 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Target</code> 设置成 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Target({ElementType.TYPE_USE})</code>，表示可以使用在任何类型上，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">TypeParameterClass&lt;<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span> String&gt; typeParameterClass = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> TypeParameterClass&lt;&gt;();\n<span/><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span> String text = (<span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span> String)<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> Object();\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><strong style=\"font-weight: bold; color: #35b378;\">@Documented</strong> 注解表示使用了指定的注解，将使用 Javadoc 工具记录这些元素。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><strong style=\"font-weight: bold; color: #35b378;\">@Inherited</strong> 注解表示注解类型可以从超类继承。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><strong style=\"font-weight: bold; color: #35b378;\">@Repeatable</strong> 注解表明标记的注解可以多次应用于同一声明或类型使用。</p>\n<h3 id=\"注解应用场景\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">注解应用场景</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">根据 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Retention</code> 元注解定义的存储方式，注解一般可以使用在以下3种场景中，如：</p>\n<section class=\"table-container\" data-tool=\"mdnice编辑器\" style=\"overflow-x: auto;\"><table style=\"display: table; text-align: left;\">\n<thead>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: white;\">\n<th style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; font-weight: bold; background-color: #f0f0f0; min-width: 85px; text-align: left;\">级别</th>\n<th style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; font-weight: bold; background-color: #f0f0f0; min-width: 85px; text-align: left;\">技术</th>\n<th style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; font-weight: bold; background-color: #f0f0f0; min-width: 85px; text-align: left;\">说明</th>\n</tr>\n</thead>\n<tbody style=\"border: 0;\">\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: white;\">\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">源码</td>\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">APT</td>\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">在编译期能获取注解与注解声明的类和类中所有成员信息，一般用于生成额外的辅助类。</td>\n</tr>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: #F8F8F8;\">\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">字节码 </td>\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">字节码增强 </td>\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">在编译出Class后，通过修改Class数据以实现修改代码逻辑目的，对于是否需要修改的区分或者修改为不同逻辑的判断可以使用注解。</td>\n</tr>\n<tr style=\"border: 0; border-top: 1px solid #ccc; background-color: white;\">\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">运行时</td>\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">反射</td>\n<td style=\"font-size: 16px; border: 1px solid #ccc; padding: 5px 10px; min-width: 85px; text-align: left;\">在程序运行时，通过反射技术动态获取注解与其元素，从而完成不同的逻辑判断。</td>\n</tr>\n</tbody>\n</table>\n</section><h3 id=\"小案例(使用注解实现语法检查)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">小案例(使用注解实现语法检查)</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们定义一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">weekDay</code> 字段，类型是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">WeekDay</code> 枚举类型，方便我们设置枚举中指定的值，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">WeekDayDemo</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> WeekDay weekDay;\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">enum</span> WeekDay {\n<span/>        SATURDAY,SUNDAY\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> WeekDay <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getWeekDay</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> weekDay;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setWeekDay</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(WeekDay weekDay)</span> </span>{\n<span/>        WeekDayDemo.weekDay = weekDay;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        setWeekDay(WeekDay.SATURDAY);\n<span/>        System.out.println(getWeekDay());\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">众所周知，在 Java 中枚举的实质是特殊的静态成员变量，在运行时候，所有的枚举会作为单例加载到内存中，非常消耗内存，那么，有没有什么优化的方案呢，在此，我们使用注解来取代枚举。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们使用常量和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@intDef</code> (语法检查)元注解去代替枚举，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">IntdefDemo</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> SATURDAY = <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> SUNDAY = <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">1</span>;\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> weekDay;\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@IntDef</span>({SATURDAY, SUNDAY})\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Target</span>({ElementType.FIELD, ElementType.PARAMETER})\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Retention</span>(RetentionPolicy.SOURCE)\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@interface</span> WeekDay { <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//自定义一个 WeekDay 注解</span>\n<span/>\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setWeekDay</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@WeekDay <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> weekDay)</span> </span>{ <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 使用 WeekDay 注解限制参数类型</span>\n<span/>        IntdefDemo.weekDay = weekDay;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        setWeekDay(SATURDAY); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 只能 传入 SATURDAY, SUNDAY</span>\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h3 id=\"APT注解处理器\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">APT注解处理器</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">APT(Annotation Processor Tools) 注解处理器，用于处理注解，编写好的 Java 文件，需要经过 Javac 的编译，编译为虚拟机能够加载的字节码(Class)文件，注解处理器是 Javac 自带的一个工具，用来在编译时期处理注解信息。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">上文中我们已自定义好了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Persilee</code> 注解，下面我们来编写一个简单的注解处理器来处理 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Persilee</code> 注解，我们可以新建一个 Java 的 Module，创建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">PersileeProcessor</code> 的类，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@SupportedAnnotationTypes</span>(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.anreprdemo.Persilee\"</span>)  <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//指定要处理的注解</span>\n<span/><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">PersileeProcessor</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AbstractProcessor</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">boolean</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">process</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>{\n<span/>        Messager messager = processingEnv.getMessager(); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//</span>\n<span/>        messager.printMessage(Diagnostic.Kind.NOTE, <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"APT working ...\"</span>);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (TypeElement typeElement: set) {\n<span/>            messager.printMessage(Diagnostic.Kind.NOTE,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"===&gt;\"</span> + typeElement.getQualifiedName());\n<span/>            Set&lt;? extends Element&gt; elements = roundEnvironment.getElementsAnnotatedWith(typeElement);\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (Element element: elements) {\n<span/>                messager.printMessage(Diagnostic.Kind.NOTE,<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"===&gt;\"</span> + element.getSimpleName());\n<span/>            }\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">false</span>;\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">然后，在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">main</code> 目录下新建 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">resources</code> 目录，如图：</p>\n<div style=\"width: 86%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations1.png\" alt=\"no-shadow\" title=\"annotation\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">这个目录结构是规定死的，必须这样写，然后在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">javax.annotation.processing.Processor</code> 文件里注册需要处理的注解处理器，如</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">net.lishaoy.aptlib.PersileeProcessor\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">最后，在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">app</code> 的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">build.gradle</code> 文件引入模块，如</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">dependencies {\n<span/>  ...\n<span/>\n<span/>  <span class=\"hljs-function\" style=\"line-height: 26px;\">annotationProcessor <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">project</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">':aptlib'</span>)</span>\n<span/>}\n<span/></span></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在你 Build 工程时候，会在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Task :app:compileDebugJavaWithJavac</code> 任务打印我们在注解处理程序的日志信息，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">注: APT working ...\n<span/>注: ===&gt;net.lishaoy.anreprdemo.Persilee\n<span/>注: ===&gt;MainActivity\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">因为，我们只在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">MainActivity</code> 中使用了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@Persilee</code> 注解，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Persilee</span>(id = <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">666</span>, value = <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>)\n<span/><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MainActivity</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle savedInstanceState)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);\n<span/>\n<span/>        setContentView(R.layout.activity_main);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h2 id=\"反射\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; bmin-height: 32px; line-height: 32px; border-bottom: solid 1px #000000; color: #35b378; display: inline-block; border-bottom-width: 0px; border-bottom-style: solid; border-color: #35b378; padding-top: 5px; padding-right: 0.5em; padding-left: 0.5em; font-size: 23px; margin: 1em 0 0rem 0; padding: 0.5em 0; text-align: leftt; font-weight: bold;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">反射</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">一般情况下，我们使用某个类时必定知道它是什么类，用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Cook cook = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> Cook(); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 实例化一个对象，标准用法</span>\n<span/>cook.cookService(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"🍅\"</span>);\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">反射是一开始并不知道初始化的类对象是什么，也不能使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">new</code> 关键字来创建对象，反射是在运行的时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，调用对应的方法。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">Java 反射机制主要提供了以下功能:</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">在运行时构造任意一个类的对象</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">在运行时获取或修改任意一个类所具有的成员变量和方法</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">在运行时调用任意一个对象的方法(属性)</section></li></ul>\n<h3 id=\"Class类\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">Class类</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">Class是一个类，封装了当前对象所对应的类的信息，我们写的每一个类都可以看成一个对象，是 java.lang.Class 类的对象，Class是用来描述类的类。</p>\n<h3 id=\"获得Class对象\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">获得Class对象</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">Class对象的获取有3种方式，如下：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">通过类名获取 类名.class</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">通过对象获取 对象名.getClass()</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">通过全类名获取 Class.forName(全类名)</section></li></ul>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Cook cook = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> Cook();\n<span/>Class cookClass = Cook.class;\n<span/>Class cookClass1 = cook.getClass();\n<span/>Class cookClass2 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.reflectdemo.Cook\"</span>);\n<span/></code></pre>\n<h3 id=\"创建实例\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">创建实例</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们可以通过反射来生成对象的实例，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">Class cookClass = Cook.class;\n<span/>Cook cook1 = (Cook) cookClass.newInstance();\n<span/></code></pre>\n<h3 id=\"获取构造器\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">获取构造器</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">获取构造器的方法有，如下：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Constructor getConstructor(Class[] params)：获得使用特殊的参数类型的public构造函数(包括父类)</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Constructor[] getConstructors()：获得类的所有公共构造函数</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Constructor getDeclaredConstructor(Class[] params)：获得使用特定参数类型的构造函数(包括私有)</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Constructor[] getDeclaredConstructors()：获得类的所有构造函数(与接入级别无关)</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们来新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Person</code> ，以便我们的演示，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Person</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> String name;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> age;\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Person</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String name, <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> age)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name = name;\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.age = age;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Person</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>();\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> String <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"get name: \"</span> + name);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> name;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setName</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String name)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name = name;\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"set name: \"</span> + <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.name);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getAge</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"get age: \"</span> + age);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> age;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setAge</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> age)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.age = age;\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"set age: \"</span> + <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.age);\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">privateMethod</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"the private method!\"</span>);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">很常规的一个类，里面有私有的属性和方法。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">下面，我们新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">GetConstructor</code> 的类来演示，获取构造器方法如何使用，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">GetConstructor</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>\n<span/>            ClassNotFoundException,\n<span/>            NoSuchMethodException,\n<span/>            IllegalAccessException,\n<span/>            InvocationTargetException,\n<span/>            InstantiationException </span>{\n<span/>\n<span/>        String className = <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.reflectdemo.entity.Person\"</span>;\n<span/>        Class&lt;Person&gt; personClass = (Class&lt;Person&gt;) Class.forName(className);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//获取全部的constructor对象</span>\n<span/>        Constructor&lt;?&gt;[] constructors = personClass.getConstructors();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (Constructor&lt;?&gt; constructor: constructors) {\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取全部的constructor对象: \"</span> + constructor);\n<span/>        }\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//获取某一个constructor对象</span>\n<span/>        Constructor&lt;Person&gt; constructor = personClass.getConstructor(String.class, <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>.class);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取某一个constructor对象: \"</span> + constructor);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//调用构造器的 newInstance() 方法创建对象</span>\n<span/>        Person person = constructor.newInstance(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"lsy\"</span>, <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);\n<span/>        System.out.println(person.getName() + <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\", \"</span> + person.getAge() );\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">输出结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">获取全部的constructor对象: public net.lishaoy.reflectdemo.entity.Person(java.lang.String,int)\n<span/>获取全部的constructor对象: public net.lishaoy.reflectdemo.entity.Person()\n<span/>获取某一个constructor对象: public net.lishaoy.reflectdemo.entity.Person(java.lang.String,int)\n<span/>lsy, 66\n<span/></code></pre>\n<h3 id=\"获取方法\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">获取方法</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">获取方法的方法有，如下：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Method getMethod(String name, Class[] params)：使用特定的参数类型，获得命名的公共方法</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Method[] getMethods()：获得类的所有公共方法</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Method getDeclaredMethod(String name, Class[] params)：使用特写的参数类型，获得类声明的命名的方法</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Method[] getDeclaredMethods()：获得类声明的所有方法</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们新创建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">GetMethod</code> 来演示如何来获取和调用方法，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">GetMethod</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>\n<span/>            ClassNotFoundException,\n<span/>            NoSuchMethodException,\n<span/>            IllegalAccessException,\n<span/>            InstantiationException,\n<span/>            InvocationTargetException </span>{\n<span/>\n<span/>        Class&lt;?&gt; aClass = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.reflectdemo.entity.Person\"</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//获取所有的public方法(包含从父类继承的方法)</span>\n<span/>        Method[] methods = aClass.getMethods();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (Method method: methods) {\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取所有public方法： \"</span> + method.getName() + <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"()\"</span>);\n<span/>        }\n<span/>\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"===========================\"</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//获取所有方法(不包含父类方法)</span>\n<span/>        methods = aClass.getDeclaredMethods();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (Method method: methods) {\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取所有方法: \"</span> + method.getName() + <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"()\"</span>);\n<span/>        }\n<span/>\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"===========================\"</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//获取指定的方法</span>\n<span/>        Method method = aClass.getDeclaredMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"setAge\"</span>, <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span>.class);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取指定的方法:\"</span> + method);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//调用方法</span>\n<span/>        Object instance = aClass.newInstance();\n<span/>        method.invoke(instance, <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//调用私有方法</span>\n<span/>        method = aClass.getDeclaredMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"privateMethod\"</span>);\n<span/>        method.setAccessible(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">true</span>); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 需要调用此方法且设置为 true</span>\n<span/>        method.invoke(instance);\n<span/>\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">获取所有public方法： getName()\n<span/>获取所有public方法： setName()\n<span/>获取所有public方法： setAge()\n<span/>获取所有public方法： getAge()\n<span/>获取所有public方法： <span class=\"hljs-built_in\" style=\"color: #c18401; line-height: 26px;\">wait</span>()\n<span/>获取所有public方法： <span class=\"hljs-built_in\" style=\"color: #c18401; line-height: 26px;\">wait</span>()\n<span/>获取所有public方法： <span class=\"hljs-built_in\" style=\"color: #c18401; line-height: 26px;\">wait</span>()\n<span/>获取所有public方法： equals()\n<span/>获取所有public方法： toString()\n<span/>获取所有public方法： hashCode()\n<span/>获取所有public方法： getClass()\n<span/>获取所有public方法： notify()\n<span/>获取所有public方法： notifyAll()\n<span/>===========================\n<span/>获取所有方法: getName()\n<span/>获取所有方法: setName()\n<span/>获取所有方法: setAge()\n<span/>获取所有方法: privateMethod()\n<span/>获取所有方法: getAge()\n<span/>===========================\n<span/>获取指定的方法:public void net.lishaoy.reflectdemo.entity.Person.setAge(int)\n<span/><span class=\"hljs-built_in\" style=\"color: #c18401; line-height: 26px;\">set</span> age: 66\n<span/>the private method!\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span> 395ms\n<span/></code></pre>\n<h3 id=\"获取成员变量\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">获取成员变量</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">获取成员变量的方法有，如下：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Field getField(String name)：获得命名的公共字段</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Field[] getFields()：获得类的所有公共字段</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Field getDeclaredField(String name)：获得类声明的命名的字段</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">Field[] getDeclaredFields()：获得类声明的所有字段</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们再来新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">GetField</code> 的类来演示如何获取成员变量，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">GetField</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>\n<span/>            ClassNotFoundException,\n<span/>            NoSuchFieldException,\n<span/>            IllegalAccessException,\n<span/>            InstantiationException </span>{\n<span/>\n<span/>        Class&lt;?&gt; aClass = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.reflectdemo.entity.Person\"</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取所有字段(不包含父类字段)</span>\n<span/>        Field[] fields = aClass.getDeclaredFields();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (Field field: fields) {\n<span/>            System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取所有字段: \"</span> + field.getName());\n<span/>        }\n<span/>\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"================\"</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取指定字段</span>\n<span/>        Field name = aClass.getDeclaredField(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"name\"</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取指定字段: \"</span> + name.getName());\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 设置指定字段的值</span>\n<span/>        Object instance = aClass.newInstance();\n<span/>        name.set(instance, <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"per\"</span>);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取指定字段的值</span>\n<span/>        Object o = name.get(instance);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取指定字段的值: \"</span> + o);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 设置和获取私有字段的值</span>\n<span/>        Field age = aClass.getDeclaredField(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"age\"</span>);\n<span/>        age.setAccessible(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">true</span>); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 需要调用此方法且设置为 true</span>\n<span/>        age.set(instance, <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">66</span>);\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"获取私有字段的值: \"</span> + age.get(instance));\n<span/>\n<span/>    }\n<span/>\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">获取所有字段: name\n<span/>获取所有字段: age\n<span/>================\n<span/>获取指定字段: name\n<span/>获取指定字段的值: per\n<span/>获取私有字段的值: 66\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span> 395ms\n<span/></code></pre>\n<h2 id=\"使用注解和反射实现自动findViewById(案例)\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; bmin-height: 32px; line-height: 32px; border-bottom: solid 1px #000000; color: #35b378; display: inline-block; border-bottom-width: 0px; border-bottom-style: solid; border-color: #35b378; padding-top: 5px; padding-right: 0.5em; padding-left: 0.5em; font-size: 23px; margin: 1em 0 0rem 0; padding: 0.5em 0; text-align: leftt; font-weight: bold;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">使用注解和反射实现自动findViewById(案例)</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们已经对注解和反射有了更清晰的认知，下面我们通过一个小案例来巩固我们的学习：使用注解和反射完成类似 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">butterknife</code> 的自动 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">findViewById</code> 的功能。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">新建一个空的 Android 工程，在工程目录下新建 <strong style=\"font-weight: bold; color: #35b378;\">inject</strong> 目录，在此目录下新建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">InjectView</code> 的类和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">BindView</code> 的自定义注解，如：</p>\n<h3 id=\"创建InjectView\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">创建InjectView</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">InjectView</code> 类通过反射完成 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">findViewById</code> 功能：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">InjectView</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">init</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Activity activity)</span> </span>{\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取 activity 的 class 对象</span>\n<span/>        Class&lt;? extends Activity&gt; aClass = activity.getClass();\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取 activity 的所以成员变量</span>\n<span/>        Field[] declaredFields = aClass.getDeclaredFields();\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 变量所以成员变量</span>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">for</span> (Field field: declaredFields) {\n<span/>            <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 判断属性是否加上了 @BindView 注解</span>\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span>(field.isAnnotationPresent(BindView.class)){\n<span/>                <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取注解 BindView 对象</span>\n<span/>                BindView bindView = field.getAnnotation(BindView.class);\n<span/>                <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取注解类型元素 id</span>\n<span/>                <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> id = bindView.value();\n<span/>                <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 通过资源 id 找到对应的 view</span>\n<span/>                View view = activity.findViewById(id);\n<span/>                <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 设置可以访问私有字段</span>\n<span/>                field.setAccessible(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">true</span>);\n<span/>                <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>                    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 给字段赋值</span>\n<span/>                    field.set(activity,view);\n<span/>                } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (IllegalAccessException e) {\n<span/>                    e.printStackTrace();\n<span/>                }\n<span/>            }\n<span/>        }\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h3 id=\"创建@BindView注解\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">创建@BindView注解</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span/><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Target</span>(ElementType.FIELD)\n<span/><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@interface</span> BindView {\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@IdRes</span> <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">value</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>; <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// @IdRes 只能传 id 资源</span>\n<span/>}\n<span/></code></pre>\n<h3 id=\"使用@BindView注解\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">使用@BindView注解</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">MainActivity</code> 里使用 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">@BindView</code> 注解，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">MainActivity</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">AppCompatActivity</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 使用注解</span>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@BindView</span>(R.id.text_view)\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> TextView textView;\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">onCreate</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Bundle savedInstanceState)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.onCreate(savedInstanceState);\n<span/>\n<span/>        setContentView(R.layout.activity_main);\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 初始化 InjectView，完成自动 findViewById 功能</span>\n<span/>        InjectView.init(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>);\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 测试 R.id.text_view 是否自动赋值给 textView</span>\n<span/>        textView.setText(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"通过 @BindView 注解自动完成 findViewById\"</span>);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">运行结果，如图：</p>\n<div style=\"width: 36%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations2.png\" alt=\"no-shadow\" title=\"small case\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">是不是很简单，一个类就完成了自动 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">findViewById</code> 的功能。</p>\n<h2 id=\"动态代理\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; bmin-height: 32px; line-height: 32px; border-bottom: solid 1px #000000; color: #35b378; display: inline-block; border-bottom-width: 0px; border-bottom-style: solid; border-color: #35b378; padding-top: 5px; padding-right: 0.5em; padding-left: 0.5em; font-size: 23px; margin: 1em 0 0rem 0; padding: 0.5em 0; text-align: leftt; font-weight: bold;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">动态代理</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在了解动态代理之前，我们先来回顾下静态代理。</p>\n<h3 id=\"静态代理\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">静态代理</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用，如，我们生活中常见的中介。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">代理模式一般会有3个角色，如图：</p>\n<div style=\"width: 86%; margin:26px auto;\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations3.png\" alt=\"no-shadow\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">抽象角色：指代理角色和真实角色对外提供的公共方法，一般为一个接口</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">真实角色：需要实现抽象角色接口，定义了真实角色所要实现的业务逻辑，以便供代理角色调用</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">代理角色：需要实现抽象角色接口，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作</section></li></ul>\n<h3 id=\"为什么要使用代理模式\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">为什么要使用代理模式</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">可以间接访问对象，防止直接访问对象来的不必要复杂性</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500; margin: 10px 0;\">通过代理对象对访问进行控制</section></li></ul>\n<h3 id=\"静态代理案例\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">静态代理案例</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">场景如下：</p>\n<blockquote data-tool=\"mdnice编辑器\" style=\"display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; margin: 10px 5px; border-left: 3px solid #35b378; border-right: 0px solid #35b378; color: #616161; quotes: none; background: #FBF9FD;\">\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;\">小明可以在某网站上购买国内的东西，但是，不能买海外的东西，于是，他找了海外代购帮他买东西。</p>\n</blockquote>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">如何用代码描述呢？根据代理模式的3个角色，我们分别定义1个接口2个类，如：<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">OrderService</code> \b接口(抽象角色)、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ImplJapanOrderService</code> 类(真实角色)、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ProxyJapanOrder</code> 类(代理角色)</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">OrderService</code> \b接口(抽象角色)，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">interface</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">OrderService</span> </span>{\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">saveOrder</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>;\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ImplJapanOrderService</code> 类(真实角色)，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 实现抽象角色接口</span>\n<span/><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ImplJapanOrderService</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">OrderService</span> </span>{\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">saveOrder</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.println(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"下单成功，订单号为：888888\"</span>);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">888888</span>;\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\"><code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ProxyJapanOrder</code> 类(代理角色)，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 实现抽象角色接口</span>\n<span/><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ProxyJapanOrder</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">OrderService</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> OrderService orderService; <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 持有真实角色</span>\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> OrderService <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getOrderService</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> orderService;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setOrderService</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(OrderService orderService)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.orderService = orderService;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">saveOrder</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        System.out.print(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"日本代购订单，\"</span>);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> orderService.saveOrder(); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 调用真实角色的行为方法</span>\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在创建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Client</code> 类来测试我们的代码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Client</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 日本代购订单</span>\n<span/>        OrderService orderJapan = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplJapanOrderService();\n<span/>        ProxyJapanOrder proxyJapanOrder = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ProxyJapanOrder();\n<span/>        proxyJapanOrder.setOrderService(orderJapan);\n<span/>        proxyJapanOrder.saveOrder();\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">日本代购订单，下单成功，订单号为：888888\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span> 1s\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">如果，需要购买韩国的东西，需要新增一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ImplKoreaOrderService</code> 类(韩国服务商) 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ProxyKoreaOrder</code> 类(韩国代理)，如还需要购买其他国家的东西，需要新增不同的类，则会出现静态代理对象量多、代码量大，从而导致代码复杂，可维护性差的问题，如是，我们需要使用动态代理。</p>\n<h3 id=\"动态代理\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">动态代理</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">动态代理是在运行时才创建代理类和其实例，因此，我们可以传不同的真实角色，实现一个代理类完成多个真实角色的行为方法，当然，其效率比静态代理低。那么如何实现动态代理呢，JDK已为我们提供了 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Proxy</code> 类 和 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">InvocationHandler</code> 接口来完成这件事情。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们来创建一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ProxyDynamicOrder</code> 类(动态代理类)，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ProxyDynamicOrder</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">InvocationHandler</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> Object orderService; <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 持有真实角色</span>\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> Object <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getOrderService</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> orderService;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">setOrderService</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object orderService)</span> </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.orderService = orderService;\n<span/>    }\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 通过 Proxy 动态创建真实角色</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> Object <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getProxyInstance</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span></span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> Proxy.newProxyInstance(\n<span/>                orderService.getClass().getClassLoader(),\n<span/>                orderService.getClass().getInterfaces(),\n<span/>                <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>\n<span/>                );\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@Override</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> Object <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object o, Method method, Object[] objects)</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span> Throwable </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> method.invoke(orderService, objects); <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 通过反射执行真实角色的行为方法</span>\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">在来看看，<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Client</code> 类里如何调用，代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Client</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[] args)</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 静态代理模式</span>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 国内订单</span>\n<span/>        OrderService order = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplOrderService();\n<span/>        order.saveOrder();\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 日本代购订单</span>\n<span/>        OrderService orderJapan = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplJapanOrderService();\n<span/>        ProxyJapanOrder proxyJapanOrder = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ProxyJapanOrder();\n<span/>        proxyJapanOrder.setOrderService(orderJapan);\n<span/>        proxyJapanOrder.saveOrder();\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 韩国代购订单</span>\n<span/>        OrderService orderKorea = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplKoreaOrderService();\n<span/>        ProxyKoreaOrder proxyKoreaOrder = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ProxyKoreaOrder();\n<span/>        proxyKoreaOrder.setOrderService(orderKorea);\n<span/>        proxyKoreaOrder.saveOrder();\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 动态代理模式</span>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 国内订单</span>\n<span/>        ProxyDynamicOrder proxyDynamicOrder = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ProxyDynamicOrder();\n<span/>        OrderService orderService = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplOrderService();\n<span/>        proxyDynamicOrder.setOrderService(orderService);\n<span/>        OrderService orderService1 = (OrderService) proxyDynamicOrder.getProxyInstance();\n<span/>        orderService1.saveOrder();\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 日本代购订单</span>\n<span/>        OrderService japanOrderService = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplJapanOrderService();\n<span/>        proxyDynamicOrder.setOrderService(japanOrderService);\n<span/>        OrderService japanOrderService1 = (OrderService) proxyDynamicOrder.getProxyInstance();\n<span/>        japanOrderService1.saveOrder();\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 韩国代购订单</span>\n<span/>        OrderService koreaOrderService = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> ImplKoreaOrderService();\n<span/>        proxyDynamicOrder.setOrderService(koreaOrderService);\n<span/>        OrderService koreaOrderService1 = (OrderService) proxyDynamicOrder.getProxyInstance();\n<span/>        koreaOrderService1.saveOrder();\n<span/>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 生成动态代理生成的class文件</span>\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">//ProxyUtil.generateClassFile(koreaOrderService.getClass(), koreaOrderService1.getClass().getSimpleName());</span>\n<span/>\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">运行结果，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">下单成功，订单号为：666666\n<span/>日本代购订单，下单成功，订单号为：888888\n<span/>韩国代购订单，下单成功，订单号为：666888\n<span/>下单成功，订单号为：666666\n<span/>下单成功，订单号为：888888\n<span/>下单成功，订单号为：666888\n<span/>\n<span/>BUILD SUCCESSFUL <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">in</span> 1s\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">只需要一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ProxyDynamicOrder</code> 代理类即可完成 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ImplOrderService</code> 、 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ImplJapanOrderService</code> 、<code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ImplKoreaOrderService</code> 真实角色提供的服务。</p>\n<h3 id=\"动态代理原理\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; font-size: 20px; margin: 1.2em 0 1em; padding: 0; font-weight: bold; color: #35b378;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">动态代理原理</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">proxyDynamicOrder.getProxyInstance()</code> 代码上打个断点，通过调试模式发现，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations4.png\" alt=\"no-shadow\" title=\"proxy\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">代理类的名字是 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">$Proxy0@507</code>，为什么是这个名字，我们在编译后的目录里也找不到 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">$Proxy0@507</code> 类文件，如图：</p>\n<div style=\"width: 56%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations5.png\" alt=\"no-shadow\" title=\"proxy\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">我们通过查看 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Proxy.newProxyInstance</code> 方法源码，可知，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-meta\" style=\"color: #4078f2; line-height: 26px;\">@CallerSensitive</span>\n<span/><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Object <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">newProxyInstance</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ClassLoader var0, Class&lt;?&gt;[] var1, InvocationHandler var2)</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span> IllegalArgumentException </span>{\n<span/>    Objects.requireNonNull(var2);\n<span/>    Class[] var3 = (Class[])var1.clone();\n<span/>    SecurityManager var4 = System.getSecurityManager();\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span> (var4 != <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>) {\n<span/>        checkProxyAccess(Reflection.getCallerClass(), var0, var3);\n<span/>    }\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取代理类的 class 对象</span>\n<span/>    Class var5 = getProxyClass0(var0, var3);\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span> (var4 != <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>) {\n<span/>            checkNewProxyPermission(Reflection.getCallerClass(), var5);\n<span/>        }\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 获取代理类的构造器</span>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span> Constructor var6 = var5.getConstructor(constructorParams);\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span> (!Modifier.isPublic(var5.getModifiers())) {\n<span/>            AccessController.doPrivileged(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> PrivilegedAction&lt;Void&gt;() {\n<span/>                <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> Void <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">run</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> </span>{\n<span/>                    var6.setAccessible(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">true</span>);\n<span/>                    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;\n<span/>                }\n<span/>            });\n<span/>        }\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 创建代理类的示例</span>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> var6.newInstance(var2);\n<span/>    } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (InstantiationException | IllegalAccessException var8) {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> InternalError(var8.toString(), var8);\n<span/>    } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (InvocationTargetException var9) {\n<span/>        Throwable var7 = var9.getCause();\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span> (var7 <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">instanceof</span> RuntimeException) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> (RuntimeException)var7;\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">else</span> {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> InternalError(var7.toString(), var7);\n<span/>        }\n<span/>    } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (NoSuchMethodException var10) {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> InternalError(var10.toString(), var10);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">然后，跟进 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">getProxyClass0(var0, var3)</code> 看看是如何获取代理类的 class 对象的，点击进入，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader var0, Class&lt;?&gt;... var1) {\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span> (var1.length &gt; <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">65535</span>) {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> IllegalArgumentException(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"interface limit exceeded\"</span>);\n<span/>    } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">else</span> {\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 缓存了代理类的 class 对象</span>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> (Class)proxyClassCache.get(var0, var1);\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">然后，我们来看看这个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">var1</code> 是个什么东西，我们往上找了找，果然发现，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// var1 就是我们实现的 InvocationHandler 接口</span>\n<span/><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">protected</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">Proxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(InvocationHandler var1)</span> </span>{\n<span/>    Objects.requireNonNull(var1);\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>.h = var1;\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">然后，我们点进 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">proxyClassCache.get(var0, var1)</code> 方法，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations6.png\" alt=\"no-shadow\" title=\"proxy\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">使用关键代码 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">this.subKeyFactory.apply(var1, var2)</code> 去获取我们的代理类的 class 对象，我们进入 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">apply</code> 实现类 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">ProxyClassFactory</code>，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> Class&lt;?&gt; apply(ClassLoader var1, Class&lt;?&gt;[] var2) {\n<span/>    IdentityHashMap var3 = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> IdentityHashMap(var2.length);\n<span/>    Class[] var4 = var2;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> var5 = var2.length;\n<span/>\n<span/>    ...\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">if</span> (var16 == <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>) {\n<span/>        var16 = <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"com.sun.proxy.\"</span>;\n<span/>    }\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">long</span> var19 = nextUniqueNumber.getAndIncrement();\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 生成代理类的类名</span>\n<span/>    String var23 = var16 + <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"$Proxy\"</span> + var19;\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 生成代理类的字节码</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">byte</span>[] var22 = ProxyGenerator.generateProxyClass(var23, var2, var17);\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>        <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 生成代理类的 class 对象</span>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> Proxy.defineClass0(var1, var23, var22, <span class=\"hljs-number\" style=\"color: #986801; line-height: 26px;\">0</span>, var22.length);\n<span/>    } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (ClassFormatError var14) {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> IllegalArgumentException(var14.toString());\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">然后，我们点进 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">Proxy.defineClass0</code> 方法，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">native</span> Class&lt;?&gt; defineClass0(ClassLoader var0, String var1, <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">byte</span>[] var2, <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> var3, <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> var4);\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">是一个 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">native</code> 方法，所以涉及到 C 或 C++ ，我们就不往后追踪。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">那么，代理的 Class 文件到底存在哪儿呢，由一个类的生命周期，如图：</p>\n<div style=\"width: 100%; margin:auto\" data-tool=\"mdnice编辑器\">\n<figure style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; flex-direction: column; justify-content: center; align-items: center; display: block;\"><img src=\"https://cdn.lishaoy.net/annotations-reflect/annotations7.png\" alt=\"no-shadow\" title=\"proxy\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 6px;\"></figure>\n</div>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">代理的 Class 文件通过反射存在内存中，所以我们可以通过 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">byte[]</code> 写入文件，我们新建一个工具类来把内存中的 class 字节码写入文件，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ProxyUtil</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">void</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">generateClassFile</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class aClass, String proxyName)</span> </span>{\n<span/>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(\n<span/>                proxyName,\n<span/>                <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> Class[]{aClass}\n<span/>        );\n<span/>        String path = aClass.getResource(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\".\"</span>).getPath();\n<span/>        System.out.println(path);\n<span/>        FileOutputStream outputStream = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>;\n<span/>\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>            outputStream = <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> FileOutputStream(path + proxyName + <span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\".class\"</span>);\n<span/>            outputStream.write(proxyClassFile);\n<span/>            outputStream.flush();\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (IOException e) {\n<span/>            e.printStackTrace();\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">finally</span> {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>                outputStream.close();\n<span/>            } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (IOException e) {\n<span/>                e.printStackTrace();\n<span/>            }\n<span/>        }\n<span/>    }\n<span/>}\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">通过输出的 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #35b378; box-shadow: none;\">path</code> 路径，找到文件，如：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\">/Users/lishaoying/Documents/APP/Android/practice/annotation_reflect/anRePrDemo/proxyDemo/build/classes/java/main/net/lishaoy/proxydemo/service/impl/\n<span/></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">文件代码，如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 6px; padding: 0px; background: #fff;\"><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #383a42; background: #fafafa; display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; border-radius: 6px;\"><span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 继承了 Proxy 实现了 ImplKoreaOrderService 接口</span>\n<span/><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span> <span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">class</span> $<span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Proxy0</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">extends</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">Proxy</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">implements</span> <span class=\"hljs-title\" style=\"color: #c18401; line-height: 26px;\">ImplKoreaOrderService</span> </span>{\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 生成了各种方法</span>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m1;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m8;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m3;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m2;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m5;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m4;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m7;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m9;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m0;\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">private</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> Method m6;\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> $Proxy0(InvocationHandler var1) <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>  {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>(var1);\n<span/>    }\n<span/>\n<span/>    ...\n<span/>\n<span/>    <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// 生成了 真实角色的 saveOrder 方法</span>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">int</span> <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">saveOrder</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>  </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>            <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// h 是什？，点进去发现就是我们 传入的 InvocationHandler 接口</span>\n<span/>            <span class=\"hljs-comment\" style=\"color: #a0a1a7; font-style: italic; line-height: 26px;\">// m3 是什么？ 下面 static 代码块，就是我们的 saveOrder 方法</span>\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> (Integer)<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.h.invoke(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>, m3, (Object[])<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>);\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (RuntimeException | Error var2) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> var2;\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (Throwable var3) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> UndeclaredThrowableException(var3);\n<span/>        }\n<span/>    }\n<span/>\n<span/>    ...\n<span/>\n<span/>    <span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">public</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">final</span> Class <span class=\"hljs-title\" style=\"color: #4078f2; line-height: 26px;\">getClass</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throws</span>  </span>{\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">return</span> (Class)<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">super</span>.h.invoke(<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">this</span>, m7, (Object[])<span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">null</span>);\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (RuntimeException | Error var2) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> var2;\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (Throwable var3) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> UndeclaredThrowableException(var3);\n<span/>        }\n<span/>    }\n<span/>\n<span/>    ...\n<span/>\n<span/>    <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">static</span> {\n<span/>        <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">try</span> {\n<span/>            m1 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"java.lang.Object\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"equals\"</span>, Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"java.lang.Object\"</span>));\n<span/>            m8 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"notify\"</span>);\n<span/>            m3 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"saveOrder\"</span>);\n<span/>            m2 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"java.lang.Object\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"toString\"</span>);\n<span/>            m5 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"wait\"</span>, Long.TYPE);\n<span/>            m4 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"wait\"</span>, Long.TYPE, Integer.TYPE);\n<span/>            m7 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"getClass\"</span>);\n<span/>            m9 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"notifyAll\"</span>);\n<span/>            m0 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"java.lang.Object\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"hashCode\"</span>);\n<span/>            m6 = Class.forName(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"net.lishaoy.proxydemo.service.impl.ImplKoreaOrderService\"</span>).getMethod(<span class=\"hljs-string\" style=\"color: #50a14f; line-height: 26px;\">\"wait\"</span>);\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (NoSuchMethodException var2) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> NoSuchMethodError(var2.getMessage());\n<span/>        } <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">catch</span> (ClassNotFoundException var3) {\n<span/>            <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">throw</span> <span class=\"hljs-keyword\" style=\"color: #a626a4; line-height: 26px;\">new</span> NoClassDefFoundError(var3.getMessage());\n<span/>        }\n<span/>    }\n<span/>}\n<span/></code></pre>\n<h2 id=\"使用注解、反射、动态代理完成简单的Retrofit\" data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; bmin-height: 32px; line-height: 32px; border-bottom: solid 1px #000000; color: #35b378; display: inline-block; border-bottom-width: 0px; border-bottom-style: solid; border-color: #35b378; padding-top: 5px; padding-right: 0.5em; padding-left: 0.5em; font-size: 23px; margin: 1em 0 0rem 0; padding: 0.5em 0; text-align: leftt; font-weight: bold;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">使用注解、反射、动态代理完成简单的Retrofit</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: black; margin: 1em 4px;\">由于文章篇幅已经很长，且使用注解、反射、动态代理完成简单的 Retrofit 的案例代码过多，所以就不再这里展示，感兴趣的小伙伴可以去 <a href=\"https://github.com/persilee/android_practice\" style=\"text-decoration: none; word-wrap: break-word; font-weight: bold; color: #35b378; border-bottom: 1px solid #35b378;\">GitHub</a> 查看源码。</p></section>","tags":["动态代理"],"categories":["Java"]},{"title":"Android：写了这么多代码，你真的理解泛型吗","url":"%2Fgenerics.html","content":"\n{% li https://cdn.lishaoy.net/generics/generics.png, Generics, Generics %}\n\n在我们的实际工作中 **泛型(Generics)** 是无处不在的，我们也写过不少，看到的更多，如，源码、开源框架... 随处可见，但是，我们真正理解泛型吗？理解多少呢？例如：`Box` 、`Box<Object>` 、`Box<?>` 、`Box<T>` 、`Box<? extends T>` 、`Box<? super T>` 之间的区别是什么？本篇文章将会对 **泛型(Generics)** 进行全面的解析，让我们对泛型有更深入的理解。\n\n<hr />\n\n<!-- more -->\n\n本篇文章的示例代码放在 [Github](https://github.com/persilee/android_practice) 上，所有知识点，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/generics/generic1.xmind.png \"\")\n\n</div>\n\n## Lucy 喜欢吃🍊（为什么要使用泛型）\n\n首先，通过一个盘子装水果小故事来打开我们的泛型探索之旅（我们为什么要使用泛型），故事场景如下：\n\n{% note info %} Lucy 到 James 家做客，James 需要招待客人，且知道 Lucy 喜欢吃橘子🍊，于是使用水果盘装满了🍊来招待客人 {% endnote %} \n\n这个场景怎么用代码表现呢，我们来新建几个类，如下：\n\nFruit：水果类\n\n```java\npackage entity;\n\npublic class Fruit {\n\n    @Override\n    public String toString() {\n\n        return \"This is Fruit\";\n    }\n}\n```\n\nApple：苹果类，继承水果类\n\n```java\npackage entity;\n\npublic class Apple extends Fruit {\n\n    @Override\n    public String toString() {\n\n        return \" Apple 🍎\";\n    }\n}\n```\n\nOrange：橘子类，继承水果类\n\n```java\npackage entity;\n\npublic class Orange extends Fruit {\n\n    @Override\n    public String toString() {\n\n        return \" Orange 🍊\";\n    }\n}\n```\n\nPlate：水果盘接口\n\n```java\npackage entity;\n\npublic interface Plate<T> {\n\n    public void set(T t);\n\n    public T get();\n\n}\n```\n\nFruitPlate：水果盘类，实现水果盘接口\n\n```java\npackage entity;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FruitPlate implements Plate {\n\n    private List items = new ArrayList(6);\n\n    @Override\n    public void set(Object o) {\n        items.add(o);\n    }\n\n    @Override\n    public Fruit get() {\n        int index = items.size() - 1;\n        if(index >= 0) return (Fruit) items.get(index);\n        return null;\n    }\n\n}\n```\n\nAiFruitPlate：智能水果盘，实现水果盘接口\n\n```java\npackage entity;\n\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * 使用泛型类定义\n * @param <T>\n */\npublic class AiFruitPlate<T> implements Plate<T> {\n\n    private List<T> fruits = new ArrayList<T>(6);\n    @Override\n    public void set(T t) {\n        fruits.add(t);\n    }\n\n    @Override\n    public T get() {\n        int index = fruits.size() - 1;\n        if(index >= 0) return fruits.get(index);\n        return null;\n    }\n}\n```\n\nPerson：人类\n\n```java\npackage entity;\n\npublic class Person {\n\n}\n```\n\nLucy：Lucy类，继承 Person 类，她拥有吃橘子的能力 `eat`\n\n```java\nimport entity.Orange;\nimport entity.Person;\n\npublic class Lucy extends Person {\n\n    public void eat(Orange orange) {\n\n        System.out.println(\"Lucy like eat\" + orange);\n\n    }\n\n}\n```\n\nJames：James类，继承 Person 类，他拥有获取水果盘的能力 `getAiFruitPlate`\n\n```java\nimport entity.*;\n\npublic class James extends Person {\n\n    public FruitPlate getPlate() {\n        return new FruitPlate();\n    }\n\n    public AiFruitPlate getAiFruitPlate() {\n        return new AiFruitPlate();\n    }\n\n    public void addFruit(FruitPlate fruitPlate, Fruit fruit) {\n        fruitPlate.set(fruit);\n    }\n\n    public void add(AiFruitPlate<Orange> aiFruitPlate, Orange orange) {\n        aiFruitPlate.set(orange);\n    }\n\n}\n```\n\nScenario：测试类\n\n```java\nimport entity.*;\n\npublic class Scenario {\n\n    public static void main(String[] args) {\n        scenario1();\n        scenario2();\n    }\n    //没有使用泛型\n    private static void scenario1() {\n        James james = new James();\n        Lucy lucy = new Lucy();\n        FruitPlate fruitPlate = james.getPlate(); // James 拿出水果盘\n        james.addFruit(fruitPlate,new Orange()); // James 往水果盘里装橘子\n        lucy.eat((Orange) fruitPlate.get()); // 需要转型为 Orange\n    }\n    //使用了泛型\n    private static void scenario2() {\n        James james = new James();\n        Lucy lucy = new Lucy();\n        AiFruitPlate<Orange> aiFruitPlate = james.getAiFruitPlate(); // James 拿出智能水果盘（知道你需要装橘子）\n        james.add(aiFruitPlate, new Orange()); // James 往水果盘里装橘子（如果，装的不是橘子会提醒）\n        lucy.eat(aiFruitPlate.get()); // 不需要转型\n    }\n\n}\n```\n\n运行结果，如下：\n\n```bash\nLucy like eat  Orange 🍊\nLucy like eat  Orange 🍊\n\nProcess finished with exit code 0\n```\n\n我们可以很明显的看出，使用了泛型之后，不需要类型转换，如果，我们把 `scenario1()` 方法，稍微改下，如下：\n\n```java\n    private static void scenario1() {\n        James james = new James();\n        Lucy lucy = new Lucy();\n        FruitPlate fruitPlate = james.getPlate();\n        james.addFruit(fruitPlate,new Apple()); //new Orange() 改成 new Apple()\n        lucy.eat((Orange) fruitPlate.get());\n    }\n```\n\n编译器不会提示有问题，但是运行之后报错，如下：\n\n```bash\nException in thread \"main\" java.lang.ClassCastException: entity.Apple cannot be cast to entity.Orange\n\tat Scenario.scenario1(Scenario.java:21)\n\tat Scenario.main(Scenario.java:7)\n\nProcess finished with exit code 1\n```\n\n而，我们把 `scenario2()` （使用了泛型）做出同样的修改，如下：\n\n```java\n    private static void scenario2() {\n        James james = new James();\n        Lucy lucy = new Lucy();\n        AiFruitPlate<Orange> aiFruitPlate = james.getAiFruitPlate();\n        james.add(aiFruitPlate, new Apple());\n        lucy.eat(aiFruitPlate.get());\n    }\n```\n\n编译器，会提示我们有错误，如图：\n\n<div style=\"width: 86%; margin:auto\">\n\n![error](https://cdn.lishaoy.net/generics/error.png \"error\")\n\n</div>\n\n通过以上案例，很清晰的知道我们为什么要使用泛型，如下：\n\n- 消除类型转换\n- 在编译时进行更强的类型检查\n- 增加代码的复用性\n\n## 泛型类(Generic Class)\n\n泛型类是通过类型进行参数化的类，这样说可能不是很好理解，之后我们用代码演示。\n\n### 普通类(A Simple Class)\n\n首先，我们来定义一个普通的类，如下：\n\n```java\npackage definegeneric;\n\npublic class SimpleClass {\n\n    private Object object;\n\n    public Object getObject() {\n        return object;\n    }\n\n    public void setObject(Object object) {\n        this.object = object;\n    }\n}\n```\n\n它的 `get` 、`set` 方法接受和返回一个 `Object`，所以，我们可以随意的传递任何类型。在编译时无法检查类型的使用，我们可以传入 `Integer` 且取出 `Integer`，也可以传入 `String` ，从而容易导致运行时错误。\n\n### 泛型类(A Generic Class)\n\n泛型类的定义格式如下：\n\n```java\nclass name<T1,T2,...,Tn>{\n  ...\n}\n```\n\n在类名之后的 `<>` 尖括号，称之为类型参数(类型变量)，定义一个泛型类就是使用 `<>` 给它定义类型参数：T1、T2 ... Tn。\n\n然后，我们把 `SimpleClass` 改成泛型类，如下：\n\n```java\npackage definegeneric;\n\npublic class GenericClass<T> {\n\n    private T t;\n\n    public T getT() {\n        return t;\n    }\n\n    public void setT(T t) {\n        this.t = t;\n    }\n}\n```\n\n所以的 `object` 都替换成为 `T`，类型参数可以定义为任何的非基本类型，如：class类型、interface类型、数组类型、甚至是另一个类型参数。\n\n\n### 调用和实例化泛型类型(nvoking and Instantiating a Generic Type)\n\n要想使用泛型类，必须执行泛型类调用，如：\n\n```java\nGenericClass<String> genericClass;\n```\n\n泛型类的调用类似于方法的调用(传递了一个参数)，但是，我们没有将参数传递给方法，而是，将类型参数(String)传递给了 `GenericClass` 类本身。\n\n此代码不会创建新的 `GenericClass` 对象，它只是声明了 `genericClass` 将保存对 `String` 的引用\n\n要实例化此类，要使用 `new` 关键字，如：\n\n```java\nGenericClass<String> genericClass = new GenericClass<String>();\n```\n\n或者\n\n```java\nGenericClass<String> genericClass = new GenericClass<>();\n```\n在 Java SE 7 或更高的版本中，编译器可以从上下文推断出类型参数，因此，可以使用 `<>` 替换泛型类的构造函数所需的类型参数\n\n### 类型参数命名规范(Type Parameter Naming Conventions)\n\n我们的类型参数是否一定要写成 `T` 呢，按照规范，类型参数名称是单个大写字母。\n\n常用的类型参数名称有，如：\n\n| 类型参数 |  含义     |\n|:------:| :-------: |\n| E      |  Element |\n| K      |  Key     |\n| N      |  Number  |\n| V      |  Value   |\n| S,U,V...  |  2nd, 3rd, 4th type   |\n\n### 多类型参数(Multiple Type Parameters)\n\n泛型类可以有多个类型参数，如：\n\n```java\npublic interface MultipleGeneric<K,V> {\n    public K getKey();\n    public V getValue();\n}\n\npublic class ImplMultipleGeneric<K, V> implements MultipleGeneric<K, V> {\n\n    private K key;\n    private V value;\n\n    public ImplMultipleGeneric(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public K getKey() {\n        return key;\n    }\n\n    @Override\n    public V getValue() {\n        return value;\n    }\n\n    public static void main(String[] args) {\n        MultipleGeneric<String, Integer> m1 = new ImplMultipleGeneric<String, Integer>(\"per\",6);\n        System.out.println(\"key:\" + m1.getKey() + \", value:\" + m1.getValue());\n\n        MultipleGeneric<String,String> m2 = new ImplMultipleGeneric<String, String>(\"per\",\"lsy\");\n        System.out.println(\"key:\" + m2.getKey() + \", value:\" + m2.getValue());\n    }\n}\n```\n\n输出结果：\n\n```bash\nkey:per, value:6\nkey:per, value:lsy\n\nProcess finished with exit code 0\n```\n\n如上代码，`new ImplMultipleGeneric` 将 `K` 实例化为 `String`，将 `V` 实例化为 `Integer` ，因此， `ImplMultipleGeneric` 构造函数参数类型分别为 `String` 和 `Integer`,在编写 `new ImplMultipleGeneric` 代码时，编辑器会自动填写 `<>` 的值\n\n由于，Java 编译器会从声明 `ImplMultipleGeneric` 推断出 `K` 和 `V` 的类型，因此我们可以简写为，如下：\n\n```java\nMultipleGeneric<String, Integer> m1 = new ImplMultipleGeneric<>(\"per\",6);\nSystem.out.println(\"key:\" + m1.getKey() + \", value:\" + m1.getValue());\n\nMultipleGeneric<String,String> m2 = new ImplMultipleGeneric<>(\"per\",\"lsy\");\nSystem.out.println(\"key:\" + m2.getKey() + \", value:\" + m2.getValue());\n```\n\n## 泛型接口(Generic Interface)\n\n定义泛型接口和定义泛型类相似(泛型类的技术可同用于泛型接口)，如下：\n\n```java\ninterface name<T1,T2,...,Tn>{\n  ...\n}\n```\n\n我们来定义一个泛型接口，如下：\n\n```java\npackage definegeneric;\n\npublic interface Genertor<T> {\n    public T next();\n}\n```\n\n那么，如何实现一个泛型接口呢，我们使用两种方式来实现泛型接口，如下：\n\n使用泛型类，实现泛型接口，且不指定确切的类型参数，所以，实现的 `next()` 返回值自动变成 `T`\n\n```java\npackage definegeneric.impl;\n\nimport definegeneric.Genertor;\n\npublic class ImplGenertor<T> implements Genertor<T> {\n\n    @Override\n    public T next() {\n        return null;\n    }\n}\n```\n\n使用普通类，实现泛型接口，且指定确切的类型参数为 `String`，所以，实现的 `next()` 返回值自动变成 `String`\n\n```java\npackage definegeneric.impl;\n\nimport definegeneric.Genertor;\n\npublic class ImplGenertor2 implements Genertor<String> {\n\n    @Override\n    public String next() {\n        return null;\n    }\n}\n```\n\n## 泛型方法(Generic Methods)\n\n泛型方法使用了类型参数的方法，泛型方法比较独立，可以声明在 普通类、泛型类、普通接口、泛型接口中。\n\n泛型方法定义格式，如下：\n\n```java\npublic <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2)\n```\n\n泛型方法的类型参数列表，在 `<>` 内，该列表必须在方法返回类型之前；对于静态的泛型方法，类型参数必须在 `static` 之后，方法返回类型之前。\n\n### 普通类里定义泛型方法(Generic methods in a Simple Class)\n\n我们在普通类中定义泛型方法，如下：\n\n```java\npackage methodgeneric;\n\npublic class MethodGeneric {\n\n    //定义一个泛型方法\n    public <T> T genericMethod(T...t) {\n        return t[t.length/2];\n    }\n\n    public static void main(String[] args) {\n        MethodGeneric methodGeneric = new MethodGeneric();\n        System.out.println(methodGeneric.<String>genericMethod(\"java\",\"dart\",\"kotlin\"));\n    }\n}\n```\n\n`methodGeneric.<String>genericMethod(\"java\",\"dart\",\"kotlin\")` 通常可以省略掉 `<>` 的内容，编译器将推断出所需的类型，和调用普通方法一样，如：\n\n```java\nmethodGeneric.genericMethod(\"java\",\"dart\",\"kotlin\")\n```\n\n### 泛型类里定义泛型方法(Generic methods in a Generic Class)\n\n我们在泛型类中定义泛型方法，如下：\n\n```java\npackage methodgeneric;\n\npublic class MethodGeneric2 {\n\n    static class Fruit{\n\n        @Override\n        public String toString() {\n            return \"fruit\";\n        }\n    }\n\n    static class Apple extends Fruit {\n\n        @Override\n        public String toString() {\n            return \"Apple\";\n        }\n    }\n\n    static class Person{\n\n        @Override\n        public String toString() {\n            return \"person\";\n        }\n    }\n    //定义了泛型类\n    static class ShowClass<T> {\n        //定义了普通方法\n        public void show1(T t){\n            System.out.println(t.toString());\n        }\n        //定义了泛型方法\n        public <E> void show2(E e) {\n            System.out.println(e.toString());\n        }\n        //定义了泛型方法\n        public <T> void show3(T t) {\n            System.out.println(t.toString());\n        }\n    }\n\n    public static void main(String[] args) {\n\n        Apple apple = new Apple();\n        Person person = new Person();\n\n        ShowClass<Fruit> showClass = new ShowClass<>();\n        showClass.show1(apple);   //可以放入 apple，因为 apple 是 fruit 的子类\n        showClass.show1(person); //此时，编译器会报错，因为 ShowClass<Fruit> 已经限定类型\n\n        showClass.show2(apple); //可以放入，泛型方法 <E> 可以是任何非基本类型\n        showClass.show2(person);//可以放入，泛型方法 <E> 可以是任何非基本类型\n\n        showClass.show3(apple); //可以放入，泛型方法 <T> 和泛型类中的 <T> 不是同一条 T，可以是任何非基本类型\n        showClass.show3(person); //可以放入，泛型方法 <T> 和泛型类中的 <T> 不是同一条 T，可以是任何非基本类型\n    }\n}\n```\n\n在泛型类中定义泛型方法时，需要注意，泛型类里的泛型参数 `<T>` 和泛型方法里的泛型参数 `<T>` 不是同一个。\n\n## 限定类型参数(Bounded Type Parameters)\n\n我们经常看到类似 `public <U extends Number> void inspect(U u)` 的代码，`<U extends Number>` 就是限制类型参数，只对数字进行操作且只接受 `Number` 或其子类。\n\n要声明一个限定的类型参数，需要在参数类型后加上 `extends` 关键字，然后是其上限类型(类或接口)。\n\n### 限定类型参数的泛型类(Generic Class of Bounded Type Parameters)\n\n泛型类也可以使用限定类型参数，如下：\n\n```java\npackage boundedgeneric;\n\npublic class BoundedClass<T extends Comparable> {\n\n    private T t;\n\n    public void setT(T t) {\n        this.t = t;\n    }\n\n    public T min(T outter){\n        if(this.t.compareTo(outter) > 0)\n            return outter;\n        else\n            return this.t;\n    }\n\n    public static void main(String[] args) {\n        BoundedClass<String> boundedClass = new BoundedClass<>(); //只能传入实现了 Comparable 接口的类型\n        boundedClass.setT(\"iOS\");\n        System.out.println(boundedClass.min(\"android\"));\n    }\n}\n```\n\n### 限定类型参数的泛型方法(Generic methods of Bounded Type Parameters)\n\n泛型方法也可以使用限定类型参数，如下：\n\n```java\npackage boundedgeneric;\n\npublic class BoundedGeneric {\n\n    public static <T extends Comparable> T min(T a, T b) {\n        if (a.compareTo(b) < 0)\n            return a;\n        else\n            return b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(BoundedGeneric.min(66,666));\n    }\n}\n```\n\n### 多重限定(Multiple Bounds)\n\n限定类型参数，也可以为多个限定，如：\n\n```java\n<T extends B1 & B2 & B3>\n```\n\n多个限定参数，如果其中有类，类必须放在第一个位置，例如：\n\n```java\ninterface A { ... }\ninterface B { ... }\nclass C { ... }\n\nclass D <T extends C & A & B>\n```\n\n## 泛型，继承和子类型(Generics, Inheritance, and Subtypes)\n\n在前面的盘子装水果小故事里我们已经创建好了一些水果类，如下：\n\n```java\npublic class Fruit {\n    @Override\n    public String toString() {\n        return \"This is Fruit\";\n    }\n}\n\npublic class Apple extends Fruit {\n    @Override\n    public String toString() {\n        return \" Apple 🍎\";\n    }\n}\n\npublic class Orange extends Fruit {\n    @Override\n    public String toString() {\n        return \" Orange 🍊\";\n    }\n}\n\npublic class QIOrange extends Orange {\n    @Override\n    public String toString() {\n        return \"qi Orange 🍊\";\n    }\n}\n```\n\n他们的继承关系，如图：\n\n<div style=\"width: 56%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/generics/fruit.png \"\")\n\n</div>\n\n众所周知，我们可以把子类赋值给父类，例如：\n\n```java\nApple apple = new Apple();\nFruit fruit = new Fruit();\nfruit = apple;\n```\n\n泛型也是如此，我们定义一个水果盘子的泛型类，如下：\n\n```java\npublic class FruitPlateGen<Fruit> implements Plate<Fruit> {\n\n    private List<Fruit> fruits = new ArrayList<>(6);\n\n    @Override\n    public void set(Fruit fruit) {\n        fruits.add(fruit);\n    }\n\n    @Override\n    public Fruit get() {\n        int index = fruits.size() - 1;\n        if(index >= 0) return fruits.get(index);\n        return null;\n    }\n}\n```\n\n所以，是 `Fruit` 的子类都可以放入水果盘里，如下：\n\n```java\nFruitPlateGen<Fruit> fruitPlate = new FruitPlateGen<Fruit>();\nfruitPlate.set(new Apple());\nfruitPlate.set(new Orange());\n```\n\n现在，James 可以获取盘子，如下：\n\n```java\npublic class James extends Person {\n    public FruitPlateGen getAiFruitPlateGen(FruitPlateGen<Fruit> plate) {\n        return new FruitPlateGen();\n    }\n}\n```\n\n如是，James 想获取放橘子的盘子，如下：\n\n```java\nJames james = new James();\njames.getAiFruitPlateGen(new FruitPlateGen<Fruit>()); //获取成功\njames.getAiFruitPlateGen(new FruitPlateGen<Orange>()); //编译器报错\n```\n\n虽然，`Orange` 是 `Fruit` 的子类，但是，`FruitPlateGen<Orange>` 不是 `FruitPlateGen<Fruit>` 的子类，所以，不能传递产生继承关系。\n\n<div style=\"width: 86%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/generics/object.png \"\")\n\n</div>\n\n### 泛型类和子类型(Generic Classes and Subtyping)\n\n我们可以通过继承(extends)或实现(implements)泛型类或接口，例如：\n\n```java\nprivate static class ExtendFruitPlate<Orange> extends FruitPlateGen<Fruit> {\n\n}\n```\n\n此时，`ExtendFruitPlate<Orange>` 就是 `FruitPlateGen<Fruit>` 的子类，James 再去拿盘子，就不会有错误提示：\n\n```java\njames.getAiFruitPlateGen(new ExtendFruitPlate<Orange>());\n```\n\n## 通配符(Wildcards)\n\n我们经常看到类似 `List<? extends Number>` 的代码，`?` 就是通配符，表示未知类型。\n\n### 上限通配符(Upper Bounded Wildcards)\n\n我们可以使用上限通配符来放宽对变量的限制，例如，上文提到的 `FruitPlateGen<Fruit>` 和 `FruitPlateGen<Orange>()` 就可以使用上限通配符。\n\n我们来改写一下 `getAiFruitPlateGen` 方法，如下：\n\n```java\npublic FruitPlateGen getAiFruitPlateGen2(FruitPlateGen<? extends Fruit> plate) {\n    return new FruitPlateGen();\n}\n```\n\n这时候，James 想获取放橘子的盘子，如下：\n\n```java\nJames james = new James();\njames.getAiFruitPlateGen2(new FruitPlateGen<Fruit>()); //获取成功\njames.getAiFruitPlateGen2(new FruitPlateGen<Orange>()); //获取成功\n```\n\n上限通配符 `FruitPlateGen<? extends Fruit>` 匹配 `Fruit` 和 `Fruit` 的任何子类型，所以，我们可以传入 `Apple`、`Orange` 都没有问题。\n\n### 下限通配符(Lower Bounded Wildcards)\n\n上限通配符将未知类型限定为该类型或其子类型，使用 `extends` 关键字，而下限通配符将未知类型限定为该类型或其父类型，使用 `super` 关键字。\n\n我们再来宽展一下 `getAiFruitPlateGen` 方法，如下：\n\n```java\npublic FruitPlateGen getAiFruitPlateGen3(FruitPlateGen<? super Apple> plate) {\n    return new FruitPlateGen();\n}\n```\n\n这时候，James 只能获取 `FruitPlateGen<Fruit>` 和 `FruitPlateGen<Apple>` 的盘子，如下：\n\n```java\nJames james = new James();\njames.getAiFruitPlateGen3(new FruitPlateGen<Apple>());\njames.getAiFruitPlateGen3(new FruitPlateGen<Fruit>());\n```\n\n下限通配符 `FruitPlateGen<? super Apple>` 匹配 `Apple` 和 `Apple` 的任何父类型，所以，我们可以传入 `Apple`、`Fruit`。\n\n### 通配符和子类型(Wildcards and Subtyping)\n\n在 [泛型，继承和子类型](https://h.lishaoy.net/generics.html#泛型，继承和子类型-Generics-Inheritance-and-Subtypes) 章节有讲到，虽然，`Orange` 是 `Fruit` 的子类，但是，`FruitPlateGen<Orange>` 不是 `FruitPlateGen<Fruit>` 的子类。但是，你可以使用通配符在泛型类或接口之间创建关系。\n\n我们再来回顾下 `Fruit` 的继承关系，如图：\n\n<div style=\"width: 56%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/generics/fruit.png \"\")\n\n</div>\n\n代码，如下：\n\n```java\nApple apple = new Apple();\nFruit fruit = apple;\n```\n\n这个代码是没有问题的，`Fruit` 是 `Apple` 的父类，所以，可以把子类赋值给父类。\n\n代码如下：\n\n```java\nList<Apple> apples = new ArrayList<>();\nList<Fruit> fruits = apples; // 编辑器报错\n```\n\n因为，`List<Apple>` 不是 `List<Fruit>` 的子类，实际上这两者无关，那么，它们的关系是什么？如图：\n\n<div style=\"width: 56%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/generics/List%3C%3F%3E.png \"\")\n\n</div>\n\n`List<Apple>` 和 `List<Fruit>` 的公共父级是 `List<?>`。\n\n我们可以使用上下限通配符，在这些类之间创建关系，如下：\n\n```java\nList<Apple> apples = new ArrayList<>();\nList<? extends Fruit> fruits1 = apples; // OK\nList<? super Apple> fruits2 = apples; // OK\n```\n\n下图展示了上下限通配符声明的几个类的关系，如图：\n\n<div style=\"width: 56%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/generics/List%3C%3F%3E1.png \"\")\n\n</div>\n\n### PECS原则(Producer extends Consumer super)\n\n在上文中有 `FruitPlateGen` 水果盘子的类，我们尝试使用上下限通配符来实例化水果盘，代码如下：\n\n```java\nApple apple = new Apple();\nOrange orange = new Orange();\nFruit fruit = new Fruit();\n\nFruitPlateGen<? extends Fruit> fruitPlateGen = new FruitPlateGen<>();\nfruitPlateGen.set(apple); // error\nfruitPlateGen.set(orange); // error\nfruitPlateGen.set(fruit); // error\nFruit fruit1 = fruitPlateGen.get(); // OK\nOrange orange1 = fruitPlateGen.get(); // error\nApple apple1 = fruitPlateGen.get(); // error\n```\n\n上限通配符无法 `set` 数据，但是，可以 `get` 数据且只能 `get` 到其上限 `Fruit`，所以，上限通配符可以安全的访问数据。\n\n在来看一下代码，如下：\n\n```java\nFruitPlateGen<? super Apple> fruitPlateGen1 = new FruitPlateGen<>();\nfruitPlateGen1.set(apple); // OK\nfruitPlateGen1.set(orange); // error\nfruitPlateGen1.set(fruit); // error\nObject object = fruitPlateGen1.get(); // OK\nFruit fruit2 = fruitPlateGen1.get(); // error\nApple apple2 = fruitPlateGen1.get(); // error\nOrange orange2 = fruitPlateGen1.get(); // error\n```\n\n下限通配符可以且只能 `set` 其下限 `Apple`，也可以 `get` 数据，但只能用 `Object` 接收(因为Object是所有类型的父类，这是一个特例)，所以，下限通配符可以安全的写入数据。\n\n所以，在使用上下限通配符时，可以遵循以下准则：\n\n- 如果你只需要从集合中获得类型T , 使用<? extends T>通配符\n- 如果你只需要将类型T放到集合中, 使用<? super T>通配符\n- 如果你既要获取又要放置元素，则不使用任何通配符\n\n\n## 类型擦除(Type Erasure)\n\nJava 语言使用类型擦除机制实现了泛型，类型擦除机制，如下：\n\n- 编译器会把所有的类型参数替换为其边界(上下限)或 Object，因此，编译出的字节码中只包含普通类、接口和方法。\n- 在必要时插入类型转换，已保持类型安全\n- 生成桥接方法以在扩展泛型类时保持多态性\n\n### 泛型类型的擦除(Erasure of Generic Types)\n\nJava 编译器在擦除过程中，会擦除所有类型参数，如果类型参数是有界的，则替换为第一个边界，如果是无界的，则替换为 Object。\n\n我们定义了一个泛型类，代码如下：\n\n```java\npublic class Node<T> {\n  private T data;\n  private Node<T> next;\n  public Node(T data, Node<T> next) { this.data = data;\n  this.next = next;\n}\n  public T getData() { return data; }\n  ...\n}\n```\n\n由于类型参数 `T` 是无界的，因此，Java 编译器将其替换为 Object，如下：\n\n```java\npublic class Node {\n  private Object data;\n  private Node next;\n  public Node(Object data, Node next) { this.data = data;\n  this.next = next;\n}\n  public Object getData() { return data; }\n  ...\n}\n```\n\n我们再来定义一个有界的泛型类，代码如下：\n\n```java\npublic class Node<T extends Comparable<T>> {\n  private T data;\n  private Node<T> next;\n  public Node(T data, Node<T> next) { this.data = data;\n  this.next = next;\n}\n  public T getData() { return data; }\n  ...\n}\n```\n\nJava 编译器其替换为第一个边界 `Comparable`，如下：\n\n```java\npublic class Node {\n  private Comparable data;\n  private Node next;\n  public Node(Comparable data, Node next) { this.data = data;\n  this.next = next;\n}\n  public Comparable getData() { return data; }\n  ...\n}\n```\n\n### 泛型方法的擦除(Erasure of Generic Methods)\n\nJava 编译器同样会擦除泛型方法中的类型参数，例如：\n\n```java\npublic static <T> int count(T[] anArray, T elem) {\n  int cnt = 0;\n  for (T e : anArray)\n}\n```\n\n由于 `T` 是无界的，因此，Java 编译器将其替换为 Object，如下：\n\n```java\npublic static int count(Object[] anArray, Object elem) {\n  int cnt = 0;\n  for (Object e : anArray) if (e.equals(elem))\n}\n```\n\n如下代码：\n\n```java\nclass Shape {  ...  }\nclass Circle extends Shape {  ...  } \nclass Rectangle extends Shape {  ...  }\n```\n\n有一个泛型方法，如下：\n\n```java\npublic static<T extends Shape> void draw(T shape){\n  ...\n}\n```\n\nJava 编译器将用第一个边界 `Shape` 替换 `T`，如下：\n\n```java\npublic static void draw(Shape shape){\n  ...\n}\n```\n\n### 桥接方法(Bridge Methods)\n\n有时类型擦除会导致无法预料的情况，如下：\n\n```java\npublic class Node<T> {\n  public T data;\n  public Node(T data) { this.data = data; }\n  public void setData(T data) { \n    System.out.println(\"Node.setData\"); \n    this.data = data;\n  } \n}\npublic class MyNode extends Node<Integer> {\n  public MyNode(Integer data) { super(data); }\n  public void setData(Integer data) { \n    System.out.println(\"MyNode.setData\"); \n    super.setData(data);\n  } \n}\n```\n\n类型擦除后，代码如下：\n\n```java\npublic class Node {\n  public Object data;\n  public Node(Object data) { this.data = data; }\n  public void setData(Object data) { \n    System.out.println(\"Node.setData\"); \n    this.data = data;\n  } \n}\npublic class MyNode extends Node {\n  public MyNode(Integer data) { super(data); }\n  public void setData(Integer data) { \n    System.out.println(\"MyNode.setData\");\n    super.setData(data);\n  } \n}\n```\n\n此时，Node 的方法变为 `setData(Object data)` 和 MyNode 的 `setData(Integer data)` 不会覆盖。\n\n为了解决此问题并保留泛型类型的多态性，Java 编译器会生成一个桥接方法，如下：\n\n```java\nclass MyNode extends Node {\n  // 生成的桥接方法\n  public void setData(Object data) {\n      setData((Integer) data);\n  }\n  public void setData(Integer data) { \n    System.out.println(\"MyNode.setData\"); \n    super.setData(data);\n  }\n  ...\n}\n```\n\n这样 Node 的方法 `setData(Object data)` 和 MyNode 生成的桥接方法 `setData(Object data)` 可以完成方法的覆盖。\n\n\n## 泛型的限制(Restrictions on Generics)\n\n为了有效的使用泛型，需要考虑以下限制：\n\n- 无法实例化具有基本类型的泛型类型\n- 无法创建类型参数的实例\n- 无法声明类型为类型参数的静态字段\n- 无法将Casts或instanceof与参数化类型一起使用\n- 无法创建参数化类型的数组\n- 无法创建，捕获或抛出参数化类型的对象\n- 无法重载每个重载的形式参数类型都擦除为相同原始类型的方法\n\n### 无法实例化具有基本类型的泛型类型\n\n代码如下：\n\n```java\nclass Pair<K, V> {\n  private K key;\n  private V value;\n  public Pair(K key, V value) { \n    this.key = key;\n    this.value = value; \n  }\n  ...\n}\n```\n\n创建对象时，不能使用基本类型替换参数类型：\n\n```java\nPair<int, char> p = new Pair<>(8, 'a'); // error\n```\n\n### 无法创建类型参数的实例\n\n代码如下：\n\n```java\npublic static <E> void append(List<E> list) {\n   E elem = new E(); // error \n   list.add(elem);\n}\n```\n\n### 无法声明类型为类型参数的静态字段\n\n代码如下：\n\n```java\npublic class MobileDevice<T> {\n  private static T os; // error\n  ...\n}\n```\n\n类的静态字段是所有非静态对象共享的变量，因此，不允许使用类型参数的静态字段。\n\n### 无法将Casts或instanceof与参数化类型一起使用\n\n代码如下：\n\n```java\npublic static <E> void rtti(List<E> list) {\n  if (list instanceof ArrayList<Integer>) { // error\n    ...\n  } \n}\n```\n\nJava 编译器会擦除所有类型参数，所有，无法验证在运行时使用的参数化类型。\n\n### 无法创建参数化类型的数组\n\n代码如下：\n\n```java\nList<Integer>[] arrayOfLists = new List<Integer>[2]; // error\n```\n\n### 无法创建，捕获或抛出参数化类型的对象\n\n代码如下：\n\n```java\nclass MathException<T> extends Exception {  ...  } // error\nclass QueueFullException<T> extends Throwable{ ... } // error\n```\n\n### 无法重载每个重载的形式参数类型都 擦除为相同原始类型的方法\n\n代码如下：\n\n```java\npublic class Example {\n  public void print(Set<String> strSet) { }\n  public void print(Set<Integer> intSet) { }\n}\n```\n\n`print(Set<String> strSet)` 和 `print(Set<Integer> intSet)` 在类型擦除后是完全相同的类型，所以，无法重载。","tags":["泛型"],"categories":["Java"]},{"title":"Flutter(Flare) 最有趣用户交互动画没有之一","url":"%2Fflutter-flare.html","content":"\n{% li https://cdn.lishaoy.net/flutterFlare/flutter-flare-cover.png, Flutter Flare, Flutter Flare %}\n\n2019年12月12日，**Flutter** 在 **Flutter Interact '19** 上发布了如何使用 **Rive** 和 **Flutter** 制作动态可交互的动画经验分享，我看了之后，觉得非常有趣，因此，写了3个小 demo，把它写成文章记录分享给大家。\n\n<hr />\n\n<!-- more -->\n\n## 名词理解\n\n首先，我们来理解几个名词，不然后续文章，可能看着有些晕，如下：\n\n- Flare：是 Flutter 的动画插件名称，完整名称是 `flare_flutter` 我们要在 `pubspec.yaml` 文件里引入\n- Rive：是制作 Flare 动画的[网站](https://rive.app/about-rive)，它既是一个网站也是制作工具，在此网站里有很多用户分享 Flare 动画供我们下载使用、Flare API使用文档、制作 Flare 动画的视频教程（大家也可以通过学习制作自己喜欢的动画）等\n\n\n## 交互动画预览\n\n### 登录交互动画\n\n登录交互动画，包含如下6种动画：\n\n- idle：无任何操作时的状态（熊的身体会上下浮动和眨眼睛）\n- test：当我们在 email 输入框中输入时的状态（熊会看向输入框，且随着你输入的长度旋转头部）\n- hands_up：当我们在 password 输入框中输入时的状态 （熊会用手蒙上眼睛）\n- hands_down：当我们在 password 输入框输入完成时的状态 （熊会放下双手）\n- fail：当我们登录失败时的状态（熊会做出难过的表情）\n- success：当我们登录成功时的状态（熊会做出高兴的表情）\n\n以上6种状态，可以在 **Rive** 网站查看具体动画，[点击进入查看](https://rive.app/a/castor/files/flare/teddy-with-hands/preview)\n\n下面，我们来看看案例里实现动画效果\n\nidle：无任何操作时的状态，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/sign-in.gif \"idle\")\n\n</div>\n\ntest：当我们在 email 输入框中输入时的状态，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/email.gif \"test\")\n\n</div>\n\nhands_up：当我们在 password 输入框中输入时的状态，hands_down：当我们在 password 输入框输入完成时的状态，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/password.gif \"hands_up & hands_down\")\n\n</div>\n\nfail：当我们登录失败时的状态，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/failure.gif \"fail\")\n\n</div>\n\nsuccess：当我们登录成功时的状态，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/successful.gif \"success\")\n\n</div>\n\n### Button交互动画\n\nbutton 交互动画，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/button.gif \"button\")\n\n</div>\n\n### Menu交互动画\n\nmenu 交互动画，如图：\n\n<div style=\"width: 100%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/flutterFlare/menu.gif \"menu\")\n\n</div>\n\n以上所有动画，也可以 [点击观看视频](https://www.bilibili.com/video/BV14p4y1U7YN/)\n\n## 代码实现\n\n如何用代码实现，分为以下2个步骤：\n\n- 引入插件和资源：引入相关插件 `flare_flutter` 、 `smart_flare`\n- 编写代码：编写相关代码\n\n### 引入插件和资源\n\n引入插件和资源，如下：\n\n```bash\ndependencies:\n  ...\n  flare_flutter: ^2.0.4  # flare 插件\n  smart_flare: any  # 对 flare API进行封装的插件，使用少量的代码即可实现交互动画\n  ...\n\nassets:\n  ...\n  - assets/Teddy.flr\n  - assets/button-animation.flr\n  - assets/slideout-menu.flr\n  ...\n```\n\n### 编写代码\n\n由于，登录交互动画稍复杂一些，在此就不展示实现的代码，如感兴趣，可[移步GitHub查看源码](https://github.com/persilee/flutter_pro/blob/master/lib/demo/flare_demo/flare_sign_in_demo.dart)\n\n### Button交互动画代码实现\n\nbutton 交互动画代码实现如下：\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:smart_flare/actors/smart_flare_actor.dart';\nimport 'package:smart_flare/models.dart';\n\nclass FlareButtonDemo extends StatefulWidget {\n  @override\n  _FlareButtonDemoState createState() => _FlareButtonDemoState();\n}\n\nclass _FlareButtonDemoState extends State<FlareButtonDemo> {\n  @override\n  Widget build(BuildContext context) {\n    var animationWidth = 295.0;\n    var animationHeight = 251.0;\n    var animationWidthThirds = animationWidth / 3;\n    var halfAnimationHeight = animationHeight / 2;\n\n    var activeAreas = [\n\n      ActiveArea(\n        area: Rect.fromLTWH(0, 0, animationWidthThirds, halfAnimationHeight),\n        debugArea: false,\n        guardComingFrom: ['deactivate'],\n        animationName: 'camera_tapped',\n      ),\n\n      ActiveArea(\n          area: Rect.fromLTWH(animationWidthThirds, 0, animationWidthThirds, halfAnimationHeight),\n          debugArea: false,\n          guardComingFrom: ['deactivate'],\n          animationName: 'pulse_tapped'),\n\n      ActiveArea(\n          area: Rect.fromLTWH(animationWidthThirds * 2, 0, animationWidthThirds, halfAnimationHeight),\n          debugArea: false,\n          guardComingFrom: ['deactivate'],\n          animationName: 'image_tapped'),\n\n      ActiveArea(\n          area: Rect.fromLTWH(0, animationHeight / 2, animationWidth, animationHeight / 2),\n          debugArea: false,\n          animationsToCycle: ['activate', 'deactivate'],\n          onAreaTapped: () {\n            print('Button tapped!');\n          })\n\n    ];\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Flare Button Demo'),\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n              begin: Alignment.topCenter,\n              end: Alignment.bottomCenter,\n              colors: [\n                Color(0x3fffeb3b),\n                Colors.orange,\n              ]),\n        ),\n        child: Align(\n          alignment: Alignment.bottomCenter,\n          child: SmartFlareActor(\n            width: animationWidth,\n            height: animationHeight,\n            filename: 'assets/button-animation.flr',\n            startingAnimation: 'deactivate',\n            activeAreas: activeAreas,\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n### Menu交互动画代码实现\n\nmenu 交互动画代码实现，如下：\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:smart_flare/smart_flare.dart';\n\nclass FlareSidebarMenuDemo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    print(MediaQuery.of(context).size.height);\n    return Scaffold(\n      body: Container(\n        child: Align(\n          alignment: Alignment.centerRight,\n          child: PanFlareActor(\n            width: MediaQuery.of(context).size.width / 2.366,\n            height: MediaQuery.of(context).size.height,\n            filename: 'assets/slideout-menu.flr',\n            openAnimation: 'open',\n            closeAnimation: 'close',\n            direction: ActorAdvancingDirection.RightToLeft,\n            threshold: 20.0,\n            reverseOnRelease: true,\n            completeOnThresholdReached: true,\n            activeAreas: [\n              RelativePanArea(\n                  area: Rect.fromLTWH(0, .7, 1.0, .3), debugArea: false),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n以上3个交互动画案例的源码，放在了我2年前写的一个 [Flutter案例](https://github.com/persilee/flutter_pro) 的项目里了，此项目现已维护起来，以后会长期更新，感兴趣的小伙伴可以收藏，没事时来看看可能会有新的发现 😲\n\n此篇文章到此结束，下篇文章计划给大家分享，Flutter 里的路由，会总结归纳所有的路由使用方法，最后来封装一个优秀的路由管理类。","tags":["Flare"],"categories":["Dart"]},{"title":"FutureBuilder and StreamBuilder 优雅的构建高质量项目","url":"%2FfutrueBuilder-streamBuilder.html","content":"\n{% li https://cdn.lishaoy.net/fureBuilderStreamBuilder/cover.png, Flutter, Flutter %}\n\n本篇文章将介绍从 `setState` 开始，到 `futureBuilder` 、 `streamBuilder` 来优雅的构建你的高质量项目，而不引发 `setState` 带来的副作用，如对文章感兴趣，请 [点击查看源码](https://github.com/persilee/flutter_pro)。\n\n<hr />\n\n<!-- more -->\n\n## 基础的setState更新数据\n\n首先，我们使用基础的 `StatefulWidget` 来创建页面，如下：\n\n```dart\nclass BaseStatefulDemo extends StatefulWidget {\n  @override\n  _BaseStatefulDemoState createState() => _BaseStatefulDemoState();\n}\n\nclass _BaseStatefulDemoState extends State<BaseStatefulDemo> {\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n然后，我们使用 `Future` 来创建一些数据，来模拟网络请求，如下：\n\n```dart\n  Future<List<String>> _getListData() async {\n    await Future.delayed(Duration(seconds: 1)); // 1秒之后返回数据\n    return List<String>.generate(10, (index) => '$index content');\n  }\n```\n\n在 `initState()` 方法中调用 `_getListData()` 来初始化数据，如下：\n\n```dart\n  List<String> _pageData = List<String>();\n\n  @override\n  void initState() {\n    _getListData().then((data) => setState(() {\n              _pageData = data;\n            }));\n    super.initState();\n  }\n```\n\n使用 `ListView.builder` 来处理这些数据构建UI，如下：\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Base Stateful Demo'),\n      ),\n      body: ListView.builder(\n        itemCount: _pageData.length,\n        itemBuilder: (buildContext, index) {\n          return Column(\n            children: <Widget>[\n              ListTile(\n                title: Text(_pageData[index]),\n              ),\n              Divider(),\n            ],\n          );\n        },\n      ),\n    );\n  }\n```\n\n最后，我们就可以看到界面了 😎 ，如图：\n\n<div style=\"width: 36%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/fureBuilderStreamBuilder/list-data.png \"list data\")\n\n</div>\n\n当然，你也可以将 **UI** 显示单独提取成一个方法，方便后期维护，使代码层次更清晰，如下：\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Base Stateful Demo'),\n      ),\n      body: ListView.builder(\n        itemCount: _pageData.length,\n        itemBuilder: (buildContext, index) {\n          return getListDataUi(int index);\n        },\n      ),\n    );\n  }\n\n  Widget getListDataUi(int index) {\n    return Column(\n                children: <Widget>[\n                  ListTile(\n                    title: Text(_pageData[index]),\n                  ),\n                  Divider(),\n                ],\n              );\n  }\n```\n\n继续，我们来完善它，正常从后端获取数据，后端应该会给我们返回不同信息，根据这些信息需要处理不同的状态，如：\n\n- BusyState(加载中)：我们在界面上显示一个加载指示器\n- DataFetchedState(数据加载完成)：我们延迟2秒，来模拟数据加载完成\n- ErrorState(错误)：显示错误提示\n- NoData(没有数据)：请求成功，但没有数据，显示提示\n\n先来处理 **BusyState** 加载指示器，如下：\n\n```dart\nbool get _fetchingData => _pageData == null; // 判断数据是否为空\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Base Stateful Demo'),\n      ),\n      body: _fetchingData\n          ? Center(\n              child: CircularProgressIndicator( // 加载指示器 \n                valueColor: AlwaysStoppedAnimation<Color>(Colors.yellow), // 设置指示器颜色\n                backgroundColor: Colors.yellow[100],  // 设置背景色\n              ),\n            )\n          : ListView.builder(\n              itemCount: _pageData.length,\n              itemBuilder: (buildContext, index) {\n                return getListDataUi(index);\n              },\n            ),\n    );\n  }\n```\n\n效果如图：\n\n<div style=\"width: 36%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/fureBuilderStreamBuilder/indicator.png \"indicator\")\n\n</div>\n\n接着，我们来处理 **ErrorState** ，我给 `_getListData()` 添加 `hasError` 参数来模拟后端返回的错误，如下\n\n```dart\n  Future<List<String>> _getListData({bool hasError = false}) async {\n    await Future.delayed(Duration(seconds: 1)); // 1秒之后返回数据\n\n    if (hasError) {\n      return Future.error('获取数据出现问题，请再试一次');\n    }\n\n    return List<String>.generate(10, (index) => '$index content');\n  }\n```\n\n然后，在 `initState()` 方法中捕获异常更新数据，如下：\n\n```dart\n  @override\n  void initState() {\n    _getListData(hasError: true)\n        .then((data) => setState(() {\n              _pageData = data;\n            }))\n        .catchError((error) => setState(() {\n              _pageData = [error];\n            }));\n    super.initState();\n  }\n```\n\n效果如图( *当然这里可以使用一个错误页面来展示* )：\n\n<div style=\"width: 36%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/fureBuilderStreamBuilder/error.png \"error\")\n\n</div>\n\n接着，我们来处理 **NoData** ，我给 `_getListData()` 添加 `hasData` 参数来模拟后端返回空数据，如下：\n\n```dart\n  Future<List<String>> _getListData(\n      {bool hasError = false, bool hasData = true}) async {\n    await Future.delayed(Duration(seconds: 1));\n\n    if (hasError) {\n      return Future.error('获取数据出现问题，请再试一次');\n    }\n\n    if (!hasData) {\n      return List<String>();\n    }\n\n    return List<String>.generate(10, (index) => '$index content');\n  }\n```\n\n然后，在 `initState()` 方法更新数据，如下：\n\n```dart\n  @override\n  void initState() {\n    _getListData(hasError: false, hasData: false)\n        .then((data) => setState(() {\n              if (data.length == 0) {\n                data.add('No data fount');\n              }\n              _pageData = data;\n            }))\n        .catchError((error) => setState(() {\n              _pageData = [error];\n            }));\n    super.initState();\n  }\n```\n\n效果如图：\n\n<div style=\"width: 36%; margin:auto\">\n\n![no-shadow](https://cdn.lishaoy.net/fureBuilderStreamBuilder/no-data.png \"error\")\n\n</div>\n\n{% note success %}\n这就是通过 `setState()` 来更新数据，是不是很简单，通常情况下我们这么使用是没什么问题，但是，如果我们的页面足够复杂，要处理的状态足够多，我们需要使用更多的 `setState()` ，意味着我们要更多的代码来更新数据，而且，我们每次 `setState()` 的时候 `build()` 方法就会重新执行一次( *这就是上文提到的副作用* )。\n\n其实，**Flutter** 已经提供了更优雅的方式来更新我们的数据及处理状态，它就是我们接下来要介绍的 `futureBuilder`。\n{% endnote %}\n\n## FutureBuilder\n\n`FutureBuilder` 通过 **future:** 参数可以接收一个 `Future` ，并且通过 **builder:** 参数来构建 **UI** ，**builder:** 参数是一个函数，它提供了一个 `snapshot` 参数里面带着我们需要的状态和数据。\n\n接下来，我们将上面的 `StatefulWidget` 改成 `StatelessWidget` ，并使用 `FutureBuilder` 替换，如下:\n\n```dart\nclass FutureBuilderDemo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Future Builder Demo'),\n      ),\n      body: FutureBuilder(\n        future: _getListData(),\n        builder: (buildContext, snapshot) {\n          if (snapshot.hasError) {  // FutureBuilder 已经给我们提供好了 error 状态\n            return _getInfoMessage(snapshot.error);\n          }\n\n          if (!snapshot.hasData) { // FutureBuilder 已经给我们提供好了空数据状态\n            return Center(\n              child: CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Colors.yellow),\n                backgroundColor: Colors.yellow[100],\n              ),\n            );\n          }\n          var listData = snapshot.data;\n          if (listData.length == 0) {\n            return _getInfoMessage('No data found');\n          }\n\n          return ListView.builder(\n            itemCount: listData.length,\n            itemBuilder: (buildContext, index) {\n              return Column(\n                children: <Widget>[\n                  ListTile(\n                    title: Text(listData[index]),\n                  ),\n                  Divider(),\n                ],\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n\n  ...\n```\n\n通过查看源码，我们可以了解的 `FutureBuilder` 已经给我处理好了一些基本状态，如图\n\n<div style=\"width: 66%; margin:auto\">\n\n![snapshot](https://cdn.lishaoy.net/fureBuilderStreamBuilder/snapshot.png \"snapshot\")\n\n</div>\n\n我们使用 `_getInfoMessage()` 方法来处理状态提示，如下：\n\n```\n  Widget _getInfoMessage(String msg) {\n    return Center(\n      child: Text(msg),\n    );\n  }\n```\n\n就这样我们不使用任何一个 `setState()` 就能完成和上面一样的效果，并且不会产生副作用，是不是很给力 💪。\n\n{% note info %}\n但是，它并不是完美的，比如，我们想刷新数据，我们需要重新调用 `_getListData()` 方法，结果它并没有刷新。\n{% endnote %}  \n\n## StreamBuilder\n\n`StreamBuilder` 通过 **stream:** 参数可以接收一个 `stream` ，同样，通过 **builder:** 参数来构建 **UI** ，和 `futureBuilder` 用法类似，唯一的好处就是，我们可以随意控制 `stream` 的输入输出，添加任何的状态来更新指定状态下的 **UI** 。\n\n首先，我们使用 `enum` 来表示我们的状态，在文件的头部添加它，如下：\n\n```dart\nenum StreamViewState { Busy, DataRetrieved, NoData }\n```\n\n接着，使用 `StreamController` 创建一个流控制器，把 `FutureBuilder` 替换成 `StreamBuilder` ，把 **future:** 参数 改成 **stream:** 参数，如下：\n\n```dart\n\nfinal StreamController<StreamDemoState> _stateController = StreamController<StreamDemoState>();\n\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      ...\n\n      body: StreamBuilder(\n        stream: model.homeState,\n        builder: (buildContext, snapshot) {\n          if (snapshot.hasError) {\n            return _getInfoMessage(snapshot.error);\n          }\n          // 使用 枚举的 Busy 来更新数据\n          if (!snapshot.hasData || StreamViewState.Busy) {\n            return Center(\n              child: CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Colors.yellow),\n                backgroundColor: Colors.yellow[100],\n              ),\n            );\n          }\n          //使用 枚举的 NoData 来更新数据\n          if (listItems.length == StreamViewState.NoData) {\n            return _getInfoMessage('No data found');\n          }\n\n          return ListView.builder(\n            itemCount: listItems.length,\n            itemBuilder: (buildContext, index) {\n              return Column(\n                children: <Widget>[\n                  ListTile(\n                    title: Text(listItems[index]),\n                  ),\n                  Divider(),\n                ],\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n```\n\n只是新增了枚举值来判断是否需要更新数据，其他基本保持不变。\n\n接下来，我需要修改 `_getListData()` 方法，使用流控制器添加状态及数据，如下：\n\n```dart\n  Future _getListData({bool hasError = false, bool hasData = true}) async {\n    _stateController.add(StreamViewState.Busy);\n    await Future.delayed(Duration(seconds: 2));\n\n    if (hasError) {\n      return _stateController.addError('error'); // 往 stream 里新增 error 数据\n    }\n\n    if (!hasData) {\n      return _stateController.add(StreamViewState.NoData); // 往 stream 里新增无数据状态\n    }\n\n    _listItems = List<String>.generate(10, (index) => '$index content');\n    _stateController.add(StreamViewState.DataRetrieved); // 往 stream 里新增数据获取完成状态\n  }\n```\n\n此时我们并没有返回数据，所以我们需要创建 `listItems` 存储数据，然后把 `StatelessWidget` 改成 `StatefulWidget` ，以便我们根据 `stream` 的输出来更新数据，这个转换非常方便，**VS Code** 编辑器可以使用 `Option + Shift + R` （Mac）或者 `Ctrl + Shift + R` (Win)快捷键 ，**Android Studio** 使用`Option + Enter` 快捷键，之后在 `initState()` 方法中初始化数据，如下：\n\n```dart\nList<String> listItems;\n\n@override\nvoid initState() {\n  _getListData();\n  super.initState();\n}\n```\n\n到这里我们已经解决了 `FutureBuilder` 的局限性问题，我们可以新增一个 `FloatingActionButton` 来刷新数据，如下：\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Stream Builder Demo'),\n      ),\n      floatingActionButton: FloatingActionButton(\n        backgroundColor: Colors.yellow,\n        child: Icon(\n          Icons.cached,\n          color: Colors.black87,\n        ),\n        onPressed: () {\n          model.dispatch(FetchData());\n        },\n      ),\n      body: StreamBuilder(\n\n        ...\n        \n      ),\n    );\n  }\n```\n\n现在，点击 `FloatingActionButton` 加载指示器已经显示，但是，我们的 `listItems` 数据并没真正的更新，点击 `FloatingActionButton` 只是更新的加载状态而已，而且我们的业务逻辑代码和 **UI** 代码还在同一个文件中，很显然，他们已经解耦，所以，我们可以继续完善它，将业务逻辑代码和 **UI** 代码分离出来。\n\n## 分离业务逻辑代码和 **UI** 代码\n\n我们可以把处理 `stream` 的代码抽离成一个类，如下：\n\n```dart\nimport 'dart:async';\nimport 'dart:math';\n\nimport 'package:pro_flutter/demo/stream_demo/stream_demo_event.dart';\nimport 'package:pro_flutter/demo/stream_demo/stream_demo_state.dart';\n\n\nenum StreamViewState { Busy, DataRetrieved, NoData }\n\nclass StreamDemoModel {\n  final StreamController<StreamDemoState> _stateController = StreamController<StreamDemoState>();\n\n  List<String> _listItems;\n\n  Stream<StreamDemoState> get streamState => _stateController.stream;\n\n  void dispatch(StreamDemoEvent event){\n    print('Event dispatched: $event');\n    if(event is FetchData) {\n      _getListData(hasData: event.hasData, hasError: event.hasError);\n    }\n  }\n\n  Future _getListData({bool hasError = false, bool hasData = true}) async {\n    _stateController.add(BusyState());\n    await Future.delayed(Duration(seconds: 2));\n\n    if (hasError) {\n      return _stateController.addError('error');\n    }\n\n    if (!hasData) {\n      return _stateController.add(DataFetchedState(data: List<String>()));\n    }\n\n    _listItems = List<String>.generate(10, (index) => '$index content');\n    _stateController.add(DataFetchedState(data: _listItems));\n  }\n}\n```\n\n然后，把状态也封装成一个文件且将数据和状态关联，如下：\n\n```dart\nclass StreamDemoState{}\n\nclass InitializedState extends StreamDemoState {}\n\nclass DataFetchedState extends StreamDemoState {\n  final List<String> data;\n\n  DataFetchedState({this.data});\n\n  bool get hasData => data.length > 0;\n}\n\nclass ErrorState extends StreamDemoState{}\n\nclass BusyState extends StreamDemoState{}\n```\n\n再封装一个事件文件，如下：\n\n```dart\nclass StreamDemoEvent{}\n\nclass FetchData extends StreamDemoEvent{\n  final bool hasError;\n  final bool hasData;\n\n  FetchData({this.hasError = false, this.hasData = true});\n\n  @override\n  String toString() {\n    return 'FetchData { hasError: $hasError, hasData: $hasData }';\n  }\n}\n```\n\n最后，我们 **UI** 部分的代码如下：\n\n```dart\nclass _StreamBuilderDemoState extends State<StreamBuilderDemo> {\n  final model = StreamDemoModel(); // 创建 model\n\n  @override\n  void initState() {\n    model.dispatch(FetchData(hasData: true)); // 获取 model 里的数据\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      ...\n\n      body: StreamBuilder(\n        stream: model.streamState,\n        builder: (buildContext, snapshot) {\n          if (snapshot.hasError) {\n            return _getInformationMessage(snapshot.error);\n          }\n\n          var streamState = snapshot.data;\n\n          if (!snapshot.hasData || streamState is BusyState) {  // 通过封装的状态类来判断是否更新UI\n            return Center(\n              child: CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation<Color>(Colors.yellow),\n                backgroundColor: Colors.yellow[100],\n              ),\n            );\n          }\n\n          if (streamState is DataFetchedState) { // 通过封装的状态类来判断是否更新UI\n            if (!homeState.hasData) {\n              return _getInformationMessage('not found data');\n            }\n          }\n          return ListView.builder(\n            itemCount: streamState.data.length,  // 此时，数据不再是本地数据，而是从 stream 中输出的数据\n            itemBuilder: (buildContext, index) =>\n                _getListItem(index, streamState.data),\n          );\n        },\n      ),\n    );\n  }\n\n  ...\n\n}\n```\n\n此时，业务逻辑代码和 **UI** 代码已完全分离，且可扩展性和维护增强，且我们的数据和状态已关联起来，此时，点击 `FloatingActionButton` 效果和上面一样，且数据已更新。","tags":["Stream"],"categories":["Dart"]},{"title":"Android Flutter 混合开发高仿大厂App","url":"%2FandroidCtrip.html","content":"\n{% li https://cdn.lishaoy.net/ctrip/android/android_ctrip_h.png, Flutter, Flutter %}\n\n自上篇 [Flutter 10天高仿大厂App及小技巧积累总结](https://h.lishaoy.net/flutterctrip) 的续篇，这次更是干货满满。\n\n这篇文章将概述 **Android组件化的架构搭建** 及 **Flutter** 和 **Android** 如何混合开发 *(整个App只有首页是用原生Android完成，其他页面都是引入之前的做好的Flutter页面)* ，主宿主程序由 Android 搭建，采用了组件化的架构搭建整个 **App** ，不同业务，对应不同的 module 工程，业务之间采用接口通信 *(ARouter)* ，以 module 的形式混入 Flutter，通过 **MethodChannel** 和 **Flutter** 端进行数据通信等，且这些功能实现源码开源，感兴趣的小伙伴可以移步至 [GitHub](https://github.com/persilee/android_ctrip)。\n\n<hr />\n\n<!-- more -->\n\n以下博文会分为4个部分概述：\n- 项目完成的功能预览\n- 项目组件化结构分析\n- 项目功能详细概述（所用知识点）\n- Android Flutter 混合开发\n\n## 项目完成的功能预览\n\n首先，我们还是通过一个视频来快速预览下项目完成的功能和运行效果，如下\n\n<video id=\"flutter\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" poster=\"https://cdn.lishaoy.net/ctrip/android_ctripb_bg.png\"\n    data-setup=\"{'example_option':true}\">\n    <source src=\"https://cdn.lishaoy.net/ctrip/android_ctrip.mp4\" type='video/mp4' />\n</video>\n\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> 如视频播放失败， [请移步这里点击观看](https://www.bilibili.com/video/BV1W54y1B72U/) *(点击齿轮 --> 更多播放设置，可以隐藏黑边)*\n{% endnote %}\n\n看完视频后，其实大部分功能和之前的 [纯flutter项目](https://h.lishaoy.net/flutterctrip) 功能相同，只是首页新增了4个tab推荐页面及携程二楼和布局改变。\n\n大家也可扫描，安装体验：\n\n<div style=\"width:166px; margin:auto\">![no-shadow](https://www.pgyer.com/app/qrcode/AsHK?sign=&amp;auSign=&amp;code= \"手机扫描二维码安装\")</div>\n\n\n## 项目组件化结构分析\n\n### 项目结构图预览\n\n其次，分析梳理下项目结构，项目的结构大致如图，还有一些细枝末节的没有体现在图里：\n\n![no-shadow](https://cdn.lishaoy.net/ctrip/android/project.png \"project structure\")\n\n### 项目结构分析\n\n#### 业务工程\n\n把具体独立的业务都拆分成单独的 module 减小项目的维护压力\n\n- ft_home: 首页模块，这个模块其实还可以继续拆分，可把4个 tab *(精选、附近、景点、美食)* 页都拆成模块，这里我暂时没有拆分，后续会完成\n- ft_destination: 目的地模块，其实并没有建立这个模块，因为直接引入了之前做好的 flutter 页面\n- ft_travel: 旅拍模块，同样也使用了 flutter 页面\n- flutter: flutter模块，这个模块是从 flutter_module 中自动生成的，后面介绍到\n\n### 基础库工程\n\n把具体的功能都封装成独立的库供业务模块使用，降低项目的维护成本及代码之间耦合性\n\n- lib_network: 网络库，使用 [okhttp](https://github.com/square/okhttp) 插件二次封装，业务层简单的调用即可\n- lib_webview: 打开网页的webview库，使用了 [agentweb](https://github.com/Justson/AgentWeb) 插件二次封装，业务层只需要一句代码即可完成网页的跳转\n- lib_image_loader: 图片加载库，使用了 [glide](https://github.com/bumptech/glide) 插件二次封装，业务层只需一句代码即可加载不同参数的图片\n- lib_asr: 百度AI语音库，通过 Android 集成好供 Flutter 端使用\n- lib_common_ui: 公共UI库，重复多次使用的页面集中管理\n- lib_base: 基础库，通过 [ARouter](https://github.com/alibaba/ARouter) 的 service 功能暴露接口提供服务给业务层，当然业务层也可以在这里暴露接口供外界使用\n\n这里有一些使用的插件并没有在项目结构图里体现出来(结构图空间有限)。\n\n### 插件\n\n在这里把项目使用的插件整理列举出来供大家参考：\n\n- [magicindicator](https://github.com/hackware1993/MagicIndicator) 强大、可定制、易扩展的 ViewPager 指示器框架，首页的4个 tab *(精选、附近、景点、美食)* 就是用这个实现的。\n- [immersionbar](https://github.com/gyf-dev/ImmersionBar) 一句代码轻松实现状态栏、导航栏沉浸式管理\n- [pagerBottomTabStrip](https://github.com/tyzlmjj/PagerBottomTabStrip) 页面底部和侧边的导航栏，首页、目的地、旅拍、我的页面切换就是用这个实现的。\n- [rxjava/rxandroid](https://github.com/ReactiveX/RxAndroid) 异步和链式编程\n- [butterknife](https://github.com/JakeWharton/butterknife) view注入插件，配合Android插件使用，可快速自动生成 init view的代码，不用写一句 `findViewById` 的代码。\n- [gson](https://github.com/google/gson) json解析，配合Android插件使用，可快速生成实体类\n- [smartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout) 智能下拉刷新框架，携程二楼及下拉刷新加载更多就是用这个实现的\n- [eventbus](https://github.com/greenrobot/EventBus) 发布/订阅事件总线，优雅的完成组件之间通信\n- [arouter](https://github.com/alibaba/ARouter) 依赖注入、路由跳转、注册service，优雅的完成模块之间的通信\n- [okhttp](https://github.com/square/okhttp) 网络请求插件\n- [agentweb](https://github.com/Justson/AgentWeb) webview框架，进行简单的二次封装可优雅的进行网页跳转\n- [glide](https://github.com/bumptech/glide) 高性能、可扩展的图片加载插件\n- [banner](https://github.com/youth5201314/banner) 图片轮播控件\n\n基本就是这些了，应该没有漏的，插件的详细使用，请进入各插件的 GitHub 主页。\n\n在此，把我项目的插件引入代码及版本管理的 `gradle` 代码贴出来，如下：\n\n插件引入代码：\n\n```bash\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n\n    implementation rootProject.depsLibs.appcompat\n    implementation rootProject.depsLibs.legacy\n    implementation rootProject.depsLibs.recyclerview\n    implementation rootProject.depsLibs.constraintlayout\n    implementation rootProject.depsLibs.cardview\n\n    //tab指示器\n    implementation rootProject.depsLibs.magicindicator\n    //沉浸式\n    implementation rootProject.depsLibs.immersionbar\n    //导航栏\n    implementation rootProject.depsLibs.pagerBottomTabStrip\n    //rxjava\n    implementation rootProject.depsLibs.rxjava\n    //rxandroid\n    implementation rootProject.depsLibs.rxandroid\n    //view 注入\n    implementation rootProject.depsLibs.butterknife\n    //view 注入\n    annotationProcessor rootProject.depsLibs.butterknifeCompiler\n    //gson\n    implementation rootProject.depsLibs.gson\n    //banner\n    implementation rootProject.depsLibs.banner\n    //smartRefreshLayout 上下拉刷新\n    implementation rootProject.depsLibs.smartRefreshLayout\n    implementation rootProject.depsLibs.refreshHeader\n    implementation rootProject.depsLibs.refreshHeaderTwoLevel\n    implementation rootProject.depsLibs.refreshFooter\n    //eventbus\n    implementation rootProject.depsLibs.eventbus\n    //arouter库\n    implementation(rootProject.depsLibs.arouterapi) {\n        exclude group: 'com.android.support'\n    }\n    annotationProcessor rootProject.depsLibs.aroutercompiler\n\n    //引入home模块\n    implementation project(':ft_home')\n    //引入图片加载库\n    implementation project(':lib_image_loader')\n    //引入网络库\n    implementation project(':lib_network')\n    //webview\n    implementation project(':lib_webview')\n    //引入基础ui库\n    implementation project(':lib_common_ui')\n    //base库\n    implementation project(':lib_base')\n    //引入flutter模块\n    implementation project(':flutter')\n    //引入百度AI语音库\n    implementation project(':lib_asr')\n}\n```\n\n版本管理代码 *(统一管理版本号)* : \n\n```bash\next {\n    android = [\n            compileSdkVersion: 29,\n            buildToolsVersion: \"29.0.0\",\n            minSdkVersion    : 19,\n            targetSdkVersion : 29,\n            applicationId    : 'net.lishaoy.android_ctrip',\n            versionCode      : 1,\n            versionName      : '1.0',\n            multiDexEnabled  : true,\n    ]\n\n    depsVersion = [\n            appcompat            : '1.1.0',\n            legacy               : '1.0.0',\n            recyclerview         : '1.0.0',\n            constraintlayout     : '1.1.3',\n            cardview             : '1.0.0',\n            magicindicator       : '1.5.0',\n            immersionbar         : '3.0.0',\n            pagerBottomTabStrip  : '2.3.0X',\n            glide                : '4.11.0',\n            glidecompiler        : '4.11.0',\n            butterknife          : '10.2.1',\n            butterknifeCompiler  : '10.2.1',\n            rxjava               : '3.0.0',\n            rxandroid            : '3.0.0',\n            okhttp               : '4.7.2',\n            okhttpLogging        : '4.7.2',\n            gson                 : '2.8.6',\n            banner               : '2.0.10',\n            smartRefreshLayout   : '2.0.1',\n            refreshHeader        : '2.0.1',\n            refreshFooter        : '2.0.1',\n            refreshHeaderTwoLevel: '2.0.1',\n            eventbus             : '3.2.0',\n            agentweb             : '4.1.3',\n            arouterapi           : '1.5.0',\n            aroutercompiler      : '1.2.2',\n\n    ]\n\n    depsLibs = [\n            appcompat            : \"androidx.appcompat:appcompat:${depsVersion.appcompat}\",\n            legacy               : \"androidx.legacy:legacy-support-v4:${depsVersion.legacy}\",\n            recyclerview         : \"androidx.recyclerview:recyclerview:${depsVersion.recyclerview}\",\n            constraintlayout     : \"androidx.constraintlayout:constraintlayout:${depsVersion.constraintlayout}\",\n            cardview             : \"androidx.cardview:cardview:${depsVersion.cardview}\",\n            magicindicator       : \"com.github.hackware1993:MagicIndicator:${depsVersion.magicindicator}\",\n            immersionbar         : \"com.gyf.immersionbar:immersionbar:${depsVersion.immersionbar}\",\n            pagerBottomTabStrip  : \"me.majiajie:pager-bottom-tab-strip:${depsVersion.pagerBottomTabStrip}\",\n            glide                : \"com.github.bumptech.glide:glide:${depsVersion.glide}\",\n            glidecompiler        : \"com.github.bumptech.glide:compiler:${depsVersion.glidecompiler}\",\n            butterknife          : \"com.jakewharton:butterknife:${depsVersion.butterknife}\",\n            butterknifeCompiler  : \"com.jakewharton:butterknife-compiler:${depsVersion.butterknifeCompiler}\",\n            rxjava               : \"io.reactivex.rxjava3:rxjava:${depsVersion.rxjava}\",\n            rxandroid            : \"io.reactivex.rxjava3:rxandroid:${depsVersion.rxandroid}\",\n            okhttp               : \"com.squareup.okhttp3:okhttp:${depsVersion.okhttp}\",\n            okhttpLogging        : \"com.squareup.okhttp3:logging-interceptor:${depsVersion.okhttpLogging}\",\n            gson                 : \"com.google.code.gson:gson:${depsVersion.gson}\",\n            banner               : \"com.youth.banner:banner:${depsVersion.banner}\",\n            smartRefreshLayout   : \"com.scwang.smart:refresh-layout-kernel:${depsVersion.smartRefreshLayout}\",\n            refreshHeader        : \"com.scwang.smart:refresh-header-classics:${depsVersion.refreshHeader}\",\n            refreshHeaderTwoLevel: \"com.scwang.smart:refresh-header-two-level:${depsVersion.refreshHeader}\",\n            refreshFooter        : \"com.scwang.smart:refresh-footer-classics:${depsVersion.refreshFooter}\",\n            eventbus             : \"org.greenrobot:eventbus:${depsVersion.eventbus}\",\n            agentweb             : \"com.just.agentweb:agentweb:${depsVersion.agentweb}\",\n            arouterapi           : \"com.alibaba:arouter-api:${depsVersion.arouterapi}\",\n            aroutercompiler      : \"com.alibaba:arouter-compiler:${depsVersion.aroutercompiler}\",\n    ]\n}\n```\n\n## 项目功能详细概述（所用知识点）\n\n这里主要对首页功能及知识点进行概述，由于其他页面是引入了之前的 Flutter 页面， 具体功能在 [Flutter 10天高仿大厂App及小技巧积累总结](https://h.lishaoy.net/flutterctrip) 已经介绍过了，在这就不再阐述。\n\n首页重点概述以下功能的实现：\n\n- 下拉刷新、携程二楼\n- 搜索appBar\n- 渐变色网格导航\n- banner组件\n- 多状态的tab指示器 *(滚动固定顶部)*\n\n### 下拉刷新、携程二楼\n\n首先，看看具体的效果图，如图：\n\n![no-shadow](https://cdn.lishaoy.net/ctrip/android/second_floor.gif \"second floor\" )\n\n下拉刷新和携程二楼是使用 [smartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout) 插件完成的，实现代码如下：\n\n```java\nprivate void initRefreshMore() {\n    homeHeader.setRefreshHeader(new ClassicsHeader(getContext()), -1, (int) Utils.dp2px(76)); //设置下拉刷新及二楼header的高度\n    homeHeader.setFloorRate(1.6f); //设置二楼触发比率\n    homeRefreshContainer.setPrimaryColorsId(R.color.colorPrimary, R.color.white); //设置下拉刷新及二楼提示文字颜色\n    homeRefreshContainer.setOnMultiListener(new SimpleMultiListener() {\n        @Override\n        public void onLoadMore(@NonNull RefreshLayout refreshLayout) {\n            loadMore(refreshLayout); //加载更多\n        }\n\n        @Override\n        public void onRefresh(@NonNull RefreshLayout refreshLayout) {\n            refreshLayout.finishRefresh(1600); //设置下拉刷新延迟\n        }\n\n        @Override\n        public void onHeaderMoving(RefreshHeader header, boolean isDragging, float percent, int offset, int headerHeight, int maxDragHeight) {\n            homeSecondFloorImg.setVisibility(View.VISIBLE);  //隐藏二楼背景图\n            homeSearchBarContainer.setAlpha(1 - Math.min(percent, 1)); //改变searchBar透明度\n        }\n\n        @Override\n        public void onStateChanged(@NonNull RefreshLayout refreshLayout, @NonNull RefreshState oldState, @NonNull RefreshState newState) {\n            if (oldState == RefreshState.ReleaseToTwoLevel) {  //即将去往二楼状态处理\n                homeSecondFloorImg.setVisibility(View.GONE);\n                homeHeaderContent.animate().alpha(1).setDuration(666);\n            } else if (newState == RefreshState.PullDownCanceled) { //下拉取消状态处理\n                homeHeaderContent.animate().alpha(0).setDuration(666);\n            } else if (newState == RefreshState.Refreshing) { //正在刷新状态处理\n                homeHeaderContent.animate().alpha(0).setDuration(666);\n            } else if (oldState == RefreshState.TwoLevelReleased) { // 准备去往二楼完成状态处理，这里打开webview\n                WebViewImpl.getInstance().gotoWebView(\"https://m.ctrip.com/webapp/you/tsnap/secondFloorIndex.html?isHideNavBar=YES&s_guid=feb780be-c55a-4f92-a6cd-2d81e04d3241\", true);\n                homeHeader.finishTwoLevel();\n            } else if (oldState == RefreshState.TwoLevel) { //到达二楼状态处理\n                homeCustomScrollView.setVisibility(View.GONE);\n                homeHeaderContent.animate().alpha(0).setDuration(666);\n            } else if (oldState == RefreshState.TwoLevelFinish) { //二楼完成状态处理\n                homeCustomScrollView.setVisibility(View.VISIBLE);\n                homeCustomScrollView.animate().alpha(1).setDuration(666);\n            }\n        }\n\n    });\n\n}\n```\n\n`XML` 页面布局文件代码如下：\n\n```xml\n<com.scwang.smart.refresh.layout.SmartRefreshLayout\n    android:id=\"@+id/home_refresh_container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:clipChildren=\"false\"\n    app:srlAccentColor=\"@color/colorPrimary\"\n    app:srlPrimaryColor=\"@color/colorPrimary\">\n    <com.scwang.smart.refresh.header.TwoLevelHeader\n        android:id=\"@+id/home_header\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:gravity=\"top\">\n\n        <ImageView\n            android:id=\"@+id/home_second_floor_img\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"460dp\"\n            android:layout_alignTop=\"@+id/home_header\"\n            android:scaleType=\"fitXY\"\n            android:src=\"@drawable/second_floor\"\n            android:visibility=\"gone\"/>\n        <FrameLayout\n            android:id=\"@+id/home_header_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:alpha=\"0\">\n            <ImageView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:scaleType=\"fitXY\"\n                android:src=\"@drawable/second_floor\" />\n        </FrameLayout>\n\n    </com.scwang.smart.refresh.header.TwoLevelHeader>\n    \n    ...\n\n    <com.scwang.smart.refresh.footer.ClassicsFooter\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n</com.scwang.smart.refresh.layout.SmartRefreshLayout>\n```\n\n具体实现详情，可移步 [GitHub](https://github.com/persilee/android_ctrip) 查看源码。\n\n### 搜索appBar\n\n搜索栏的滚动的 placeholder 文字是使用 [banner](https://github.com/youth5201314/banner) 插件实现的，点击搜索框可跳转到搜索页面 *(flutter写的搜索页面)* ，跳转页面后可以把 placeholder 文字带到 flutter 搜索页面。\n\n效果如图：\n\n![no-shadow](https://cdn.lishaoy.net/ctrip/android/searchBar.gif \"search bar\" )\n\n滚动的placeholder文字实现代码如下 *(搜索框的实现就不再这里展示都是一些XML布局代码)*：\n\n```java\n        homeSearchBarPlaceholder\n                .setAdapter(new HomeSearchBarPlaceHolderAdapter(homeData.getSearchPlaceHolderList())) // 设置适配器\n                .setOrientation(Banner.VERTICAL) // 设置滚动方向\n                .setDelayTime(3600) // 设置间隔时间\n                .setOnBannerListener(new OnBannerListener() {\n                    @Override\n                    public void OnBannerClick(Object data, int position) {  //点击打开 flutter 搜索页面\n                        ARouter.getInstance()\n                                .build(\"/home/search\")\n                                .withString(\"placeHolder\", ((Home.SearchPlaceHolderListBean) data).getText())\n                                .navigation();\n                    }\n                });\n    }\n```\n\nsearchBar的具体功能不过多阐述，和之前的项目一致。\n\n### 渐变色网格导航\n\n渐变色网格导航基本都是一些 `XML` 页面布局代码，只是我把它封装成了单独的组件，效果如图\n\n<img src=\"https://cdn.lishaoy.net/ctrip/android/gridBar.png\" alt=\"GridNav\" width=\"36%\" title=\"GridNav\" align=\"center\">\n\n封装之后的引入就非常简单，代码如下：\n\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:background=\"@color/white\">\n\n    <!-- 网格导航 -->\n    <net.lishaoy.ft_home.GridNavView\n        android:id=\"@+id/home_grid_nav_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    ...\n\n</LinearLayout>\n```\n\n具体实现详情，可移步 [GitHub](https://github.com/persilee/android_ctrip) 查看源码。\n\n### banner组件\n\nbanner组件也是用 [banner](https://github.com/youth5201314/banner) 插件实现的，如图\n\n![no-shadow](https://cdn.lishaoy.net/ctrip/android/banner.gif \"banner\")\n\n实现代码如下：\n\n```java\nprivate void initBanner() {\n    homeBanner.addBannerLifecycleObserver(this)\n            .setAdapter(new HomeBannerAdapter(homeData.getBannerList())) //设置适配器\n            .setIndicator(new EllipseIndicator(getContext()))           //设置指示器，如图的指示器是我自定义的插件里并没有提供\n            .setIndicatorSelectedColorRes(R.color.white)                //设置指示器颜色\n            .setIndicatorSpace((int) BannerUtils.dp2px(10))             //设置间距\n            .setBannerRound(BannerUtils.dp2px(6));                      //设置圆角\n\n}\n```\n\n### 多状态的tab指示器\n\n多状态的tab指示器的实现需要注意很多细节，因为它是在首页的 `fragment` 的 `ScrollView` 里嵌入 `viewPaper`，首先你会发现 viewPaper 不显示的问题，其次是滚动不流畅的问题，这两个问题我的解决方案是：\n\n- viewPaper 不显示的问题：使用自定义的 `ViewPager` 重写 `onMeasure` 方法，重新计算高度\n- 滚动不流畅的问题：使用自定义的 `ScrollView`，重写 `computeScroll` 和 `onScrollChanged` 重新获取滚动距离\n\n实现效果如图：\n\n![no-shadow](https://cdn.lishaoy.net/ctrip/android/tab_bar.gif \"tab page\")\n\n这个功能实现代码过多不便在这里展示，具体实现详情，可移步 [GitHub](https://github.com/persilee/android_ctrip) 查看源码。\n\n## Android Flutter 混合开发\n\n这个项目的实现只有首页是用 Android 原生实现，其他的页面均是 Flutter 实现的，之前 [纯Flutter项目](https://h.lishaoy.net/flutterctrip)。\n\nAndroid 引入 Flutter 进行混合开发，需要以下几个步骤\n\n- 建立一个flutter module\n- 编写flutter代码 *(创建 flutter 路由)*\n- flutter 和 android 之间相互通信\n\n下面依次概述这几部分是如何操作实现的。\n\n### 建立一个flutter module\n\n这个应该不用过多描述，基本操作大家都会 File --> New --> New Module 如图：\n\n![no-shadow](https://cdn.lishaoy.net/ctrip/android/flutter_module.png \"flutter module\")\n\n新建完成之后，android studio 会自动生成配置代码到 gradle 配置文件里，且生成一个 flutter 的 library 模块。\n\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> **Tips：** <br \\>\n新建的时候最好 flutter module 和 android 项目放到同级目录下；<br \\>\n新版的 android studio 才会自动生成 gradle 配置代码，老版本貌似需要手动配置\n\n{% endnote %}\n\n如，没有生成 gradle 配置代码，你需要在根项目的 `settings.gradle` 文件里手动加入如下配置：\n\n```java\nsetBinding(new Binding([gradle: this]))\nevaluate(new File(\n  settingsDir, //设置根路径，根据具体flutter module路径配置\n  'flutter_module/.android/include_flutter.groovy'\n))\n\ninclude ':flutter_module'\n```\n\n还需在宿主工程 *(没改名的话都是app)* 的 `build.gradle` 引入 flutter， 如下：\n\n```java\ndependencies {\n    ...\n    //引入flutter模块\n    implementation project(':flutter')\n    ...\n}\n```\n\n### 编写flutter代码\n\n编写flutter代码，在 flutter module 里按照正常 flutter 开发流程编写 flutter 代码即可。 *(我项目里的 flutter 的代码是之前项目都写好的，复制过来，改改包的引入问题，就可以运行了。)*\n\n这里需要注意的是，flutter 有且只有一个入口，就是 `main()` 函数，我们需要在这里处理好 flutter 页面的跳转问题。\n\n在 android 端，创建 flutter 页面，代码如下：\n\n```java\n    Flutter.createView(getActivity(),getLifecycle(),\"destination\");\n```\n\n`Flutter.createView` 需要3个参数 `activity` 、`lifecycle` 、`route` ，这个 route 就是要传递到 flutter 端的，当然，它是 String 类型的，我们可以自由发挥传递普通字符串或 json 字符串等。\n\n我们也可以通过其他的方式创建 flutter 页面，如： `Flutter.createFragment()` 、 `FlutterActivity.withNewEngine()`、 `FlutterFragment.createDefault()` 等。\n\n具体的使用，可前往 [Flutter官方文档](https://flutter.dev/docs/development/add-to-app/android) 查阅。\n\n那么，flutter 端如何接收这个 route 参数，是通过 `window.defaultRouteName`，此项目里管理 flutter 端路由代码如下：\n\n```dart\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter model',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        fontFamily: 'PingFang',\n      ),\n      home: _widgetRoute(window.defaultRouteName), // 通过 window.defaultRouteName 接收 android 端传来的参数\n    );\n  }\n}\n\nWidget _widgetRoute(String defaultRouteName) {\n    Map<String, dynamic> params = convert.jsonDecode(defaultRouteName); //解析参数\n    defaultRouteName = params['routeName'];\n    placeHolder = params['placeHolder'];\n\n    switch (defaultRouteName) { // 根据参数返回对应的页面\n        ...\n        case 'destination/search':\n            return DestinationSearchPage(\n                hideLeft: false,\n        );\n        ...\n        default:\n            return Center(\n                child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: <Widget>[\n                    Text('not found $defaultRouteName',\n                        textDirection: TextDirection.ltr),\n                ],\n                ),\n            );\n    }\n}\n```\n\n其实，flutter 端接收这个 route 参数，还有一种方法，就是通过 `onGenerateRoute`，它是 MaterialApp 里的一个方法。\n\n代码如下：\n\n```dart\nonGenerateRoute: (settings){ //通过 settings.name 获取android端传来的参数\n    return _widgetRoute(settings.name);\n},\n```\n\n### flutter 和 android 之间相互通信\n\nflutter 端可以调用 android 端的方法及相互传递数据是如何实现的，flutter 官方提供了3个方法可以实现，分别是：\n\n- EventChannel：单向的持续通信，如：网络变化、传感器等。\n- MethodChannel：一次性通信，一般适用如方法的调用。\n- BasicMessageChannel：持续的双向通信。\n\n此项目里采用了 `MethodChannel` 方法进行通信，如：flutter 端调用 android 端的AI智能语音方法以及 flutter 打开 android 端页面就是用 `MethodChannel` 实现的。\n\nflutter 端调用 android 端的AI智能语音方法代码如下：\n\n```dart\nclass AsrManager {\n  static const MethodChannel _channel = const MethodChannel('lib_asr');\n  //开始录音\n  static Future<String> start({Map params}) async {\n    return await _channel.invokeMethod('start', params ?? {});\n  }\n  //停止录音\n    ...\n  //取消录音\n    ...\n  //销毁\n    ...\n}\n```\n\nflutter 打开 android 端页面代码如下：\n\n```dart\nclass MethodChannelPlugin {\n\n  static const MethodChannel methodChannel = MethodChannel('MethodChannelPlugin');\n\n  static Future<void> gotoDestinationSearchPage() async {\n    try {\n      await methodChannel.invokeMethod('gotoDestinationSearchPage'); //gotoDestinationSearchPage 参数会传到android端\n    } on PlatformException {\n      print('Failed go to gotoDestinationSearchPage');\n    }\n  }\n    ...\n}\n```\n\nandroid 接收也是通过 `MethodChannel` ，具体实现代码如下：\n\n```java\npublic class MethodChannelPlugin implements MethodChannel.MethodCallHandler {\n\n    private static MethodChannel methodChannel;\n    private Activity activity;\n\n    private MethodChannelPlugin(Activity activity) {\n        this.activity = activity;\n    }\n\n    //调用方通过 registerWith 来注册flutter页面\n    public static void registerWith(FlutterView flutterView) {\n        methodChannel = new MethodChannel(flutterView, \"MethodChannelPlugin\");\n        MethodChannelPlugin instance = new MethodChannelPlugin((Activity) flutterView.getContext());\n        methodChannel.setMethodCallHandler(instance);\n    }\n\n    @Override\n    public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) {\n        if (methodCall.method.equals(\"gotoDestinationSearchPage\")) { // 收到消息进行具体操作\n            EventBus.getDefault().post(new GotoDestinationSearchPageEvent());\n            result.success(200);\n        } \n        ...\n        else {\n            result.notImplemented();\n        }\n    }\n}\n```\n\nandroid flutter 混合开发基本就是这3个步骤，其他一些细节及具体的流程请参考 [GitHub](https://github.com/persilee/android_ctrip) 项目源码。","tags":["Dart"],"categories":["Java"]},{"title":"Flutter 10天高仿大厂App及小技巧积累总结","url":"%2FflutterCtrip.html","content":"\n{% li https://cdn.lishaoy.net/flutterCtrip/iOS-andorid.png, Flutter, Flutter %}\n\n之前，也写过几篇关于 `Flutter` 的博文，最近，又花了一些时间学习研究 `Flutter`，完成了高仿大厂 **App** 项目 *(项目使用的接口都是来自线上真实App抓包而来，可以做到和线上项目相同的效果)*，也总结积累了一些小技巧和知识点，所以，在这里记录分享出来，也希望 `Flutter` 生态越来越好 *（flutter开发App效率真的很高，开发体验也是很好的 🙂）*。\n\n<hr />\n\n<!-- more -->\n\n以下博文会分为4个部分概述：\n- 项目完成的功能预览\n- 项目结构分析\n- 项目功能详细概述（所用知识点）\n- 小技巧积累总结\n\n## 项目完成的功能预览\n\n首先，我们来通过一个视频来快速预览下项目完成的功能和运行效果，如下\n\n<video id=\"flutter\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" poster=\"https://cdn.lishaoy.net/ctrip/ctripV.png\"\n    data-setup=\"{'example_option':true}\">\n    <source src=\"https://cdn.lishaoy.net/flutterCtrip/ctrip.mp4\" type='video/mp4' />\n</video>\n\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> 如视频播放失败， [请移步这里点击观看](https://www.bilibili.com/video/BV16p4y1Q71f/) （可点击齿轮设置隐藏黑边）\n{% endnote %}\n\n<br />\n大家看完视频，大概了解到，完成度基本可以和线上的 **App** 相差无异了，大家如果对项目感兴趣，想了解具体怎么实现的，可以去我的 [GitHub](https://github.com/persilee) clone 源码查看。\n\n也可扫描，安装体验：\n\n<div style=\"width:166px; margin:auto\">![no-shadow](https://www.pgyer.com/app/qrcode/HqqH \"手机扫描二维码安装\")</div>\n\n本视频是用真机录屏的，因为，语音搜索功能需要录音，模拟器无法录音，当然, `iOS` 和 `Andorid`都可以运行，效果是一样的，如图：\n\n![no-shadow](https://cdn.lishaoy.net/flutterCtrip/iOS-andorid.png \"iOS Andorid\")\n\n## 项目结构分析\n\n其次，梳理下项目的目录结构，理解每个文件都是干什么的，我们先来看看一级目录，如下：\n\n```bash\n├── README.md  # 描述文件\n├── android    # android 宿主环境\n├── build      # 项目构建目录，由flutter自动完成\n├── flutter_ctrip.iml\n├── fonts      # 自己创建的目录，用于存放字体\n├── images     # 自己创建的目录，用于存放图片\n├── ios        # iOS 宿主环境\n├── lib        # flutter 执行文件，自己写的代码都在这\n├── pubspec.lock # 用来记录锁定插件版本\n├── pubspec.yaml # 插件及资源配置文件\n└── test       # 测试目录\n```\n\n这个就不用多解释，大多是 flutter 生成及管理的，我们需要关注的是 **lib** 目录。\n\n我们再来看看二级目录，如下 *(重点关注下lib目录)*\n\n```bash\n├── README.md\n├── android\n│   ├── android.iml\n  ...\n│   └── settings.gradle\n├── build\n│   ├── app\n  ...\n│   └── snapshot_blob.bin.d.fingerprint\n├── flutter_ctrip.iml\n├── fonts\n│   ├── PingFang-Italic.ttf\n│   ├── PingFang-Regular.ttf\n│   └── PingFang_Bold.ttf\n├── images\n│   ├── grid-nav-items-dingzhi.png\n  ...\n│   └── yuyin.png\n├── ios\n│   ├── Flutter\n  ...\n│   └── ServiceDefinitions.json\n├── lib\n│   ├── dao           # 请求接口的类\n│   ├── main.dart     # flutter 入口文件\n│   ├── model         # 实体类，把服务器返回的 json 数据，转换成 dart 类\n│   ├── navigator     # bottom bar 首页底部导航路由\n│   ├── pages         # 所以的页面\n│   ├── plugin        # 封装的插件\n│   ├── util          # 工具类，避免重复代码，封装成工具类以便各个 page 调用\n│   └── widget        # 封装的组件\n├── pubspec.lock\n├── pubspec.yaml\n└── test\n    └── widget_test.dart\n```\n\n再来看看，**lib** 目录下二级目录，看看整个项目创建了多少个文件，写了多少代码，如下 *（其实，并不是很多）*\n\n```bash\n├── dao/\n│   ├── destination_dao.dart*\n│   ├── destination_search_dao.dart*\n│   ├── home_dao.dart\n│   ├── search_dao.dart*\n│   ├── trave_hot_keyword_dao.dart*\n│   ├── trave_search_dao.dart*\n│   ├── trave_search_hot_dao.dart*\n│   ├── travel_dao.dart*\n│   ├── travel_params_dao.dart*\n│   └── travel_tab_dao.dart*\n├── main.dart\n├── model/\n│   ├── common_model.dart\n│   ├── config_model.dart\n│   ├── destination_model.dart\n│   ├── destination_search_model.dart\n│   ├── grid_nav_model.dart\n│   ├── home_model.dart\n│   ├── sales_box_model.dart\n│   ├── seach_model.dart*\n│   ├── travel_hot_keyword_model.dart\n│   ├── travel_model.dart*\n│   ├── travel_params_model.dart*\n│   ├── travel_search_hot_model.dart\n│   ├── travel_search_model.dart\n│   └── travel_tab_model.dart\n├── navigator/\n│   └── tab_navigater.dart\n├── pages/\n│   ├── destination_page.dart\n│   ├── destination_search_page.dart\n│   ├── home_page.dart\n│   ├── my_page.dart\n│   ├── search_page.dart\n│   ├── speak_page.dart*\n│   ├── test_page.dart\n│   ├── travel_page.dart\n│   ├── travel_search_page.dart\n│   └── travel_tab_page.dart*\n├── plugin/\n│   ├── asr_manager.dart*\n│   ├── side_page_view.dart\n│   ├── square_swiper_pagination.dart\n│   └── vertical_tab_view.dart\n├── util/\n│   └── navigator_util.dart*\n└── widget/\n    ├── grid_nav.dart\n    ├── grid_nav_new.dart\n    ├── loading_container.dart\n    ├── local_nav.dart\n    ├── sales_box.dart\n    ├── scalable_box.dart\n    ├── search_bar.dart*\n    ├── sub_nav.dart\n    └── webview.dart\n```\n\n整个项目就是以上这些文件了 *（具体的就不一个一个分析了，如，感兴趣，大家可以 clone 源码运行起来，自然就清除了）*。\n\n## 项目功能详细概述（所用知识点）\n\n首先，来看看首页功能及所用知识点，首页重点看下以下功能实现：\n\n- 渐隐渐现的 **appBar** \n- 搜索组件的封装\n- 语音搜索页面\n- banner组件\n- 浮动的 icon 导航\n- 渐变不规则带有背景图的网格导航\n\n### 渐隐渐现的 appBar\n\n先来看看具体效果，一睹芳容，如图：\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/appBar.gif \"appBar\" )</div>\n\n滚动的时候 **appBar** 背景色从透明变成白色或白色变成透明，这里主要用了 **flutter** 的 `NotificationListener` 组件，它会去监听组件树冒泡事件，当被它包裹的的组件*（子组件）* 发生变化时，`Notification` 回调函数会被触发，所以，通过它可以去监听页面的滚动，来动态改变 **appBar** 的透明度*（alpha）*，代码如下：\n\n```dart\nNotificationListener(\n  onNotification: (scrollNotification) {\n    if (scrollNotification is ScrollUpdateNotification &&\n        scrollNotification.depth == 0) {\n      _onScroll(scrollNotification.metrics.pixels);\n    }\n    return true;\n  },\n  child: ...\n```\n\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> **Tips：** \n{% label danger@scrollNotification.depth %}的值 0 表示其子组件*(只监听子组件，不监听孙组件)*；\n{% label danger@scrollNotification is ScrollUpdateNotification %}来判断组件是否已更新，**ScrollUpdateNotification** 是 notifications 的生命周期一种情况，分别有一下几种：\n- ScrollStartNotification 组件开始滚动\n- ScrollUpdateNotification 组件位置已经发生改变\n- ScrollEndNotification 组件停止滚动\n- UserScrollNotification 不清楚\n\n这里，我们不探究太深入，如想了解可多查看源码。\n\n{% endnote %} \n\n**_onScroll** 方法代码如下：\n\n```dart\n  void _onScroll(offset) {\n    double alpha = offset / APPBAR_SCROLL_OFFSET;  // APPBAR_SCROLL_OFFSET 常量，值：100；offset 滚动的距离\n\n    //把 alpha 值控制值 0-1 之间\n    if (alpha < 0) {\n      alpha = 0;\n    } else if (alpha > 1) {\n      alpha = 1;\n    }\n    setState(() {\n      appBarAlpha = alpha;\n    });\n    print(alpha);\n  }\n```\n\n### 搜索组件的封装\n\n搜索组件效果如图：\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/searchBar.gif \"searchBar\" )</div>\n\n以下是首页调用 `searchBar` 的代码：\n\n```dart\nSearchBar(\n  searchBarType: appBarAlpha > 0.2  //searchBar 的类：暗色、亮色\n      ? SearchBarType.homeLight\n      : SearchBarType.home,\n  inputBoxClick: _jumpToSearch,     //点击回调函数\n  defaultText: SEARCH_BAR_DEFAULT_TEXT,   // 提示文字\n  leftButtonClick: () {},           //左边边按钮点击回调函数\n  speakClick: _jumpToSpeak,         //点击话筒回调函数\n  rightButtonClick: _jumpToUser,    //右边边按钮点击回调函数\n),\n```\n其实就是用 `TextField` 组件，再加一些样式，需要注意点是：**onChanged**，他是 **TextField** 用来监听文本框是否变化，通过它我们来监听用户输入，来请求接口数据;\n具体的实现细节，请查阅源码： [点击查看searchBar源码](https://github.com/persilee/flutter_ctrip/blob/master/lib/widget/search_bar.dart)\n\n### 语音搜索页面\n\n语音搜索页面效果如图：由于模拟器无法录音，所以无法展示正常流程，如果录音识别成功后会返回搜索页面，在项目预览视频中可以看到正常流程。\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/speak.gif \"speak\" )</div>\n\n语音搜索功能使用的是百度的语言识别SDK，原生接入之后，通过 **MethodChannel** 和原生Native端通信，这里不做重点讲述（这里会涉及原生Native的知识）。\n\n重点看看点击录音按钮时的动画实现，这个动画用了 **AnimatedWidget** 实现的，代码如下：\n\n```dart\nclass AnimatedWear extends AnimatedWidget {\n  final bool isStart;\n  static final _opacityTween = Tween<double>(begin: 0.5, end: 0); // 设置透明度变化值\n  static final _sizeTween = Tween<double>(begin: 90, end: 260);   // 设置圆形线的扩散值\n\n  AnimatedWear({Key key, this.isStart, Animation<double> animation})\n      : super(key: key, listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final Animation<double> animation = listenable;  // listenable 继承 AnimatedWidget，其实就是控制器，会自动监听组件的变化\n    return Container(\n      height: 90,\n      width: 90,\n      child: Stack(\n        overflow: Overflow.visible,\n        alignment: Alignment.center,\n        children: <Widget>[\n          ...\n          // 扩散的圆线，其实就是用一个圆实现的，设置圆为透明，设置border\n          Positioned(\n            left: -((_sizeTween.evaluate(animation) - 90) / 2), // 根据 _sizeTween 动态设置left偏移值\n            top: -((_sizeTween.evaluate(animation) - 90) / 2), //  根据 _sizeTween 动态设置top偏移值\n            child: Opacity(\n              opacity: _opacityTween.evaluate(animation),      // 根据 _opacityTween 动态设置透明值\n              child: Container(\n                width: isStart ? _sizeTween.evaluate(animation) : 0, // 设置 宽\n                height: _sizeTween.evaluate(animation),              // 设置 高\n                decoration: BoxDecoration(\n                    color: Colors.transparent,\n                    borderRadius: BorderRadius.circular(\n                        _sizeTween.evaluate(animation) / 2),\n                    border: Border.all(\n                      color: Color(0xa8000000),\n                    )),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n其他细节，如：点击时提示录音，录音失败提示，点击录音按钮出现半透明黑色圆边框，停止后消失等，[请查看源码](https://github.com/persilee/flutter_ctrip/blob/master/lib/pages/speak_page.dart)。\n\n\n\n### banner组件\n\n效果如图：\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/banner.gif \"banner\" )</div>\n\n`banner`使用的是flutter的 [flutter_swiper](https://pub.dev/packages/flutter_swiper) 插件实现的，代码如下：\n\n```dart\nSwiper(\n  itemCount: bannerList.length,              // 滚动图片的数量\n  autoplay: true,                            // 自动播放\n  pagination: SwiperPagination(              // 指示器\n      builder: SquareSwiperPagination(\n        size: 6,                             // 指示器的大小\n        activeSize: 6,                       // 激活状态指示器的大小\n        color: Colors.white.withAlpha(80),   // 颜色\n        activeColor: Colors.white,           // 激活状态的颜色\n      ),\n    alignment: Alignment.bottomRight,        // 对齐方式\n    margin: EdgeInsets.fromLTRB(0, 0, 14, 28), // 边距\n  ),\n  itemBuilder: (BuildContext context, int index) { // 构造器\n    return GestureDetector(\n      onTap: () {\n        CommonModel model = bannerList[index];\n        Navigator.push(\n          context,\n          MaterialPageRoute(\n            builder: (context) => WebView(\n              url: model.url,\n            ),\n          ),\n        );\n      },\n      child: Image.network(\n        bannerList[index].icon,\n        fit: BoxFit.fill,\n      ),\n    );\n  },\n),\n```\n\n具体使用方法，可以去 flutter的官方插件库 [pub.dev](https://pub.dev/) 查看：[点击flutter_swiper查看](https://pub.dev/packages/flutter_swiper)。\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> **Tips：** \n需要注意的是，我稍改造了一下指示器的样式，`flutter_swiper` 只提供了 3 种指示器样式，如下：\n- dots = const DotSwiperPaginationBuilder()，圆形\n- fraction = const FractionPaginationBuilder()，百分数类型的,如：1/6，表示6页的第一页\n- rect = const RectSwiperPaginationBuilder()，矩形\n\n并没有上图的激活状态的长椭圆形，其实就是按葫芦画瓢，自己实现一个长椭圆类型，如知详情，可[点击查看长椭圆形指示器源码](https://github.com/persilee/flutter_ctrip/blob/master/lib/plugin/square_swiper_pagination.dart)\n{% endnote %} \n\n### 浮动的 icon 导航\n\n**icon导航**效果如图：\n\n<img src=\"https://cdn.lishaoy.net/flutterCtrip/iconBar.png\" alt=\"iconBar\" width=\"36%\" title=\"iconBar\" align=\"center\">\n\n**icon导航**浮动在banner之上，其实用的是 `flutter` 的 **Stack** 组件，Stack 组件能让其子组件堆叠显示，它通常和 **Positioned** 组件配合使用，布局结构代码如下：\n\n```dart\nListView(\n  children: <Widget>[\n    Container(\n      child: Stack(\n        children: <Widget>[\n          Container( ... ), //这里放的是banner的代码\n          Positioned( ... ), //这个就是icon导航，通过 Positioned 固定显示位置\n        ],\n      ),\n    ),\n    Container( ... ), // 这里放的网格导航及其他\n  ],\n),\n```\n\n### 渐变不规则带有背景图的网格导航\n\n网格导航效果如图：\n\n<img src=\"https://cdn.lishaoy.net/flutterCtrip/gridNav.png\" alt=\"gridNav\" width=\"46%\" title=\"gridNav\" align=\"center\">\n\n如图，网格导航分为三行四栏，而第一行分为三栏，每一行的第一栏宽度大于其余三栏，其余三栏均等，每一行都有渐变色，而且第一、二栏都有背景图;\n`flutter` 里 **Column** 组件能让子组件竖轴排列， **Row** 组件能让子组件横轴排列，布局代码如下：\n\n```dart\nColumn(                      // 最外面放在 Column 组件\n  children: <Widget>[\n    Container(               // 第一行包裹 Container 设置其渐变色\n      height: 72,\n      decoration: BoxDecoration(\n        gradient: LinearGradient(colors: [  //设置渐变色\n          Color(0xfffa5956),\n          Color(0xffef9c76).withAlpha(45)\n        ]),\n      ),\n      child: Row( ... ),    // 第一行\n    ),\n    Padding(\n      padding: EdgeInsets.only(top: 1),  // 设置行直接的间隔\n    ),\n    Container(\n      height: 72,\n      decoration: BoxDecoration(\n        gradient: LinearGradient(colors: [  //设置渐变色\n          Color(0xff4b8fed),\n          Color(0xff53bced),\n        ]),\n      ),\n      child: Row( ... ),  // 第二行\n    ),\n    Padding(\n      padding: EdgeInsets.only(top: 1),   // 设置行直接的间隔\n    ),\n    Container(\n      height: 72,\n      decoration: BoxDecoration(\n        gradient: LinearGradient(colors: [  //设置渐变色\n          Color(0xff34c2aa),\n          Color(0xff6cd557),\n        ]),\n      ),\n      child: Row( ... ),  // 第三行\n    ),\n  ],\n),\n```\n\n其实，具体实现的细节还是很多的，比如：\n- 怎么设置第一栏宽度偏大，其他均等；\n- 第一行最后一栏宽度是其他的2倍；\n- 第一、二栏的背景图及浮动的红色气泡tip等;\n\n在这里就不细讲，否则篇幅太长，如想了解详情 [点击查看源码](https://github.com/persilee/flutter_ctrip/blob/master/lib/widget/grid_nav_new.dart)\n\n其次，再来看看**目的地**页面功能及所用知识点，重点看下以下功能实现：\n\n- 左右布局tabBarListView \n- 目的地搜索页面\n\n### 左右布局tabBarListView \n\n具体效果如图：点击左边标签可以切换页面，左右滑动也可切换页面，点击展开显示更多等\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/destination.gif \"destination\" )</div>\n\n其实官方已经提供了 **tabBar** 和 **TabBarView** 组件可以实现上下布局的效果*(旅拍页面就是用这个实现的)*，但是它无法实现左右布局，而且不太灵活，所以，我使用的是 [vertical_tabs](https://pub.dev/packages/vertical_tabs)插件, 代码如下：\n\n```dart\nVerticalTabView(\n    tabsWidth: 88,\n    tabsElevation: 0,\n    indicatorWidth: 0,\n    selectedTabBackgroundColor: Colors.white,\n    backgroundColor: Colors.white,\n    tabTextStyle: TextStyle(\n      height: 60,\n      color: Color(0xff333333),\n    ),\n    tabs: tabs,\n    contents: tabPages,\n  ),\n),\n```\n\n具体使用方法，在这里就不赘述了，[点击vertical_tabs查看](https://pub.dev/packages/vertical_tabs)\n\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> **Tips：** \n这里需要注意的是：**展开**显示更多span标签组件的实现，因为，这个组件在很多的其他组件里用到而且要根据接口数据动态渲染，且组件自身存在状态的变化，这种情况下，最好是把他单独封装成一个组件*(widget)*，否则，很难控制自身状态的变化，出现点击没有效果，或点击影响其他组件。 \n{% endnote %} \n\n### 目的地搜索页面\n\n效果如图：点击搜索结果，如：点击‘一日游‘，会搜索到‘一日游‘的相关数据\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/destination-search.gif \"destination\" )</div>\n\n目的地搜索页面，大多都是和布局和对接接口的代码，在这里就不再赘述。\n\n然后就是**旅拍页面**功能及所用知识点，重点看下以下功能实现：\n\n- 左右布局tabBarListView\n- 瀑布流卡片\n- 旅拍搜索页\n\n### 左右布局tabBarListView\n\n效果如图：可左右滑动切换页面，上拉加载更多，下拉刷新等\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/travel.gif \"travel\" )</div>\n\n这个是`flutter` 提供的组件，**tabBar** 和 **TabBarView**，代码如下：\n\n```dart\nContainer(\n  color: Colors.white,\n  padding: EdgeInsets.only(left: 2),\n  child: TabBar(\n    controller: _controller,\n    isScrollable: true,\n    labelColor: Colors.black,\n    labelPadding: EdgeInsets.fromLTRB(8, 6, 8, 0),\n    indicatorColor: Color(0xff2FCFBB),\n    indicatorPadding: EdgeInsets.all(6),\n    indicatorSize: TabBarIndicatorSize.label,\n    indicatorWeight: 2.2,\n    labelStyle: TextStyle(fontSize: 18),\n    unselectedLabelStyle: TextStyle(fontSize: 15),\n    tabs: tabs.map<Tab>((Groups tab) {\n      return Tab(\n        text: tab.name,\n      );\n    }).toList(),\n  ),\n),\nFlexible(\n    child: Container(\n  padding: EdgeInsets.fromLTRB(6, 3, 6, 0),\n  child: TabBarView(\n      controller: _controller,\n      children: tabs.map((Groups tab) {\n        return TravelTabPage(\n          travelUrl: travelParamsModel?.url,\n          params: travelParamsModel?.params,\n          groupChannelCode: tab?.code,\n        );\n      }).toList()),\n)),\n```\n\n### 瀑布流卡片\n\n**瀑布流卡片** 用的是 [flutter_staggered_grid_view](https://pub.dev/packages/flutter_staggered_grid_view) 插件，代码如下：\n\n```dart\nStaggeredGridView.countBuilder(\n  controller: _scrollController,\n  crossAxisCount: 4,\n  itemCount: travelItems?.length ?? 0,\n  itemBuilder: (BuildContext context, int index) => _TravelItem(\n        index: index,\n        item: travelItems[index],\n      ),\n  staggeredTileBuilder: (int index) => new StaggeredTile.fit(2),\n  mainAxisSpacing: 2.0,\n  crossAxisSpacing: 2.0,\n),\n```\n\n如下了解更多相关信息，[点击flutter_staggered_grid_view查看](https://pub.dev/packages/flutter_staggered_grid_view)。\n\n### 旅拍搜索页\n\n效果如图：首先显示热门旅拍标签，点击可搜索相关内容，输入关键字可搜索相关旅拍信息，地点、景点、用户等\n\n<div style=\"width:36%; margin:auto\">![no-shadow](https://cdn.lishaoy.net/flutterCtrip/travel-search.gif \"travel-search\" )</div>\n\n旅拍搜索页，大多也是和布局和对接接口的代码，在这里就不再赘述。\n\n## 小技巧积累总结\n\n以下都是我在项目里使用的知识点，在这里记录分享出来，希望能帮到大家。\n\n### PhysicalModel\n\n**PhysicalModel** 可以裁剪带背景图的容器，如，你在一个 Container 里放了一张图片，想设置图片圆角，设置 Container 的 decoration 的 borderRadius 是无效的，这时候就要用到 **PhysicalModel**，代码如下：\n\n```dart\nPhysicalModel(\n  borderRadius: BorderRadius.circular(6),  // 设置圆角\n  clipBehavior: Clip.antiAlias,            // 裁剪行为\n  color: Colors.transparent,               // 颜色\n  elevation: 5,                            // 设置阴影\n  child: Container(\n        child: Image.network(\n          picUrl,\n          fit: BoxFit.cover,\n        ),\n      ),\n),\n```\n\n### LinearGradient\n\n给容器添加渐变色，在网格导航、appBar等地方都使用到，代码如下：\n\n```dart\nContainer(\n  height: 72,\n  decoration: BoxDecoration(\n    gradient: LinearGradient(colors: [\n      Color(0xff4b8fed),\n      Color(0xff53bced),\n    ]),\n  ),\n  child: ...\n),\n```\n\n### Color(int.parse('0xff' + gridNavItem.startColor))\n\n颜色值转换成颜色，如果，没有变量的话，也可直接这样用 `Color(0xff53bced)`，\n- ox：flutter要求，可固定不变\n- ff：代表透明度，不知道如何设置的话，可以用取色器，或者 withOpacity(opacity) 、 withAlpha(a)\n- 53bced: 常规的6位RGB值\n\n### Expanded、FractionallySizedBox\n\n**Expanded** 可以让子组件撑满父容器，通常和 **Row** 及 **Column** 组件搭配使用；\n<br />\n**FractionallySizedBox** 可以让子组件撑满或超出父容器，可以单独使用，大小受 widthFactor 和 heightFactor 宽高因子的影响\n\n### MediaQuery.removePadding\n\n**MediaQuery.removePadding** 可以移除组件的边距，有些组件自带有边距，有时候布局的时候，不需要边距，这时候就可以用 **MediaQuery.removePadding**，代码如下：\n\n```dart\nMediaQuery.removePadding(\n  removeTop: true,\n  context: context,\n  child: ...\n)\n```\n\n### MediaQuery.of(context).size.width\n\n**MediaQuery.of(context).size.width** 获取屏幕的宽度，同理，**MediaQuery.of(context).size.height** 获取屏幕的高度；\n如，想一行平均3等分： 0.3 * MediaQuery.of(context).size.width，在**目的地页面**的标签组件就使用到它，代码如下：\n\n```dart\nContainer(\n  alignment: Alignment.center,\n  ...\n  width: 0.3*MediaQuery.of(context).size.width - 12, // 屏幕平分三等分， - 12 是给每份中间留出空间 \n  height: 40,\n  ...\n  child: ...\n),\n```\n\n### Theme.of(context).platform == TargetPlatform.iOS\n\n判断操作系统类型，有时候可能有给 Andorid 和 iOS 做出不同的布局，就需要用到它。\n\n### with AutomaticKeepAliveClientMixin\n\n`flutter` 在切换页面时候每次都会重新加载数据，如果想让页面保留状态，不重新加载，就需要使用 **AutomaticKeepAliveClientMixin**,代码如下：*（在旅拍页面就有使用到它，为了让tabBar 和 tabBarView在切换时不重新加载）*\n\n```dart\nclass TravelTabPage extends StatefulWidget {\n  ...\n  //需要重写 wantKeepAlive 且 设置成 true\n  @override\n  bool get wantKeepAlive => true;\n}\n```\n\n### with SingleTickerProviderStateMixin\n\n混入 `SingleTickerProviderStateMixin` 可以在切换页面时候，使用动画效果，如：\n\n```dart\nbottomNavigationBar: BottomNavigationBar(\n          currentIndex: _currentIndex,\n          onTap: (index) {\n            _controller.animateToPage( // _controller 是 PageView 的 PageController\n                index,\n                curve: Curves.easeIn, duration: Duration(milliseconds: 260)\n            );\n            setState(() {\n              _currentIndex = index;\n            });\n          },\n          ...\n)          \n```\n\n### SystemUiOverlayStyle \n\n`SystemUiOverlayStyle` 可实现状态栏沉浸式，设置全局配置，如下：\n\n```dart\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    TextStyle textStyle = TextStyle(fontSize: 20);\n    SystemUiOverlayStyle style = SystemUiOverlayStyle(\n        statusBarColor: Colors.transparent,\n        statusBarIconBrightness: Brightness.light\n    );\n    SystemChrome.setSystemUIOverlayStyle(style);\n\n    return MaterialApp(\n      ...\n  }\n}\n```\n\n单页面设置如下：\n\n```dart\nclass _HomePageState extends State<HomePage> {\n\n  ...\n\n  @override\n  Widget build(BuildContext context) {\n    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.light); //设置状态栏沉浸式\n    return Scaffold(\n      backgroundColor: Color(0xfffafafc),\n      body: LoadingContainer(\n        ...\n      )\n      ...\n```\n\n暂时只能想到这些常用的知识点，以后如有新的会慢慢补充。\n\n**项目GitHub地址:** [https://github.com/persilee/flutter_ctrip](https://github.com/persilee/flutter_ctrip)","tags":["Dart"],"categories":["Dart"]},{"title":"三招让你成为程序猿中优秀的射鸡湿","url":"%2FgoodDesigner.html","content":"\n{% li https://cdn.lishaoy.net/goodDesigner/goodDesigner.jpg, goodDesigner, goodDesigner %}\n\n这篇文章总结一下之前项目中一些 **前端** 工具及技巧，主要包括 **Iconfont的正确使用姿势** 、 **如何使用酷炫漂亮的动画（Lottie）** 、 **如何加入页面滚动入场离场动效**。\n\n<!-- more -->\n\n## Iconfont的正确使用姿势 \n\n[Iconfont](https://www.iconfont.cn) 是阿里巴巴打造的矢量图标库，图标丰富多彩（单色和彩色），使用方便快捷（可筛选图片创建自己项目图标库），支持在线使用，摆脱了传统的图片的繁琐和css字体图标库引入的冗余。\n\n下面介绍下如何使用 Iconfont\n\n### 搜索选择图标\n\n点击 [Iconfont](https://www.iconfont.cn) 打开页面如图，可以搜索 🔍 关键字，找到想要的图标\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont.png \"Iconfont\" )\n\n例如，搜索 ‘image’ 关键字，如图\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont2.png \"Iconfont\" )\n\n鼠标放到图标上会出现 **添加入库** 、 **收藏** 、 **下载图标** 选项，一般我会选择 **添加入库** ，之后统一添加到项目，生成在线地址引入项目（后面会介绍到）\n\n右边的蓝色皇冠按钮可以进行 *精选* 、 *全部* 的筛选，红色的按钮可以进行 *单色* 、 *多色* 、 *全部* 的筛选\n\n点击 下载 会弹出下载页面，可以进行图标的编辑和不同格式的下载，如图\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont3.1.png \"Iconfont\" )\n\n### 添加入库生成在线连接\n\n选择 **添加入库** 的图标，会在右上角的购物车显示数量，点击购物车图标，会弹出右侧栏，如图\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont4.png \"Iconfont\" )\n\n可以批量下载和添加到项目，点击 **添加至项目** 如图\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont5.png \"Iconfont\" )\n\n给项目取一个名字，点击确定，如图\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont6.png \"Iconfont\" )\n\n可以看到有三种图标引入的方式，默认选中的是 **Font class** 的方式，也推荐使用这种方式\n\n**Unicode** : 是以字体的方式引入，如下\n\n```css\n@font-face {\n  font-family: 'iconfont';  /* project id 1066942 */\n  src: url('//at.alicdn.com/t/font_1066942_yvi703p2pv.eot');\n  src: url('//at.alicdn.com/t/font_1066942_yvi703p2pv.eot?#iefix') format('embedded-opentype'),\n  url('//at.alicdn.com/t/font_1066942_yvi703p2pv.woff2') format('woff2'),\n  url('//at.alicdn.com/t/font_1066942_yvi703p2pv.woff') format('woff'),\n  url('//at.alicdn.com/t/font_1066942_yvi703p2pv.ttf') format('truetype'),\n  url('//at.alicdn.com/t/font_1066942_yvi703p2pv.svg#iconfont') format('svg');\n}\n```\n\n**Font class** : 是以Css的方式引入，如下\n\n```html\n//at.alicdn.com/t/font_1066942_yvi703p2pv.css\n```\n\n**Symbol** : 是以js的方式引入，如下\n\n```html\n//at.alicdn.com/t/font_1066942_yvi703p2pv.js\n```\n\n如想了解3中方式具体用法，可点击 [官方文档](https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code)，这里我主要介绍 **Font class** 的方式\n\n### 引入项目使用\n\n首先，把生成的链接引入到页面中，如下\n\n```css\n<link rel=\"stylesheet\" href=\"//at.alicdn.com/t/font_1066942_yvi703p2pv.css\">\n```\n\n其次，用 `<i class=\"iconfont icon-Userselect\"></i>` 在页面中使用，大小颜色都可以用 `css` 调整\n\n阿里在代码的复制、图标的搜索、编辑、下载、筛选等一些操作上做的很到位，使用起来方便快捷\n\n我在之前的项目里也使用过，还是很漂亮的 [https://a.lishaoy.net](https://a.lishaoy.net) ，如图是我在项目里使用的一些图标，每个图标是不是都做的很精致\n\n![Iconfont](https://cdn.lishaoy.net/goodDesigner/Iconfont7.png \"Iconfont\" )\n\n## Lottie开源动画库\n\n**Lottie** 是Airbnb开源的一个面向 iOS、Android、React Native 的动画库，能够直接把 **AE** 导出的动画文件（json），引入到页面使用，以下是官方给出的效果图\n\n![no-shadow](https://cdn.lishaoy.net/goodDesigner/lottie.gif \"Lottie\" )\n\n![no-shadow](https://cdn.lishaoy.net/goodDesigner/lottie2.gif \"Lottie\" )\n\n**Lottie** 支持 iOS、Android、React Native 、Web ，这里主要介绍 lottie-Web 是如何使用，更多使用方法可以参考 [http://airbnb.io/lottie/](http://airbnb.io/lottie/)\n\n首先，在页面中引入 `CDN` 上的文件，如下\n\n```js\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.4.2/lottie.min.js\" type=\"text/javascript\"></script>\n```\n\n其次，使用 **AE** 制作动画（UI提供或者自己制作）导出的 `json`，或者可以在 [Lottie Files](https://lottiefiles.com/featured) 下载 （[Lottie Files](https://lottiefiles.com/featured) 是一个拥有高质量 **Lottie** 文件格式动画的网站，不仅设计师可以在上面陈列他们的动画而且还提供免费下载）\n\n以下是我在项目里使用的效果图（上传图片中会加重动画，上传成功动画停止），具体效果可以去我的项目上传图片体验 [上传图片动画效果](https://a.lishaoy.net/posts/56)\n\n![Lottie](https://cdn.lishaoy.net/adonisjs/image_upload4.gif \"Lottie\" )\n\n具体的代码如下，在页面中创建需要加重动画的容器（`HTML` 代码）\n\n```html\n<div class=\"image-load d-flex justify-content-center align-items-center\">\n  <div class=\"box\">\n    <div class=\"lottie\"></div>\n    <div class=\"text text-muted text-center\">The picture is being uploaded ...</div>\n  </div>\n</div>\n```\n\n然后，用 `js` 初始化动画，如下\n\n```js\n    let anim = lottie.loadAnimation({\n      container: $('.image-load .lottie')[0], //动画容器的元素\n      renderer: 'svg', //支持 svg 和 canvas\n      loop: true, //是否循环\n      autoplay: false, // 是否自动播放\n      path: '/EmojiReaction.json' //动画json文件的位置\n    })\n    anim.addEventListener('loopComplete', () => {  // 监听 `loopComplete` 事件，每次播放完成执行\n      anim.pause() //停止播放\n      $('.image-load').removeClass('loading') //隐藏容器\n      $('.image-load .box .text').text('The picture is being uploaded...').removeClass('text-success').addClass('text-muted') //改变说明文字状态及颜色\n    })\n```\n\n更多的参数和事件可查阅官方文档 [Lottie-Web](http://airbnb.io/lottie/web/web.html)\n\n## 如何加入页面滚动入场离场动效\n\n首先，让我们来先看看效果，如图（效果来源我的博客 [https://lishaoy.net](https://lishaoy.net/laboratory/)）\n\n![Lottie](https://cdn.lishaoy.net/goodDesigner/lottie3.gif \"Lottie\" )\n\n以上动效就是用的 **AOS** 这个库，具体的使用方法也很简单\n\n在页面上引入 `css` 和 `js` 文件\n\n```html\n<link rel=\"stylesheet\" href=\"https://unpkg.com/aos@next/dist/aos.css\"/>\n\n<script src=\"https://unpkg.com/aos@next/dist/aos.js\"></script>\n```\n\n然后，用 `AOS.init()` 初始化，这样初始化，使用的是默认设置，具体有很多参数可以调整，详情可查阅 [项目文档](https://github.com/michalsnik/aos)，如\n\n```js\nAOS.init({\n  // Global settings:\n  disable: false, // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function\n  startEvent: 'DOMContentLoaded', // name of the event dispatched on the document, that AOS should initialize on\n  initClassName: 'aos-init', // class applied after initialization\n  animatedClassName: 'aos-animate', // class applied on animation\n  useClassNames: false, // if true, will add content of `data-aos` as classes on scroll\n  disableMutationObserver: false, // disables automatic mutations' detections (advanced)\n  debounceDelay: 50, // the delay on debounce used while resizing window (advanced)\n  throttleDelay: 99, // the delay on throttle used while scrolling the page (advanced)\n  \n\n  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:\n  offset: 120, // offset (in px) from the original trigger point\n  delay: 0, // values from 0 to 3000, with step 50ms\n  duration: 400, // values from 0 to 3000, with step 50ms\n  easing: 'ease', // default easing for AOS animations\n  once: false, // whether animation should happen only once - while scrolling down\n  mirror: false, // whether elements should animate out while scrolling past them\n  anchorPlacement: 'top-bottom', // defines which position of the element regarding to window should trigger the animation\n\n});\n```\n\n最后，在页面上使用即可，如\n\n```html\n<div data-aos=\"fade-in\"></div>\n```\n\n或者，也可以单独给元素设置参数，使用 `data-aos-*` ，如\n\n```html\n<div data-aos=\"fade-in\"\n  data-aos-offset=\"200\"\n  data-aos-delay=\"50\"\n  data-aos-duration=\"1000\"\n  data-aos-easing=\"ease-in-out\"\n></div>\n```\n\n更多的载入效果可以参考官方给出的 [示例](http://michalsnik.github.io/aos/)\n\n如在您做的页面或应用中使用了这三招，**精致小图标** 、 **炫酷的动画** 、 **页面滚动载入动效** ，那么瞬间让您的页面或应用高大上且生动活泼起来。","tags":["AOS"],"categories":["设计"]},{"title":"用 Node.js 快速开发出多功能的多人在线的文章分享平台","url":"%2Fadonisjs.html","content":"\n{% li https://cdn.lishaoy.net/adonisjs/adonisjs1.png, Adonisjs, Adonisjs %}\n\n最近在学习使用 `Node.js` 框架，边学习边使用，花了大概 **3周** 时间做完这个 **Web应用** 且在 <time>12月16</time> 凌晨左右上线成功（其实就是把开发环境搬到服务器）， 地址： [https://a.lishaoy.net](https://a.lishaoy.net)  \n\n这个 **Web应用** 的代码是开源的，如对这个应用感兴趣，想知道代码是如何运行的，可以去我 **GitHub** 下载或 `clone` ：[应用源码](https://github.com/persilee/adonis_pro)\n\n<hr />\n\n<!-- more -->\n\n首先，来看看用 **3周** 时间做出来的应用都有些什么功能，之后再看看选用的 `Node.js` 框架，最后看看 `Node.js` 项目如何部署到服务器。\n\n## Web应用功能\n\n### 登录、注册验证\n\n**登录功能**\n\n- 输入框没有输入点击登录会提示：用户名、密码不能为空\n- 输入的用户错误或不存在会提示：用户不存在\n- 输入的密码错误会提示：密码错误\n- 登录后会重定向到用户上次访问的地址\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/login.gif \"Login\" )\n\n**注册功能**\n\n- 输入框没有输入点击注册会提示：用户名、邮箱、密码不能为空\n- 用户名和邮箱与其他用户相同会提示：用户名、邮箱已存在\n- 密码小于6位数会提示：最小长度是6位\n- 注册成功后会发送验证邮件到用户邮箱，需点击邮箱按钮验证\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/register.gif \"Register\" )\n\n### 文章列表\n\n登录进来，会显示文章列表页面，显示内容如下：\n\n- 文章标题：点击可进入文章详情页\n- 作者头像、作者名称：点击可进入作者信息页\n- 时间：显示创建时间（多久以前方式显示）\n- 阅读次数、点赞次数\n- 文章简要：自动摘取章头文章\n- 缩略图：自动摘取文章第一张图片\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/posts.png \"Post List\" )\n\n### 文章详情\n\n点击文章标题可进入文章详情页面，内容如下：\n\n- 文章标题\n- 作者头像、作者名称\n- 发布时间\n- 阅读次数和点赞次数\n- 编辑按钮（仅作者可见）\n- 左侧浮动工具栏（点赞、发送邮件到自己邮箱、返回顶部、分享）\n- 点赞：文章被点赞后，作者可以收到消息通知，且将文章收录到点赞列表（支持匿名点赞，但不会记录通知，只会加点赞数）\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/post.png \"Post\" )\n\n### 编辑文章支持 Markdown\n\n新建文章和修改文章都支持 **Markdown** 语法，且会每隔6秒钟自动保存\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/post_edit.png \"Post Edit\" )\n\n### 个人信息\n\n个人信息页面显示内容如下\n\n- 作者的头像、姓名、简介（支持emoji）\n- 信息栏：GitHub 链接、个人网站链接、发布文章数、总阅读次数、总点赞次数\n- 发布文章列表：个人发布的所有文章(有删除和编辑按钮)\n- 已赞文章列表：点过赞的文章会记录在这里\n- 关注者列表：关注你的用户（关注过的用户，关注按钮高亮显示）\n- 已关注列表：你关注的用户（关注过的用户，关注按钮高亮显示)\n- 关注按钮：作者本人不可见，点击可关注，再次点击取消关注，关注后，用户会收到消息通知\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/profile.gif \"Profile\" )\n\n文章删除编辑快捷入口，如图\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/edit_delete_post.gif \"Edit && Delete post\" )\n\n下面是我用另一个用户登录，进入到个人信息页面就会显示关注按钮，如图\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/follow.png \"Follow\" )\n\n### 文件上传\n\n点击文件上传小图标可进入文件上传页面，点击 **Files** 链接可进入文件上传列表，显示内容如图：\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/file_upload.png \"File Upload\" )\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/file_list.png \"File List\" )\n\n### 文件预览和编辑\n\n从文件列表页面点击标题可进入文件预览页面，显示内容如下：\n\n- 如果是图片显示图片，如果是视频显示视频\n- 工具栏：发送邮件到自己邮箱（登录可见）、编辑按钮、删除按钮（登录自己上传可见）\n- 文件名称\n- 下载按钮\n- 上传者头像\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/file_show.gif \"File Show\" )\n\n### 消息通知\n\n点击铃铛小图标可进入消息通知页面，内容如下：\n\n- 点赞消息列表：收到用户点赞通知，最新的未读消息会高亮显示，点击点赞者头像进入个人信息页面，点击文章标题进入你的文章详情页面\n- 关注者列表：收到关注者的通知，最新未读消息会高亮显示，点关注按钮也可关注他，再点击取消关注\n- 系统消息：目前还没有做功能实现\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/notification.gif \"Notification\" )\n\n### 工具栏列表\n\n点击个人头像可展开工具栏列表，内容如下：\n\n- 写文章：点击可新建文章编辑页面，和 ➕ 小图标是同样功能\n- 上传文件：点击可打开文件上传页面，和上传小图标是同样功能\n- 个人信息： 点击可进入个人信息页面\n- 已赞：点击可查看已赞过得文章\n- 设置：点击可打开个人设置页面\n- 登出：点击退出登录\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/tool_menu.png \"Tool Menu\" )\n\n### 设置\n\n点击工具栏上的设置按钮可以设置页面，内容如下：\n\n**个人信息设置**\n\n- 头像：头像是使用的 `Gravatar` 提供的功能，根据邮箱生成头像\n- 用户名\n- 邮箱：已验证通过会显示验证小图标，没有通过的会显示提示\n- GitHub：只需填写有户名\n- 个人简介：支持emoji\n- 个人网站\n\n![no-shadow](https://cdn.lishaoy.net/setting_profile.png \"Setting Profile\" )\n\n**修改密码设置**\n\n需填写原密码，新密码，再次输入密码\n\n![no-shadow](https://cdn.lishaoy.net/setting_pwd.png \"Setting Password\" )\n\n### 聊天室\n\n点击 **Chatroom** 链接可进入聊天室，当然这个是用的 `websocket` 做的，内容如下：\n\n- 状态图标：显示链接状态\n- 活动用户：左侧黑色区域会动态显示活动用户\n- 消息：会显示发送消息，进入、离开房间通知消息（支持匿名发送消息，但不会保存消息）\n- 消息输入：消息输入框可输入消息，<kbd>Cmd</kbd> — <kbd>Enter</kbd> 换行（Windows会显示提示Ctrl+Enter），回车发送消息\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/chatroom1.gif \"Chart Room\" )\n\n加入房间和离开房间都有消息通知，如图\n\n![no-shadow](https://cdn.lishaoy.net/adonisjs/chatroom.png \"Chart Room\" )\n\n## Node.js 框架\n\n这个应用的开发我选择的是 `Adonisjs` 框架，他和 `PHP` 的 `Laravel` 有些像，`Adonisjs` 是在操作系统上运行的 `Node.js` **MVC** 框架。\n\n接下来，来看看 `Adonisjs` 框架有哪些特性：\n\n### 环境安装简单\n\n不管是开发环境还是生产环境，安装 `Adonisjs` 运行环境都是非常简单，先来看看开发环境的安装，生产环境后面会提到。\n\n首先，我们的电脑上需要安装好 `Node.js`大于 *8.00* 版本，管理 `Node.js` 可以使用 `nvm`\n\n其次，就可以使用 `npm` 安装 `Adonis CLI` 命令行工具（管理 `npm` 使用源可以使用 `nrm`）\n\n```bash\nnpm i -g @adonisjs/cli\n```\n\n这样就可以在全局使用 `adonis` 命令\n\n再次，可以是 `adonis new` 命令创建项目\n\n```bash\nadonis new adonis_pro\n```\n\n在 `cd` 进入项目，执行 `adonis serve --dev` 运行项目\n\n```bash\ncd adonis_pro\nadonis serve --dev\n```\n\n这样您的开发环境就搭建完成。\n\n### RMVC\n\n`RMVC` 就是路由、模型、视图、控制器。\n\n#### 路由\n\n创建一条路由非常简单，如 \n\n```js\nRoute.get('liked/:userId/:postId', 'LikedController.liked')\n```\n\n这条路由就是用来处理上面提到的点赞功能的\n\n当然，`Adonisjs` 提供了 **资源路由** 以便您更方便的创建路由，例如\n\n```js\nRoute.resource('posts', 'PostController').middleware(\n\tnew Map([\n\t\t[ [ 'create', 'store', 'edit', 'update', 'destroy' ], [ 'auth' ] ],\n\t\t[ [ 'update', 'destroy', 'edit' ], [ 'own:post' ] ]\n\t])\n).validator(new Map([\n  [['posts.update', 'posts.store'], ['StorePost']]\n]))\n```\n\n这个路由是来处理上面应用提到的文章的 *增、删、改、查* ，这个可能有些复杂，使用了 **中间件** 来处理用户登录状态和操作权限，使用了 **验证器** 来处理表单验证，这里不介绍的太复杂，如想了解这些具体功能，可以需要花点时间了解学习。\n\n我们可以去掉 **中间件** 和 **验证器** ，如下：\n\n```js\nRoute.resource('posts', 'PostController')\n```\n\n这条资源路由，其实就包含了以下路由：\n\n```js\nRoute.get(url, closure)\nRoute.post(url, closure)\nRoute.put(url, closure)\nRoute.patch(url, closure)\nRoute.delete(url, closure)\n```\n\n`Adonisjs` 还提供了路由组和其他一些功能，路由组如下：\n\n```js\nRoute.group(() => {\n\tRoute.get('profile', 'ProfileController.edit').as('profile.edit')\n\tRoute.post('profile', 'ProfileController.update').as('profile.update').validator('UpdateProfile')\n\tRoute.get('password', 'PasswordController.edit').as('password.edit')\n\tRoute.post('password', 'PasswordController.update').as('password.update').validator('UpdatePassword')\n})\n\t.prefix('settings')\n\t.middleware([ 'auth' ])\n```\n\n使用 `.prefix` 和 `Route.group` 来创建路由组，这条路由组是处理 个人信息设置 功能的，这样访问页面是就统一要带上 `settings/**` 。\n\n#### 控制器\n\n`Adonisjs` 提供了命令行来创建控制器，如\n\n```bash\nadonis make:controller User --type http\n```\n\n这样就创建了一个 `User` 控制器,自动生成代码如下：\n\n```js\n'use strict'\n\nclass UserController {\n}\n\nmodule.exports = UserController\n```\n\n当然，我们还可以使用 `--resource` 创建资源类型的控制器\n\n```bash\nadonis make:controller Post --resource\n```\n\n自动生成代码，代码如下：\n\n```js\n'use strict'\n\nclass PostController {\n /**\n   * Show a list of all posts.\n   * GET posts\n   */\nasync index ({ request, response, view }) {}\n\n /**\n   * Render a form to be used for creating a new posts.\n   * GET posts/create\n   */\nasync create ({ request, response, view }) {}\n\n /**\n   * Create/save a new posts.\n   * POST posts\n   */\nasync store ({ request, response, view }) {}\n /**\n   * Display a single posts.\n   * GET posts/:id\n   */\nasync show ({ request, response, view }) {}\n\n /**\n   * Render a form to update an existing posts.\n   * GET posts/:id/edit\n   */\nasync edit ({ request, response, view }) {}\n\n /**\n   * Update posts details.\n   * PUT or PATCH posts/:id\n   */\nasync update ({ request, response, view}) {}\n\n /**\n   * Delete a posts with id.\n   * DELETE posts/:id\n   */\nasync destroy ({ params, request, response }) {}\n}\n\nmodule.exports = PostController\n```\n\n和上面的资源路由是对应的，如用 `GET` 请求访问 *posts* 就会调用 `index` 方法（一般用来显示） ，再如：用 `DELETE` 请求访问 *posts/1* 就会执行 `destroy` 方法（一般用来删除）。\n\n#### 模型\n\n`Adonisjs` 提供了两种模式来处理数据，`Query builder` 和 `LUCID`\n\n首先，我们可以通过 `adonis make:migration` 来创建数据表\n\n```js\nadonis make:migration users\n```\n\n会自动生成代码，如下：\n\n```js\n'use strict'\n\nconst Schema = use('Schema')\n\nclass UsersSchema extends Schema {\n  up () {\n    this.create('users', (table) => {\n      table.increments()\n      table.timestamps()\n    })\n  }\n\n  down () {\n    this.drop('users')\n  }\n}\n\nmodule.exports = UsersSchema\n```\n\n这是我们只需在其中添加想要的字段就行，如：\n\n```js\n'use strict'\n\nconst Schema = use('Schema')\n\nclass UsersSchema extends Schema {\n  up () {\n    this.create('users', (table) => {\n      table.increments()\n      table.string('username', 80).notNullable().unique()\n      table.string('email', 254).notNullable().unique()\n      table.string('password', 60).notNullable()\n      table.timestamps()\n    })\n  }\n\n  down () {\n    this.drop('users')\n  }\n}\n\nmodule.exports = UsersSchema\n```\n\n在执行 `adonis migration:run` 命令就可以在数据库生成数据表\n\n再来看看，如何获取数据，可以使用 `Query builder` 和 `LUCID` 两种方式\n\n先来看看 `Query builder`：\n\n```js\nconst Database = use('Database')\n\nclass UserController {\n\n  async index (request, response) {\n    return await Database\n      .table('users')\n      .where('username', 'admin')\n      .first()\n  }\n\n}\n```\n\n查询 `user` 表 `name` 是 `admin` 的用户\n\n`Adonisjs` 提供了非常多的方法去操作数据，不是特复杂的关系都够用，如果，关系比较复杂，还可以用原生的 `sql` 操作，如\n\n```js\n'use strict'\n\nconst Database = use('Database')\n\n  class NotificationController {\n  async followNotice ({ auth, view }) {\n    const notices = await Database.raw('select users.id as user_id,users.username,users.email,b.title,b.created_at,b.is_read,b.id as post_id from adonis.users , (select posts.id,posts.title, a.user_id,a.created_at,a.is_read from adonis.posts,(SELECT post_user.post_id, post_user.user_id, post_user.created_at, post_user.is_read FROM adonis.post_user where post_user.post_id in (SELECT posts.id FROM adonis.posts where user_id = ?)) as a where posts.id = a.post_id) as b where b.user_id = users.id and b.user_id <> ? order by b.created_at desc limit 50',[ auth.user.id, auth.user.id ])\n  }\n}\n\nmodule.exports = NotificationController\n```\n\n使用 `Database.raw` 来运行原生的 `sql`，以上这条 `sql` 是用来查询所有用户给自己所有文章点赞的用户信息和文章信息用于消息通知。\n\n再来看看，`LUCID` 的模式是如何操作数据的：\n\n使用 `LUCID` 模式，我们先需要用命令行工具创建 `Models`，如：\n\n```bash\nadonis make:model User\n```\n\n自动生成代码如下：\n\n```js\n'use strict'\n\nconst Model = use('Model')\n\nclass User extends Model {\n}\n\nmodule.exports = User\n```\n\n模型和模型之间需要定义一些关系，如：\n\n```js\nconst Model = use('Model')\n\nclass User extends Model {\n  profile () {\n    return this.hasOne('App/Models/Profile')\n  }\n}\n\nmodule.exports = User\n```\n\n意思是 一个用户对应一个用户信息档案，**一对一** 的关系\n\n定义好关系之后，就可以方便的获取数据，如：\n\n```js\nconst User = use('App/Models/User')\n\nconst user = await User.find(1)\nconst userProfile = await user.profile().fetch()\n```\n\n意思是，从用户表和用户个人信息表里获取用户 `id` 是 `1` 的用户信息及个人信息，\n\n其中，关系可以定义为 **3** 种 **一对一、一对多、多对多** ，多对多需要定义中间表\n\n再来看看，上面的应用中的实际应用，如：\n\n```js\nasync update ({ params, request, response, session, auth }) {\n  const { title, content, user_id, tags } = request.all()\n\n  const post = await Post.findOrFail(params.id)\n  post.merge({ title, content})\n  await post.save()\n\n  await post.tags().sync(tags)\n\n  session.flash({\n    type: 'primary',\n    message: 'Post updated successfully.'\n  })\n\n  return response.redirect(\n    Route.url('PostController.show', {\n      id: post.id\n    })\n  )\n}\n```\n\n以上，是更新文章的方法，**文章** 和 **标签** 是 **多对多** 的关系，一个标签可以属于多篇文章，一篇文章可以有多个标签，`await post.tags().sync(tags)` 这句代码就可以通过 `Models` 里定义的关系自动把标签和文章关联起来保存到 `posts` 和 `tags` 表里且把关联关系保存到中间表 `post_tag`。\n\n当然，`Adonisjs` 提供了很多方便的方法，想了解更多的话需要您花点时间去了解学习。\n\n#### 视图\n\n`Adonisjs` 框架里视图使用了 `edge` 模板，我们可以使用命令行工具创建视图文件，如：\n\n```bash\nadonis make:view post\n```\n\n我看可以看下简单的例子：\n\n```html\n@loggedIn\n  <h2> You are logged in </h2>\n@else\n  <p> <a href=\"/login\">Click here</a> to login </p>\n@endloggedIn\n```\n视图模板里可以使用标签来做逻辑判断，视图模板就没什么好说的，基本都是通用的，关于 `edge` 视图模板更多语法 [Edge官方文档](https://edge.adonisjs.com/docs/syntax-guide)\n\n最后，`Adonisjs` 框架还提供了很多其它的实用工具，如：`Middleware` 中间件、`Validator` 验证器、`Error Handling` 自定义异常、`Events` 事件、`Mails` 邮件、`Websocket` 等来处理各种问题。\n\n## Node.js项目发布到阿里云服务器\n\n首先，我们需要用 `ssh` 连接到阿里云（或者其他服务器供应商）的主机上，安装一些必要的工具。\n\n### 工具安装\n\n#### 安装 epel-release 软件包仓库\n\n我们需要安装 `epel-release` 软件包仓库，`epel-release` 里面有很多最新的软件包，如，之后安装的 `git` 就会用到\n\n```bash\nsudo yum install epel-release - y\n```\n\n#### 安装 Git 版本控制命令行工具\n\n```\nsudo yum install git -y\n```\n\n### 准备 Node.js 运行环境\n\n接下来，我们需要安装 `Node.js` 以便我们的 `Node.js` 项目能够跑起来，我们可以使用 `nvm` 安装和管理 `Node.js` ，使用 `nrm` 来管理切换安装源。\n\n#### 安装 nvm\n\n```bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n\n安装好之后,我们需要配置下环境变量，以便能够在命令行使用 `nvm` 命令，用 `vi ~/.bash_profile` 编辑下配置文件\n\n```bash\nvi ~/.bash_profile\n```\n\n加入以下代码：\n\n```bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"\n```\n\n然后，在 `source ~/.bash_profile` 刷新下配置文件，让它生效\n\n```bash\nsource ~/.bash_profile\n```\n\n此时，我们就可以使用 `nvm` 来安装 `Node.js`\n\n```bash\nnvm install node\n```\n\n安装好后，可以使用 `nvm list` 来查看有哪些版本可以使用\n\n```bash\nnvm list\n```\n\n结果：\n\n```bash\n->     v10.13.0\n        v11.2.0\n         system\ndefault -> v10.13.0\nnode -> stable (-> v11.2.0) (default)\nstable -> 11.2 (-> v11.2.0) (default)\niojs -> N/A (default)\nlts/* -> lts/dubnium (-> v10.13.0)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.14.4 (-> N/A)\nlts/carbon -> v8.13.0 (-> N/A)\nlts/dubnium -> v10.13.0\n```\n\n我使用的是 *v10.13.0* 的版本，默认安装的都是比较新的版本，可能是 *v11.2.0* 或 *v11.1.0*，所以我们也可以用 `nvm install v10.13.0` 来安装指定版本。\n\n```bash\nnvm install v10.13.0\n```\n\n然后，就可以使用 `nvm use  v10.13.0` 来使用指定版本\n\n```bash\nnvm use nvm v10.13.0\n```\n\n结果：\n\n```bash\nNow using node v10.13.0 (npm v6.4.1)\n```\n\n#### 安装 nrm 管理安装源\n\n使用 npm 安装的程序包，默认的来源是 [http://registry.npmjs.org](http://registry.npmjs.org)，国内的下载速度会有些慢，我们可以是 `nrm` 来切换到 `taobao` 的源\n\n**安装 nrm**\n\n```bash\nnpm install nrm --global\n```\n\n**切换到 taobao 源**\n\n```bash\nnrm use taobao\n```\n\n### 准备项目\n\n以上工作完成之后，我们的服务器就可以正常运行 `Node.js` 项目，现在我们需要把本地的项目上传到服务器，上传方法有很多，如：\n\n- 可以使用 `git`，先把项目传到 **GitHub**，然后用 `git` 下载到服务器\n- 可以是 **FTP** 工具\n- 可以是命令上传 `scp -r 本地目录  root@服务器IP:/var/www/`\n\n发项目文件上传到服务器的指定目录下，如：`www`\n\n接下来，我们可以是 **PM2** 来管理 **Node** 进程，先需要安装 **PM2**\n\n#### 安装PM2\n\n```bash\nnpm install pm2@latest --global\n```\n\n这些工作作为之后，就可以来测试一下，启动项目，在本地访问服务器 `IP:PORT` 来测试是否可以访问\n\n#### 测试项目是否可以运行\n\n在测试之前，我们需要改下应用的配置文件，`adonisjs` 框架里是 `.env` 文件，修改下 `HOST` 的值：\n\n```bash\nHOST=0.0.0.0\nPORT=3333\n...\n```\n\n`HOST` 默认是 *127.0.0.1*，需要改成 *0.0.0.0* 这样就可以在自己电脑上用服务器 `IP:PORT` 来访问应用\n\n改完后，进入到项目的根目录，运行应用，`adonisjs` 的启动文件是 `server.js`，如：\n\n```bash\npm2 start server.js\n```\n\n如启动成功会提示：\n\n```bash\n[PM2] Applying action restartProcessId on app [server](ids: 0)\n[PM2] [server](0) ✓\n[PM2] Process successfully started\n┌──────────┬────┬─────────┬──────┬──────┬────────┬─────────┬────────┬─────┬──────────┬──────┬──────────┐\n│ App name │ id │ version │ mode │ pid  │ status │ restart │ uptime │ cpu │ mem      │ user │ watching │\n├──────────┼────┼─────────┼──────┼──────┼────────┼─────────┼────────┼─────┼──────────┼──────┼──────────┤\n│ server   │ 0  │ 4.1.0   │ fork │ 7171 │ online │ 30      │ 0s     │ 0%  │ 3.4 MB   │ root │ disabled │\n└──────────┴────┴─────────┴──────┴──────┴────────┴─────────┴────────┴─────┴──────────┴──────┴──────────┘\n Use `pm2 show <id|name>` to get more details about an app\n```\n\n然后，在自己电脑上用服务器 `IP:PORT` 来访问应用。\n\n### Nginx 代理\n\n为了让服务器更好地处理网络请求，我们需要添加使用 **Nginx 反向代理** 把请求转发给 `Node.js` 应用\n\n#### 安装 Nginx\n\n```bash\nsudo yum install nginx -y\n```\n\n如果你的服务之前安装过可不用安装，我的阿里云服务器运行了 4 个站点之前安装过，之后我只需添加配置就行。\n\n#### 启动 Nginx\n\n```bash\nsudo systemctl start nginx\n```\n\n#### 配置 Nginx\n\n一般情况 **Nginx** 安装好后会有 */etc/nginx/conf.d*  目录，进入这个目录，创建一个配置文件为 `Node.js` 而准备，名字可随意命名，如：`adonis.conf`\n\n```bash\nserver {\n  listen 80;\n  location / {\n      proxy_pass http://127.0.0.1:3333;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection 'upgrade';\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n然后，在 **Nginx** 的主配置文件里把刚才新创建的配置文件（*/etc/nginx/nginx.conf*） `include` 进去就可以,如：\n\n```bash\ninclude /etc/nginx/conf.d/*.conf;\n```\n\n因为，我的主机里运行了4个站点，`*` 的意思就是加载这个目录下的所有配置文件\n\n然后，记得把刚才项目里的 *.env* 配置文件改成 *127.0.0.1* ，因为我们现在使用了代理，网络请求交给了 **Nginx**\n\n再进入到项目的根目录下运行：\n\n```bash\npm2 stop server.js #停止项目\npm2 start server.js #启动项目\n```\n\n这时候再用服务器 **IP** 访问就是用的 **Nginx** 去处理请求\n\n#### 域名和SSL\n\n如果你有域名可以去对应的供应商解析好，如想使用 `https` 协议，也可以去对应的供应商下载好证书（下载好的证书要放到服务器某个目录里）。\n\n再修改下刚才创建的配置文件，让它能够支持 `https` 和 域名 访问：\n\n```bash\nserver {\n  listen 80;\n      listen 443 ssl http2; #SSL\n  server_name a.lishaoy.net; #域名\n  ssl on;\n\n  ssl_certificate /etc/letsencrypt/live/a.lishaoy.net/server.pem; #证书目录\n  ssl_certificate_key /etc/letsencrypt/live/a.lishaoy.net/server.key; #证书目录\n  ssl_protocols TLSv1.1 TLSv1.2;\n  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n  ssl_prefer_server_ciphers on;\n  ssl_session_cache shared:SSL:10m;\n  ssl_session_timeout 10m;\n  if ($ssl_protocol = \"\") {\n    rewrite ^(.*) https://$host$1 permanent;\n  }\n  error_page 497  https://$host$request_uri;\n\n  error_page 404 /404.html;\n  error_page 502 /502.html;\n\n  location / {\n      proxy_pass http://localhost:3333;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection 'upgrade';\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n这样再重启 `Ningx` 服务和项目的服务，就大功告成了。","tags":["adonis"],"categories":["Node"]},{"title":"Flutter：手拉手带你极速构建漂亮的跨平台移动应用 ✿ 初体验（实战）","url":"%2FfristFlutter.html","content":"\n{% li https://cdn.lishaoy.net/fristFlutter/flutterCover7.png, Flutter, Flutter %}\n\n我们上篇文章已经把 **Flutter** 的开发运行环境搭建好了 [Flutter：环境搭建](https://h.lishaoy.net/flutterInstall.html) ，本篇文章将完成您的第一个 **Flutter** 小应用，不用但是不会，跟着文章做就行，开始不必太纠结这些代码细节，明白它是干什么的就行，只是一个使用体验，体验 **Flutter** 框架给你带来的开发感受，后面会有具体的组件（widget）的文章。\n\n<hr />\n\n<!-- more -->\n\n## 创建项目\n\n在上篇文章我们已经创建了一个 Flutter 项目 {% label success@new_flutter %}，如果您还没有创建，可以在终端执行以下命令：\n\n```bash\ncd ~/desktop #进入桌面\nflutter create new_flutter #创建 Flutter 项目\ncd new_flutter #进入项目\ncode ./ #用 VS Code 打开\n```\n\n用 VS Code 打开项目后，按 **F5** 选择模拟器运行项目看看效果，这些操作在上篇文章都已经做过了，您应该有些印象，如成功的话，会看到如图效果：\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/demo.png \"Flutter run\" )\n\n上图界面是 `flutter create` 命令创建项目时，给我们的案例（计数器），这些代码在 *{% label default@ lib->main.dart %}* 文件里，如你关注的话可以看看这些代码都做了些什么，不过现在我们不需要这些代码，<kbd>⌘</kbd> - <kbd>A</kbd> 全选删除，我们需要自己写，如下：\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#创建项目 main.dart\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    Center(\n      child: Text(\n        'Hello',\n        textDirection: TextDirection.ltr,\n        style: TextStyle(fontSize: 36.0),\n      ),\n    )\n  );\n}\n```\n\n写入以上代码，按 <kbd>⌘</kbd> - <kbd>⇧</kbd> - <kbd>P</kbd> 打开 VS Code 的命令面板，搜索 `hot restart` 执行命令，效果如图：\n\n<div style=\"padding: 0 30%;\">![no-shadow](https://cdn.lishaoy.net/fristFlutter/flutter_hello.png \"hello\" )</div>\n\n`main()` 是 Flutter 的入口函数，我们一般不会把代码写在里面，我们来修改下代码（自定义 widget）：\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#创建项目 main.dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(App());\n\nclass App extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Text(\n        'Hello',\n        textDirection: TextDirection.ltr,\n        style: TextStyle(fontSize: 36.0),\n      ),\n    );\n  }\n}\n```\n\n运行效果是一样的，这里我们自定义了一个 `StatelessWidget` 类型的 widget 叫 {% label primary@App %}。\n\n## 新增 Material AppBar\n\n我们再来修改下代码，让我们的应用去使用 {% label success@Material Design %} 的 AppBar\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#新增-Material-AppBar main.dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(App());\n\nclass App extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\n            'lishaoy.net'.toUpperCase(),\n            style: TextStyle(letterSpacing: 3.0),\n          ),\n        ),\n        body: Hello(),\n      ),\n    );\n  }\n}\n\nclass Hello extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Text(\n        'Hello',\n        textDirection: TextDirection.ltr,\n        style: TextStyle(fontSize: 36.0),\n      ),\n    );\n  }\n}\n```\n\n运行效果如图：\n\n<div style=\"padding: 0 30%;\">![no-shadow](https://cdn.lishaoy.net/fristFlutter/Appbar.png \"hello\" )</div>\n\n{% note success %}\n<i class=\"fa fa-fw fa-bell faa-horizontal animated faa-slow\" style=\"color: #009688;\"></i>**Tip：**\n1. 自定义了一个 Hello 的 {% label info@StatelessWidget %} 类型的 widget\n2. 新增了 MaterialApp ，这里面就有我们需要用的 AppBar （MaterialApp 里面有很多 {% label info@Material Design %} 风格的组件，后面的文章提到）\n3. Scaffold 可以理解为 MaterialApp 布局的架子，{% label info@Material Design %} 风格的组件都会放到这里面\n4. AppBar 就是顶部蓝色这部分，加了一个 title 转为大写和增加词间距\n5. body 是主显示区，下面白色部分，放的是我们自定义的 Hello 小部件\n{% endnote %}  \n\n## 新增列表视图（ListView）\n\n在新增列表视图（ListView）之前，我们需要准备一些数据，我们可以在 lib 目录下新建一个目录 model 和文件 {% label default@post.dart %}，如图：\n\n<img src=\"https://cdn.lishaoy.net/fristFlutter/model.png\" alt=\"post.dart\" width=\"26%\" title=\"post.dart\" align=\"center\">\n\n然后，把在 {% label success@GitHub %} 准备好的 [post.dart](https://github.com/persilee/flutter_pro/blob/master/lib/model/post.dart) 数据放到里面。\n\n现在我们再来改进下代码，让它更具有维护性，我们把 `home` 属性下的 Scaffold 放到单独的 widget ，取名为 {% label default@HomePage %}\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#新增列表视图（ListView） main.dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(App());\n\nclass App extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: HomePage(),\n    );\n  }\n}\n\nclass HomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text(\n            'lishaoy.net'.toUpperCase(),\n            style: TextStyle(letterSpacing: 3.0),\n          ),\n        ),\n        body: Hello(),\n      );\n  }\n}\n```\n\n接下来，我们来创建 {% label primary@视图列表 %} \n\n首先，在头部引入刚才创建的数据 `post.dart` 文件\n\n```Dart\nimport './model/post.dart';\n```\n\n然后，再把 `body` 下的 Hello() 换成 `ListView`，如下：\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#新增列表视图（ListView） main.dart\nclass HomePage extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text(\n            'lishaoy.net'.toUpperCase(),\n            style: TextStyle(letterSpacing: 3.0),\n          ),\n        ),\n        body: ListView.builder(\n          itemCount: posts.length,\n          itemBuilder: (BuildContext context, int index) => Text(posts[index].title),\n        ),\n      );\n  }\n}\n```\n\n效果如图：\n\n<div style=\"padding: 0 30%;\">![no-shadow](https://cdn.lishaoy.net/fristFlutter/listView.png \"ListView\" )</div>\n\n## 完善列表项目\n\n现在，数据已经呈现在应用界面上了，接下来要做的是让数据展示更友好一点。\n\n我们再来改造一下 `itemBuilder` 下的方法：\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#完善列表项目 main.dart\nclass HomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.grey[100],\n      appBar: AppBar(\n        title: Text(\n          'lishaoy.net'.toUpperCase(),\n          style: TextStyle(letterSpacing: 3.0),\n        ),\n      ),\n      body: ListView.builder(\n        itemCount: posts.length,\n        itemBuilder: (BuildContext context, int index) => Container(\n              margin: EdgeInsets.all(8.0),\n              color: Colors.white,\n              child: Column(\n                children: <Widget>[\n                  Image.network(\n                    posts[index].imageUrl,\n                    fit: BoxFit.cover,\n                  ),\n                  SizedBox(\n                    height: 16.0,\n                  ),\n                  Text(\n                    posts[index].title,\n                    style: Theme.of(context).textTheme.title,\n                  ),\n                  Text(\n                    posts[index].author,\n                    style: Theme.of(context).textTheme.subhead,\n                  ),\n                  SizedBox(\n                    height: 16.0,\n                  ),\n                ],\n              ),\n            ),\n      ),\n    );\n  }\n}\n```\n\n运行效果如图：\n\n<div style=\"padding: 0 30%;\">![no-shadow](https://cdn.lishaoy.net/fristFlutter/listView1.png \"ListView\" )</div>\n\n{% note success %}\n<i class=\"fa fa-fw fa-bell faa-horizontal animated faa-slow\" style=\"color: #009688;\"></i>**Tip：**\n1. {% label info@itemBuilder %} 属性是个方法，可以传 2 个参数，context（内容）、index（索引）\n2. 我们用了 {% label info@Container %} 的 widget 来装载我们的项目，因为 {% label info@Container %} 有很多属性，例如 margin、padding、color、width、height等，后面我们会慢慢的熟悉它\n3. 我们用了一个 {% label info@Column %} 的 widget 来布局，因为我们的图片、标题、小标题要纵向排列（Row、Column等一些布局的 widget 我们会经常用到）\n4. 用了 {% label info@Image.network %} 来加载一个来自网络的图片（Image.asset可以加载本地图像）\n5. {% label info@Theme.of(context).textTheme.title%} 是用 {% label info@Material Design %} 主题里的标题样式\n{% endnote %}  \n\n最后，为了可阅读性和维护性考量，我们再可以调整一下代码 {% label success@ListView.builder %} 方法单独提炼出来：\n\n```dart Dart https://h.lishaoy.net/fristFlutter.html#完善列表项目 main.dart\nclass HomePage extends StatelessWidget {\n  Widget _listItemBuilder(BuildContext context, int index) => Container(\n        margin: EdgeInsets.all(8.0),\n        color: Colors.white,\n        child: Column(\n          children: <Widget>[\n            Image.network(\n              posts[index].imageUrl,\n              fit: BoxFit.cover,\n            ),\n            SizedBox(\n              height: 16.0,\n            ),\n            Text(\n              posts[index].title,\n              style: Theme.of(context).textTheme.title,\n            ),\n            Text(\n              posts[index].author,\n              style: Theme.of(context).textTheme.subhead,\n            ),\n            SizedBox(\n              height: 16.0,\n            ),\n          ],\n        ),\n      );\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.grey[100],\n      appBar: AppBar(\n        title: Text(\n          'lishaoy.net'.toUpperCase(),\n          style: TextStyle(letterSpacing: 3.0),\n        ),\n      ),\n      body: ListView.builder(\n        itemCount: posts.length,\n        itemBuilder: _listItemBuilder,\n      ),\n    );\n  }\n}\n```\n\n现在，第一个漂亮的界面已经完成，后面的文章我们一起来完成其他部分。\n","tags":["Dart"],"categories":["Dart"]},{"title":"Flutter：手拉手带你极速构建漂亮的跨平台移动应用 ✿ 环境搭建","url":"%2FflutterInstall.html","content":"\n{% li https://cdn.lishaoy.net/flutterInstall/flutterCover8.png, Flutter, Flutter %}\n\n上篇文章带大家认识了 `Flutter` ，想必大家已迫不及待的想练练手，所以要行动起来，现在这篇文章就带您搭建一个 `Flutter` 运行及开发环境。\n\n<hr />\n\n<!-- more -->\n\n## 安装 Flutter SDK\n\n想要在本地电脑上运行 **Flutter** ，需要安装 **Flutter SDK** 才可以运行， **SDK** 里面有一些用于创建、构建、测试和编译应用程序的命令行工具等，这些在开发的时候会用到。\n\n首先，我们有 2 种方法获取 **SDK**\n\n- 可以到 [下载 Flutter SDK ](https://flutter.io/docs/development/tools/sdk/archive#macos) 到本地电脑\n- 可以用 `git clone` 命令下载到本地电脑\n\n```bash\ngit clone -b master https://github.com/flutter/flutter.git\n```\n\n其次，把下载下来的 **Flutter SDK** 解压，放到系统的某个目录，比如我是放到： `/Applications/flutter` ，如图：\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/flutterSDK.png \"Flutter SDK\")\n\n## 配置环境变量\n\n配置环境变量的目的是为了让 **Flutter SDK** 命令行工具在全局范围都起作用，以便开发使用。\n\n首先，您可以用编辑器打开主目录下的 `.bash_profile`，或者用 `vi` 命令编辑，我习惯用 `vi` 命令，如下\n\n```bash\nvi $HOME/.bash_profile\n```\n\n新增以下配置\n\n```\nexport PATH=$PATH:/Applications/flutter/bin\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n```\n{% note warning %} \n<i class=\"fa fa-fw fa-bell faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> **Tips：** <br/>\n第一行 {% label danger@export PATH=$PATH:/Applications/flutter/bin %} 中的 {% label danger@/Applications/flutter/bin %} 就是刚才下载的 **Flutter SDK** 解压后放在本地电脑的目录，您要根据自己操作更改为自己电脑对应的目录。<br/>\n第二、三行为解决国内下载或更新资源慢的国内镜像，配置这个下载或更新资源会快一些。\n{% endnote %}  \n\n再执行 `source $HOME/.bash_profile` 命令刷新当前命令行窗口，或者关掉当前命令行窗口重新打开，效果一样\n\n```bash\nsource $HOME/.bash_profile\n```\n\n再执行 `flutter --help`，来测试环境变量是否配置成功，如图：\n\n![no-shadow](https://cdn.lishaoy.net/flutterSDK3.png \"flutter help\")\n\n{% note warning %} \n<i class=\"fa fa-fw fa-bell  faa-horizontal animated faa-slow\" style=\"color: #faab33;\"></i> **Tips：** 如果你使用的是 {% label danger@zsh %}，需要在 ~/.zshrc 文件中添加：{% label danger@source ~/.bash_profile %} ，否则 {% label danger@flutter %} 命令将无法运行。\n{% endnote %} \n\n## 配置 iOS 开发环境\n\n想用 **Flutter** 为 iOS 平台开发应用，需要安装 Xcode，我们可以去苹果应用商店下载。\n\n安装好 Xcode 后，你需要打开一次 Xcode 同意许可协议（会提示），或者执行 `sudo xcodebuild -license` 同意许可协议。\n\n然后执行 `open -a Simulator` 命令，就可以打开一个模拟器，来运行和测试 **Flutter** 程序，如图\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/Simulator2.png \"Simulator\" )\n\n## 配置 Android 开发环境\n\n想用 **Flutter** 为 Android 平台开发应用，需要下载安装 [Android Studio](https://developer.android.com/studio/)。\n\n安装好 Android Studio 后，启动它，首次启动会安装最新的 **Android SDK** ，但是你可能会遇到这样的问题，如图：\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio.png\" alt=\"Android Studio\" width=\"50%\" title=\"Android Studio\" align=\"center\" />\n\n如果遇到这个问题应该就是网络问题（需要科学上网），点 **Setup Proxy** 来设置代理，如图：\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio1.png\" alt=\"Android Studio\" width=\"50%\" title=\"Android Studio\" align=\"center\" />\n\n如一切正常，就会提示你需要下载一些东西，如图\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio2.png\" alt=\"Android Studio\" width=\"85%\" title=\"Android Studio\" align=\"center\" />\n\n点击 Finish 按钮后就会下载安装以上列表的东西,下载安装完 SDK 后，如图：\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio3.png\" alt=\"Android Studio\" width=\"85%\" title=\"Android Studio\" align=\"center\" />\n\n需要我们打开一个项目，我们可以用刚才已经配置好的 **Flutter SDK** 的命令行创建一个 Flutter 项目，如执行以下命令\n\n```bash\ncd ~/desktop\nflutter create new_flutter\n```\n\n命令执行完成后，在桌面就会生成一个 Flutter 项目，再用 Android Studio 打开，项目打开后会提示安装 Flutter 插件和依赖 Dart 语言插件 ，安装完之后我们可以去创建一个模拟器。\n\n打开 **Tools>AVD Manager** ，点击 `Create Virtual Device...` 来创建一个模拟器，选择一个设备，点击 Next，如图\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio4.png\" alt=\"Android Studio\" width=\"85%\" title=\"Android Studio\" align=\"center\" />\n\n为模拟器选择一个系统镜像（我选择的是第一个），点击 Download ，下载完成后，点击 Next 后，如图\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio5.png\" alt=\"Android Studio\" width=\"85%\" title=\"Android Studio\" align=\"center\" />\n\n最后，在模拟性能这里选择 **Hardware - GLES 2.0** 启动硬件加速，点击 Finish 完成\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/AndroidStudio6.png\" alt=\"Android Studio\" width=\"85%\" title=\"Android Studio\" align=\"center\" />\n\n\n## 配置编辑器\n\n前面我们已经配置好了 **Flutter SDK** 、**iOS 模拟器** 、**Android 模拟器** ，最后我们还需要配置一下编辑器，当然您可以选择 `Android Studio` 或者 `VS Code`，这里我选择的是轻量级的 `VS Code`。\n\n{% note default %} 如对 VS Code 不是很熟悉，可参考我之前写的 [VS Code 编辑技巧](https://h.lishaoy.net/VSCodeCodingSkills.html) {% endnote %}  \n\n打开终端进入我们刚才新建的 Flutter 项目\n\n```bash\ncd new_flutter\n```\n\n再用 VS Code 打开项目\n\n```bash\ncode ./\n```\n\n打开项目之后 <kbd>⌘</kbd> - <kbd>⇧</kbd> - <kbd>X</kbd> ,打开扩展，安装 **Flutter** 插件，如图\n\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/flutter_install.gif\" alt=\"Android Studio\" width=\"88%\" title=\"Flutter install\" align=\"center\" />\n\n完成之后，打开项目目录 `lib->main.dart` 文件， VS Code 会自动提示你安装 Dart 语言扩展包。\n\n## 运行项目\n\n现在，所有的准备工作都完成了，就可以开发、测试或运行项目了，在上面我们用 `Flutter create` 命令创建的 Flutter 项目，自带一个计数器的小功能，我们可以运行看看效果\n\n首先，您需要执行 `flutter doctor` 来检查一下环境是否正常\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/flutter_run.png \"Flutter run\" )\n\n如上图第二项提示 `Android license status unknown.` 意思是 Android 协议没安装好，可以执行以下命令，来解决问题\n\n```bash\nflutter doctor --android-licenses\n```\n\n如上图第三项是 iOS 真机的检查项，可以按照提示操作<br />\n如上图第四项是 Java 的编辑器检查，可不用理会，如你没有安装 IDEA 也不会有这个提示\n\n其实在我另一台电脑上全部都配置好了 😝 ，如图\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/flutter_run1.png \"Flutter run\" )\n\n最后，在 VS Code 编辑器里按 **F5** 后，会让你选择模拟器来运行 Flutter 程序，如图\n\n<img src=\"https://cdn.lishaoy.net/flutterInstall/flutter_run1.gif\" alt=\"Flutter run\" width=\"88%\" title=\"Flutter run\" align=\"center\" />\n\n这个是分别在 iOS 和 Android 运行 Flutter 的效果，如图\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/demo.png \"Flutter run\" )\n\n## 运行 Flutter 案例\n\n现在所有的都准备好了，您可以去我的 GitHub 上下载上篇文章中的案例代码，也可以 `git clone`\n\n```bash\ncd $HOME/Desktop #进到桌面\ngit clone https://github.com/persilee/flutter_pro.git #下载案例\ncd flutter_pro #进入案例目录\nflutter packages get #获取依赖包\ncode ./ #用 VS Code 打开\n```\n\n完成以上步骤后，在 VS Code 按 F5 选择模拟器，查看运行效果，如图\n\n![no-shadow](https://cdn.lishaoy.net/flutterInstall/flutter_run5.png \"Flutter Demo\" )\n\n好的，大功告成，这篇到处为止，下篇将手拉手带大家完成一个实操小案例 。","tags":["Dart"],"categories":["Dart"]},{"title":"Flutter：手拉手带你极速构建漂亮的跨平台移动应用 ✿ 初识","url":"%2FbeautifulFlutter.html","content":"\n{% li https://cdn.lishaoy.net/beautifulFlutter/flutter_750x400.png, Flutter, Flutter %}\n\n最近，学习了一些 `Flutter` 相关的知识，做了如下的小移动应用，当然是一套代码即可在 `iOS` 平台运行,也可以在 `Android` 运行。\n\n下面我将手拉手带您快速构建出漂亮的移动应用界面（如下👇小视频）\n\n<video id=\"flutter\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" poster=\"https://cdn.lishaoy.net/flutter_start/flutter5.1.png\"\n    data-setup=\"{'example_option':true}\">\n    <source src=\"https://cdn.lishaoy.net/flutter_start/flutter7.mp4\" type='video/mp4' />\n</video>\n\n<hr />\n\n<!-- more -->\n\n## 初识 Flutter\n\n[Flutter](https://flutterchina.club) 是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。\n\nGoogle 推出 Flutter 移动应用框架已经有三年，直到今年的 Google I/O 开发大会才正式介绍 `Flutter` 且发布 Beta 版本, [Flutter Google I/O 视频](https://www.youtube.com/watch?v=w2TcYP8qiRI) 这个是 `Flutter` 在油管（YouTube）的 Google I/O 开发者大会的视频，请自行观看。\n\n再来看看更加生动的视频介绍，加速您的初识 `Flutter`\n\n<video id=\"IntroducingFlutter\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" poster=\"https://cdn.lishaoy.net/beautifulFlutter/IntroducingFlutter1.png\"\n    data-setup=\"{'example_option':true}\">\n    <source src=\"https://cdn.lishaoy.net/beautifulFlutter/IntroducingFlutter.mp4\" type='video/mp4' />\n</video>\n\n<hr />\n\nGoogle 的广告应用 Adwords，阿里的闲鱼 App 都是基于 `Flutter` 框架开发的。\n\n以下是阿里巴巴用 Flutter 打造了5000多万用户闲鱼 App (Flutter Developer Story) 的故事视频\n\n<video id=\"FlutterDeveloperStory\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" poster=\"https://cdn.lishaoy.net/beautifulFlutter/FlutterDeveloperStory2.png\"\n    data-setup=\"{'example_option':true}\">\n    <source src=\"https://cdn.lishaoy.net/beautifulFlutter/FlutterDeveloperStory.mp4\" type='video/mp4' />\n</video>\n\n<hr />\n\n`Flutter` 作为谷歌推出的跨平台开发框架，一经推出便吸引了不少注意,在 GitHub 上的 Star 数已超过 **4W+** 。\n\n[CMTC全球大前端技术大会 ㄧ Flutter视频](https://www.bilibili.com/video/av27857568/) 这是 Google中国在 **bilibili** 上发布的视频，请自行观看。\n\n## Flutter 特性\n\n通过以上的视频，对于 `Flutter` 已有所认识，下面再来看看 `Flutter` 的以下特性\n\n### 热重载\n\n当你修改了代码 <kbd>⌘</kbd> - <kbd>S</kbd> ，可立刻看到效果，而且可以保持界面状态不变（如文本框输入的信息不会改变），如图：\n\n![no-shadow](https://cdn.lishaoy.net/beautifulFlutter/HotReload1.gif \"Hot reload\")\n\n### 设计\n\n`Flutter` 自带 Google 推行的设计系统：[Material Design](https://www.material.io) ，它提供了丰富的 **Material Design** 风格的组件（比如：按钮、输入框、对话框、导航栏、边栏等），而且也提供了丰富的 **iOS（Cupertino）** 风格的组件，利用这些风格的组件能够快速的构建应用，如图\n\n![no-shadow](https://cdn.lishaoy.net/beautifulFlutter/Material.jpg \"Material Design\")\n\n### widget\n\n**widget** 是 `Flutter` 应用程序基本构建块, `Flutter` 既不使用 WebView，也不使用操作系统的原生控件，相反 `Flutter` 使用自己的高性能渲染引擎来绘制**widget** ， `Flutter` 的中心思想是用 **widget** 构建你的 UI（**一切皆为 widget**） ，如图是官网给出的框架图：\n\n![no-shadow](https://cdn.lishaoy.net/beautifulFlutter/widget.png \"widget\")\n\n在这个架构里，你可以实现 `Flutter` 提供的所有现成的 **widget** ，也可以创建自己定制的 **widget** ，每个 **widget** 都是公开的，你可以从高层次且统一的 **widget** 中获得开发效率优势，这个设计的目标是为了用更少的代码做更多的事情。\n\n### 语言\n\n`Flutter` 使用 C、C ++、Dart 和 Skia（2D渲染引擎）技术构建，如上图，底层（engine）是用 C ++ ，框架是用 Dart ，当然我们开发使用的也是 Dart。\n\nDart 是 Google 发布的一种高效、简洁、拥有完整类型系统的 `结构化的Web编程` 语言， `Flutter` 官方给出为什么选择 Dart 作为开发语言的原因，如下\n\n- 开发人员的效率\n- 面向对象\n- 可预测，高性能\n- 快速内存分配\n\n对于开发者（语言使用者）来说，不必太担心，Dart 和 Java 、 JavaScript 比较类似，有一些程序语言基础，便可拿来即用（不清楚的看看语法、关键字、类型即可）。\n\n现在想必您对 `Flutter` 已经有了一定的认识，在之后的篇幅了会手拉手带你极速构如文头小视频的小应用。\n\n<img class=\"hidden\" src=\"https://cdn.lishaoy.net/beautifulFlutter/flutter_750x400.png\" alt=\"VS Code\" width=\"100%\" title=\"VS Code\" align=\"center\">","tags":["Dart"],"categories":["Dart"]},{"title":"VS Code：让你工作效率翻倍的23个插件和23个编辑技巧","url":"%2FVSCodeCodingSkills.html","content":"\n{% li https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code.jpg, VS Code, VS Code %}\n\n总结了一些平时常用且好用的 **VS Code** 的插件和编辑技巧分享出来。\n\n<!-- more -->\n\n## 外观\n\n### 主题\n这里我分享两款主题：\n\n1. **[Material Theme](https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme)**\n\n效果如图：\n\n![no-shadow](https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_theme1.jpg \"Material Theme\")\n\n2. **[An Old Hope Theme](https://marketplace.visualstudio.com/items?itemName=dustinsanders.an-old-hope-theme-vscode)**\n\n效果如图：\n\n![no-shadow](https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_theme2.jpg \"An Old Hope Theme\")\n\n### 图标\n\n3. **[Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)**当然，这两款主题的文件管理器（左侧）的 icon 小图标使用的是 Material Icon Theme\n\n### 字体及其他\n\n其他和外观相关的设置如下：\n\n```json\n{\n    \"editor.multiCursorModifier\": \"ctrlCmd\",\n    \"editor.formatOnPaste\": false,\n    \"workbench.activityBar.visible\": false,\n    \"workbench.iconTheme\": \"eq-material-theme-icons-darker\",\n    \"workbench.colorCustomizations\": {},\n    \"materialTheme.cache.workbench.settings\": {\n        \"themeColours\": \"Darker\",\n        \"accentPrevious\": \"Acid Lime\"\n    },\n    \"workbench.colorTheme\": \"Material Theme Darker\",\n    \"material-icon-theme.angular.iconsEnabled\": true,\n    \"material-icon-theme.folders.icons\": \"specific\",\n    \"editor.lineHeight\": 24,\n    \"editor.fontLigatures\": true,\n    \"editor.fontFamily\": \"FiraCode-Medium\"\n}\n```\n\n特别注意的是 `\"editor.lineHeight\": 24,` 和 `\"editor.fontFamily\": \"FiraCode-Medium\"` 。\n\n`\"editor.lineHeight\": 24,` ： 设置代码的行间距，这里比默认的稍大些，就这一点小小的改变，让代码看起来清爽整洁。\n\n`\"editor.fontFamily\": \"FiraCode-Medium\"` ： 设置字体，这种字体会让代码看起来更形象生动，如下\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_code3.png\" alt=\"FiraCode-Medium字体\" width=\"100%\" title=\"FiraCode-Medium字体\" align=\"center\" />\n\n红色竖线左边是使用了 **FiraCode-Medium** 字体的效果，红色竖线右边是没有使用 **FiraCode-Medium** 字体的效果\n\n关于 **FiraCode-Medium** 字体更多效果可查阅 [https://github.com/tonsky/FiraCode](https://github.com/tonsky/FiraCode) 地址。\n\n## 代码管理\n\n### 格式化\n\n4. **[Beautify](https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify)** ：格式化的时候，给出格式化文本选项，如下\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_Beatify.gif\" alt=\"Beautify\" width=\"100%\" title=\"Beautify\" align=\"center\" />\n\n5. **[Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)** ：个人比较喜欢这个，看起来代码更清晰，如下\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_Prettier.gif\" alt=\"Prettier\" width=\"100%\" title=\"Prettier\" align=\"center\" />\n\n{% note info %} 当然，大家可以自定义快捷键，也可以按 <kbd>⌘</kbd> - <kbd>⇧</kbd> - <kbd>P</kbd>  来搜索相关命令 {% endnote %}  \n\n### 代码检查\n\n6. [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) ：检查 `js` 语法规范，你可以使用不同的规范，如 [airbnb](https://www.npmjs.com/package/eslint-config-airbnb) 、[standard](https://github.com/standard/eslint-config-standard) 、[google](https://github.com/google/eslint-config-google)。\n7. [TSLint](https://marketplace.visualstudio.com/items?itemName=eg2.tslint) ：检查 `typescript` 语法规范。\n8. [Stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint) ：检查 `CSS/SCSS/Less` 语法规范。\n9. [Markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint) ：检查 `markdown` 语法规范。\n\n### 自动补全\n\n以下插件点击链接可以查看gif动图，详细了解具体功能。\n10. [Emmet](https://emmet.io) ：大家应该很熟悉这个插件了（很好用），VS Code 已经内置了，很到位。\n11. [Auto Close Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag) ：自动闭合 `html` 等标签 （</...>）。\n12. [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag) ：修改 `html` 标签时，自动修改闭合标签。\n13. [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) ：自动提示补全路径。\n\n### 代码片段\n\n14. **snippets** ：搭建可以自己安装各种代码片段（vue、react、angular等），这里就不列举。\n\n## 功能扩展\n\n以下的功能扩展插件大部分都有gif动图，可点击链接了解详细功能\n15. [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer) ：让代码的各种括号呈现不同的颜色。\n16. [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner) ：可以在编辑器里直接运行代码，查看结果。\n17. [Color Picker](https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color) ：可以直接在编辑器里打开色板，选择各种模式的颜色。\n18. [Document This](https://marketplace.visualstudio.com/items?itemName=joelday.docthis) ：可以给函数、类等自动的加上详细的注释。\n19. [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory) ：方便的查看git版本管理的详细信息。\n20. [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) ：可以一键在本地启动服务器。\n21. [Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync) ：重点介绍下这个插件，如果你有两台电脑（比如，家里和公司）都使用 VS Code ，可是在公司或家里对 VS Code 安装了插件或者修改了配置，回到家或公司又要重新弄一次，这个插件就能解决问题，同步多台电脑设置。\n\n只需要把配置上传到GitHub，在另一个地方下载配置即可，如下\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_Sync.gif\" alt=\"Settings Sync\" width=\"100%\" title=\"Settings Sync\" align=\"center\" />\n\n22. [gi](https://marketplace.visualstudio.com/items?itemName=rubbersheep.gi) ：可以给 `.gitignore` 文件添加各种语言忽略文件配置。\n23. [Polacode](https://marketplace.visualstudio.com/items?itemName=pnp.polacode) ：可以把代码生成图片（有些地方发代码结构会乱也没有代码高亮，这时候就可以生成图片再发）。\n\n## 编辑技巧\n\n### 光标\n\n1. 把光标移到文件的首部或尾部\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_1.gif\" alt=\"⌘ - ↑ 或 ⌘ - ↓\" width=\"100%\" title=\"⌘ - ↑ 或 ⌘ - ↓\" align=\"center\" />\n\n2. 把光标移动到行的首部或者尾部\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_2.gif\" alt=\"⌘ - ← 或 ⌘ - →\" width=\"100%\" title=\"⌘ - ← 或 ⌘ - →\" align=\"center\" />\n\n3. 按单词移动\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_3.gif\" alt=\"⌥ - ← 或 ⌥ - →\" width=\"100%\" title=\"⌥ - ← 或 ⌥ - →\" align=\"center\" />\n\n4. 按单词大小写分解移动光标\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_4.gif\" alt=\"⌥ - ⌃ - ← 或 ⌥ - ⌃ - →\" width=\"100%\" title=\"⌥ - ⌃ - ← 或 ⌥ - ⌃ - →\" align=\"center\" />\n\n### 选择\n\n5. 选择行以上或以下全部内容\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_5.gif\" alt=\"⇧ - ⌘ - ↑ 或 ⇧ - ⌘ - ↓\" width=\"100%\" title=\"⇧ - ⌘ - ↑ 或 ⇧ - ⌘ - ↓\" align=\"center\" />\n\n6. 选择到行首或行尾的内容\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_6.gif\" alt=\"⇧ - ⌘ - ← 或 ⇧ - ⌘ - →\" width=\"100%\" title=\"⇧ - ⌘ - ← 或 ⇧ - ⌘ - →\" align=\"center\" />\n\n7. 按字母或单词选择\n\n- <kbd>⇧</kbd> - <kbd>←</kbd> 、 <kbd>⇧</kbd> - <kbd>→</kbd> 按字母选择   \n- <kbd>⇧</kbd> - <kbd>⌥</kbd> - <kbd>←</kbd> 、 <kbd>⇧</kbd> - <kbd>⌥</kbd> - <kbd>→</kbd> 按单词选择\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_7.gif\" alt=\"⇧ - ← 、 ⇧ - → 或 ⇧ - ⌥ - ← 、 ⇧ - ⌥ - →\" width=\"100%\" title=\"⇧ - ← 、 ⇧ - → 或 ⇧ - ⌥ - ← 、⇧ - ⌥ - →\" align=\"center\" />\n\n8. 伸缩选择\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_8.gif\" alt=\"⇧ - ⌃ - ⌘ - ← 或 ⇧ - ⌃ - ⌘ - →\" width=\"100%\" title=\"⇧ - ⌃ - ⌘ - ← 或 ⇧ - ⌃ - ⌘ - →\" align=\"center\" />\n\n9. 选择匹配单词\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_9.gif\" alt=\"⌘ - D 或 ⌘ - U\" width=\"100%\" title=\"⌘ - D 或 ⌘ - U\" align=\"center\" />\n\n### 行\n\n10. 向上或向下移动行\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_10.gif\" alt=\"⌥ - ↑ 或 ⌥ - ↓\" width=\"100%\" title=\"⌥ - ↑ 或 ⌥ - ↓\" align=\"center\" />\n\n11. 复制或删除行\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_11.gif\" alt=\"⌥ - ⇧ - ↓ 或 ⌘ - ⇧ - K\" width=\"100%\" title=\"⌥ - ⇧ - ↓ 或 ⌘ - ⇧ - K\" align=\"center\" />\n\n12. 多行合并成一行\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_12.gif\" alt=\"⌘ - J\" width=\"100%\" title=\"⌘ - J\" align=\"center\" />\n\n13. 缩进或伸缩行\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_13.gif\" alt=\"⌘ - [ 或 ⌘ - ]\" width=\"100%\" title=\"⌘ - [ 或 ⌘ - ]\" align=\"center\" />\n\n14. 在当前行之上或下插入行\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_14.gif\" alt=\"⌘ - ↩ 或 ⌘ - ⇧ - ↩\" width=\"100%\" title=\"⌘ - ↩ 或 ⌘ - ⇧ - ↩\" align=\"center\" />\n\n### 多行\n\n15. 鼠标点击，多行编辑\n\n按 <kbd>⌘</kbd> 选择编辑点，按 <kbd>⎋</kbd> 退出多行编辑\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_15.gif\" alt=\"⌘\" width=\"100%\" title=\"⌘\" align=\"center\" />\n\n16. 使用快捷键多行编辑\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_16.gif\" alt=\"⌘ - ⌥ - ↓ 或 ⌘ - ⌥ - ↑\" width=\"100%\" title=\"⌘ - ⌥ - ↓ 或 ⌘ - ⌥ - ↑\" align=\"center\" />\n\n17. 在所选择的行的结尾插入编辑点\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_17.gif\" alt=\"⇧ - ⌥ - I\" width=\"100%\" title=\"⇧ - ⌥ - I\" align=\"center\" />\n\n18. 选择栏位\n\n按 <kbd>⇧</kbd> - <kbd>⌘</kbd> 再选择栏位\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_18.gif\" alt=\"⇧ - ⌘\" width=\"100%\" title=\"⇧ - ⌘\" align=\"center\" />\n\n### 高级\n\n19. 查看类或方法的定义\n\n- 按 <kbd>⌥</kbd> 点击，可以在新页面查看\n- 按 <kbd>⇧</kbd> - <kbd>⌥</kbd> - <kbd>⌘</kbd> 点击，可以在新组查看\n- 按 <kbd>⇧</kbd> - <kbd>F12</kbd> 点击，可以在当前页面查看\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_19.gif\" alt=\"查看定义\" width=\"100%\" title=\"查看定义\" align=\"center\" />\n\n20. 折叠代码\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_20.gif\" alt=\"⌥ - ⌘ - ] 或 ⌥ - ⌘ - [\" width=\"100%\" title=\"⌥ - ⌘ - ] 或 ⌥ - ⌘ - [\" align=\"center\" />\n\n21. 去掉选择行的尾部空格\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_21.gif\" alt=\"⌘ - K 、 ⌘ - X\" width=\"100%\" title=\"⌘ - K 、 ⌘ - X\" align=\"center\" />\n\n22. 定位到指定行号\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_22.gif\" alt=\"⌃ - G\" width=\"100%\" title=\"⌃ - G\" align=\"center\" />\n\n23. 在文件里查找类或方法\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_23.gif\" alt=\"@\" width=\"100%\" title=\"@\" align=\"center\" />\n\n最后，如果记不住这些快捷键，可以按 <kbd>⌘</kbd> - <kbd>K</kbd> 、 <kbd>⌘</kbd> - <kbd>S</kbd> 搜索对应快捷键绑定\n\n<img src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_24.gif\" alt=\"搜索快捷键\" width=\"100%\" title=\"搜索快捷键\" align=\"center\" />\n\n<img class=\"hidden\" src=\"https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code.jpg\" alt=\"VS Code\" width=\"100%\" title=\"VS Code\" align=\"center\">","tags":["VS Code"],"categories":["工具"]},{"title":"百度统计","url":"%2Fbaidustatistics.html","content":"\n{% li https://cdn.lishaoy.net/baidustatistics/lishaoy.net.990x699.jpg, lishaoy.net, lishaoy.net %}\n\n前天，弄了个百度统计，看看数据还挺有意思。。。\n \n<!-- more -->\n\n**站点** 接入 **百度统计** ，还是挺简单的：\n\n- 首先，去 [百度统计](https://tongji.baidu.com/web/welcome/login) 注册账号，根据提示绑定自己站点域名\n- 之后，把提供的 `js` 代码放到自己站点\n\n```javascript \n  //百度统计\n  var _hmt = _hmt || [];\n  (function () {\n    var hm = document.createElement(\"script\");\n    hm.src = \"https://hm.baidu.com/hm.js?5fd52c901f2213883f51a476eab3914b\";\n    var l = document.getElementsByTagName(\"script\").length;\n    var s = document.getElementsByTagName(\"script\")[l - 1];\n    s.parentNode.insertBefore(hm, s);\n  })();\n```\n\n这些设置好之后，就可以看到统计数据了，来看看 👀 _2018-05-29_ 当天的统计数据情况如何\n\n#### 今日流量\n\n纵轴分别是 _今日、昨日、预计今日_ ，横轴分别是 _PV、UV、IP、跳出率、平均访问时长_ 等 （预计今日的数据，不是很靠谱）\n\n<img src=\"https://cdn.lishaoy.net/baidustatistics/1.png\" alt=\"今日流量\" width=\"100%\" title=\"今日流量\" align=\"center\" />\n\n\n#### 来源网站\n\n会列出访客从哪儿来到你的**站点**，以及会统计访问时长等\n\n<img src=\"https://cdn.lishaoy.net/baidustatistics/2.png\" alt=\"来源网站\" width=\"100%\" title=\"来源网站\" align=\"center\" />\n\n#### 受欢迎页面\n\n会统计每个页面的 _浏览量、退出次数、平均停留时间_ 等\n\n<img src=\"https://cdn.lishaoy.net/baidustatistics/3.png\" alt=\"受欢迎页面\" width=\"100%\" title=\"受欢迎页面\" align=\"center\" />\n\n#### 新老访客\n\n会统计新老访客 _浏览量、平均访问时长、平均访问页数_ 等\n\n<img src=\"https://cdn.lishaoy.net/baidustatistics/4.png\" alt=\"新老访客\" width=\"100%\" title=\"新老访客\" align=\"center\" />\n\n#### 地域分布\n\n会统计访客来自哪个 _国家、省份、城市、网络运营商_ 等\n\n<img src=\"https://cdn.lishaoy.net/baidustatistics/5.png\" alt=\"地域分布\" width=\"100%\" title=\"地域分布\" align=\"center\" />\n\n这里我只展示部分统计功能，如想了解其它更多功能，可去 [百度统计](https://tongji.baidu.com/web/welcome/login) 网站查看。","tags":["统计"],"categories":["hexo"]},{"title":"前端性能优化","url":"%2FwebOptimize.html","content":"\n{% fi https://cdn.lishaoy.net/webOptimize/Optimize.png, web optimize, web optimize %}\n\n关于 **性能优化** 是个大的面，这篇文章主要涉及到 **前端** 的几个点，如 **前端性能优化** 的流程、常见技术手段、工具等。\n\n提及 **前端性能优化** ，大家应该都会想到 **雅虎军规**，本文会结合 **雅虎军规** 融入自己的了解知识，进行的总结和梳理 😜\n\n<!-- more -->\n\n首先，我们先来看看 👀 **雅虎军规** 的 **35** 条。\n\n{% note info %} \n1. 尽量减少 HTTP 请求个数——须权衡\n2. 使用 **CDN**（内容分发网络）\n3. 为文件头指定 Expires 或 Cache-Control ，使内容具有缓存性。\n4. 避免空的 src 和 href\n5. 使用 gzip 压缩内容\n6. 把 CSS 放到顶部\n7. 把 JS 放到底部\n8. 避免使用 CSS 表达式\n9. 将 CSS 和 JS 放到外部文件中\n10. 减少 DNS 查找次数\n11. 精简 CSS 和 JS\n12. 避免跳转\n13. 剔除重复的 JS 和 CSS\n14. 配置 ETags\n15. 使 AJAX 可缓存\n16. 尽早刷新输出缓冲\n17. 使用 GET 来完成 AJAX 请求\n18. 延迟加载\n19. 预加载\n20. 减少 DOM 元素个数\n21. 根据域名划分页面内容\n22. 尽量减少 iframe 的个数\n23. 避免 404\n24. 减少 Cookie 的大小\n25. 使用无 cookie 的域\n26. 减少 DOM 访问\n27. 开发智能事件处理程序\n28. 用 <link> 代替 @import\n29. 避免使用滤镜\n30. 优化图像\n31. 优化 CSS Spirite\n32. 不要在 HTML 中缩放图像——须权衡\n33. favicon.ico要小而且可缓存\n34. 保持单个内容小于25K\n35. 打包组件成复合文本\n{% endnote %}  \n\n如对 **雅虎军规** 的具体细则内容不是很了解，可自行去各搜索 🔍 引擎 ，搜索 **雅虎军规** 了解详情。\n\n## 压缩 合并\n\n对于 **前端性能优化** 自然要关注 **首屏** 打开速度，而这个速度，很大因素是花费在网络请求上，那么怎么减少网络请求的时间呢？\n\n- 减少网络请求次数 \n- 减小文件体积\n- 使用 `CDN` 加速\n\n所以 **压缩、合并** 就是一个解决方案，当然可以用 `gulp` 、 `webpack` 、 `grunt` 等构建工具 **压缩、合并**\n\n### `JS、CSS` 压缩 合并\n\n例如：`gulp js、css` 压缩、合并代码如下 👇\n\n```javascript javascript https://lishaoy.net/webOptimize.html#JS、CSS-压缩-合并 gulpfile.js\n//压缩、合并js\ngulp.task('scripts', function () {\n    return gulp.src([\n        './public/lib/fastclick/lib/fastclick.min.js',\n        './public/lib/jquery_lazyload/jquery.lazyload.js',\n        './public/lib/velocity/velocity.min.js',\n        './public/lib/velocity/velocity.ui.min.js',\n        './public/lib/fancybox/source/jquery.fancybox.pack.js',\n        './public/js/src/utils.js',\n        './public/js/src/motion.js',\n        './public/js/src/scrollspy.js',\n        './public/js/src/post-details.js',\n        './public/js/src/bootstrap.js',\n        './public/js/src/push.js',\n        './public/live2dw/js/perTips.js',\n        './public/live2dw/lib/L2Dwidget.min.js',\n        './public/js/src/love.js',\n        './public/js/src/busuanzi.pure.mini.js',\n        './public/js/src/activate-power-mode.js'\n    ]).pipe(concat('all.js')).pipe(minify()).pipe(gulp.dest('./public/dist/'));\n});\n\n// 压缩、合并 CSS \ngulp.task('css', function () {\n    return gulp.src([\n        './public/lib/font-awesome/css/font-awesome.min.css',\n        './public/lib/fancybox/source/jquery.fancybox.css',\n        './public/css/main.css',\n        './public/css/lib.css',\n        './public/live2dw/css/perTips.css'\n    ]).pipe(concat('all.css')).pipe(minify()).pipe(gulp.dest('./public/dist/'));\n});\n```\n然后，再把 **压缩、合并** 的 `JS、CSS` 放入 `CDN` , 👀 看看效果如何\n\n如图：* **压缩、合并** 且放入 `CND` 之后的效果 *\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/concatJs.png\" alt=\"首页请求速度(js)\" width=\"100%\" title=\"首页请求速度(js)\" align=\"center\" />\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/concatCss.png\" alt=\"首页请求速度(css)\" width=\"100%\" title=\"首页请求速度(css)\" align=\"center\" />\n\n以上是 [lishaoy.net](https://lishaoy.net) 清除缓存后的 **首页** 请求速度。\n\n可见，请求时间是 **4.59 s** ，总请求个数 **51** ， 而 `js` 的请求个数是 **8** ，`css` 的请求个数是 **3** _（其实就 all.css 一个，其它 2 个是 Google浏览器加载的）_， 而没使用 **压缩、合并** 时候，请求时间是 **10** 多秒，总请求个数有 **70** 多个，`js` 的请求个数是 **20** 多个 ，对比请求时间 **性能** 提升 **1倍** 多\n\n如图：*有缓存下的首页效果*\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/concatJs2.png\" alt=\"首页请求速度（缓存）\" width=\"100%\" title=\"首页请求速度（缓存）\" align=\"center\" />\n\n基本都是秒开 😝\n\n{% note warning %}\n*Tips：在 **压缩、合并** 后，单个文件控制在 25 ~ 30 KB左右，同一个域下，最好不要多于5个资源*\n{% endnote %} \n\n### 图片压缩、合并 \n\n例如：`gulp` 图片压缩代码如下 👇\n\n```javascript javascript https://lishaoy.net/webOptimize.html#图片压缩、合并 gulpfile.js\n//压缩image\ngulp.task('imagemin', function () {\n    gulp.src('./public/**/*.{png,jpg,gif,ico,jpeg}')\n        .pipe(imagemin())\n        .pipe(gulp.dest('./public'));\n});\n```\n\n图片的合并可以采用 `CSS Spirite`，方法就是把一些小图用 `PS` 合成一张图，用 `css` 定位显示每张图片的位置\n\n```css css\n.top_right .phone {\n    background: url(../images/top_right.png) no-repeat 7px -17px;\n    padding: 0 38px;\n}\n\n.top_right .help {\n    background: url(../images/top_right.png) no-repeat 0 -47px;\n    padding: 0 38px;\n}\n```\n\n然后，把 **压缩** 的图片放入 `CDN` , 👀 看看，效果如何\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/minImages.png\" alt=\"首页请求速度（images）\" width=\"100%\" title=\"首页请求速度（images）\" align=\"center\" />\n\n可见，请求时间是 **1.70 s** ,总请求个数 **50** ， 而 `img` 的请求个数是 **15** _（这里因为首页都是大图，就没有合并，只是压缩了）_ ，但是，效果很好 😀 ，从 **4.59 s** 缩短到 **1.70 s**, 性能又提升一倍。\n\n再看看有缓存情况如何 😏\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/minImages1.png\" alt=\"首页请求速度（images 缓存）\" width=\"100%\" title=\"首页请求速度（images 缓存）\" align=\"center\" />\n\n请求时间是 **1.05 s** ，有缓存和无缓存基本差不多\n\n{% note warning %}\n*Tips：大的图片在不同终端，应该使用不同分辨率，而不应该使用缩放（百分比）*\n{% endnote %} \n\n整个 **压缩、合并** _（js、css、img）_ 再放入 `CDN` ，请求时间从 **10** 多秒 ，到最后的 **1.70 s** ，性能提升 **5** 倍多，可见，这个操作必要性。\n\n---\n\n## 缓存\n\n缓存会根据请求保存输出内容的副本，例如 **页面、图片、文件**，当下一个请求来到的时候:如果是相同的`URL`，缓存直接使 用本地的副本响应访问请求，而不是向源服务器再次发送请求。因此，可以从以下 **2** 个方面提升性能。\n\n- 减少相应延迟，提升响应时间\n- 减少网络带宽消耗，节省流量\n\n我们用两幅图来了解下浏览器的 **缓存机制**\n\n**浏览器第一次请求**\n\n![no-shadow](https://cdn.lishaoy.net/webOptimize/webCache3.png \"第一次请求\")\n\n**浏览器再次请求**\n\n![no-shadow](https://cdn.lishaoy.net/webOptimize/webCache4.png \"再次请求\")\n\n从以上两幅图中，可以清楚的了解浏览器 **缓存** 的过程。\n首次访问一个 `URL` ，没有 **缓存** ，但是，服务器会响应一些 `header` 信息，如：`expires、cache-control、last-modified、etag` 等，来记录下次请求是否缓存、如何缓存。\n再次访问这个 `URL` 时候，浏览器会根据首次访问返回的 `header` 信息，来决策是否缓存、如何缓存。\n我们重点来分析下第二幅图，其实是分两条线路，如下 👇\n\n- **第一条线路：** 当浏览器再次访问某个 `URL` 时，会先获取资源的 `header` 信息，判断是否命中强缓存 _（cache-control和expires）_ ，如命中，直接从缓存获取资源，包括响应的 `header` 信息 _（请求不会和服务器通信）_ ，也就是 **强缓存** ，如图\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/webCache2.png\" alt=\"强缓存\" width=\"100%\" title=\"强缓存\" align=\"center\" />\n\n\n- **第二条线路：** 如没有命中 **强缓存** ，浏览器会发送请求到服务器，请求会携带第一次请求返回的有关缓存的 `header` 信息 _（Last-Modified/If-Modified-Since和Etag/If-None-Match）_ ，由服务器根据请求中的相关 `header` 信息来比对结果是否协商缓存命中；若命中，则服务器返回新的响应 `header` 信息更新缓存中的对应 `header` 信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容，也就是 **协商缓存**。\n\n现在，我们了解到浏览器缓存机制分为 **强缓存、协商缓存**，再来看看他们的区别 👇\n\n|  缓存策略   |  获取资源形式  |  状态码                   |  发送请求到服务器               |\n| :--------: | :----------: | :----------------------: | :--------------------------: |\n|  强缓存     | 从缓存取      | 200（from memory cache）  |  否，直接从缓存取               |\n|  协商缓存   | 从缓存取      | 304（not modified）       |  是，通过服务器来告知缓存是否可用  |\n\n### \b强缓存\n\n与强缓存相关的 `header` 字段有两个：\n\n#### expires\n\n**expires：** 这是 `http1.0` 时的规范，它的值为一个绝对时间的 **GMT** 格式的时间字符串，如 `Mon, 10 Jun 2015 21:31:12 GMT` ，如果发送请求的时间在 **expires** 之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源\n\n#### cache-control\n\n**cache-control:** `max-age=number` ，这是 `http1.1` 时出现的 `header` 信息，主要是利用该字段的 `max-age` 值来进行判断，它是一个相对值；资源第一次的请求时间和 **Cache-Control** 设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则未命中， **cache-control** 除了该字段外，还有下面几个比较常用的设置值：\n\n- **no-cache：** 不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 `ETag` ，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。\n- **no-store：** 直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。\n- **public：** 可以被所有的用户缓存，包括终端用户和 `CDN` 等中间代理服务器。\n- **private：** 只能被终端用户的浏览器缓存，不允许 `CDN` 等中继缓存服务器对其缓存。\n\n{% note warning %}\n*Tips：如果 cache-control 与 expires 同时存在的话，cache-control 的优先级高于 expires*\n{% endnote %} \n\n### \b协商缓存\n\n协商缓存都是由浏览器和服务器协商，来确定是否缓存，协商主要通过下面两组 `header` 字段，这两组字段都是成对出现的，即第一次请求的响应头带上某个字段 _（ **Last-Modified** 或者 **Etag** ）_ ，则后续请求会带上对应的请求字段 _（**If-Modified-Since** 或者 **If-None-Match** ）_ ，若响应头没有 **Last-Modified** 或者 **Etag** 字段，则请求头也不会有对应的字段。\n\n#### Last-Modified/If-Modified-Since\n\n二者的值都是 `GMT` 格式的时间字符串，具体过程：\n\n- 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 `respone` 的 `header` 加上 **Last-Modified** 字段，这个 `header` 字段表示这个资源在服务器上的最后修改时间\n\n- 浏览器再次跟服务器请求这个资源时，在 `request` 的 `header` 上加上 **If-Modified-Since** 字段，这个 `header` 字段的值就是上一次请求时返回的 **Last-Modified** 的值\n\n- 服务器再次收到资源请求时，根据浏览器传过来 **If-Modified-Since** 和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回 `304 Not Modified` ，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回 `304 Not Modified` 的响应时，`response header` 中不会再添加 **Last-Modified的header** ，因为既然资源没有变化，那么 **Last-Modified** 也就不会改变，这是服务器返回 `304` 时的 `response header`\n\n- 浏览器收到 `304` 的响应后，就会从缓存中加载资源\n\n- 如果协商缓存没有命中，浏览器直接从服务器加载资源时，**Last-Modified** 的 `Header` 在重新加载的时候会被更新，下次请求时，**If-Modified-Since** 会启用上次返回的**Last-Modified** 值\n\n#### Etag/If-None-Match\n\n这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变；其判断过程与 **Last-Modified、If-Modified-Since** 类似，与 **Last-Modified** 不一样的是，当服务器返回 `304 Not Modified` 的响应时，由于 **ETag** 重新生成过，`response header` 中还会把这个 **ETag** 返回，即使这个 **ETag** 跟之前的没有变化。\n\n\n{% note warning %}\n*Tips：Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。*\n{% endnote %} \n\n### Service Worker\n\n#### 什么是 Service Worker\n    \n{% blockquote Service Worker API http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html developer.mozilla.org %} \n**Service Worker** 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API。\n{% endblockquote %}\n</br>\n**Service worker** 可以解决目前离线应用的问题，同时也可以做更多的事。 **Service Worker** 可以使你的应用先访问本地缓存资源，所以在离线状态时，在没有通过网络接收到更多的数据前，仍可以提供基本的功能（一般称之为 Offline First）。这是原生APP 本来就支持的功能，这也是相比于 `web app` ，原生 `app` 更受青睐的主要原因\n\n再来看看 👀 **service worker** 能做些什么\n\n- 后台消息传递\n- 网络代理，转发请求，伪造响应\n- 离线缓存\n- 消息推送\n- ...\n\n{% note success %} \n***本文主要以（[lishaoy.net](https://lishaoy.net)）资源缓存为例,阐述下 service worker如何工作***\n{% endnote %}  \n\n#### 生命周期\n**service worker** 初次安装的生命周期，如图 🌠\n\n![no-shadow](https://cdn.lishaoy.net/webOptimize/serviceWorker.png \"sw生命周期\")\n\n从上 👆 图可知，**service worker** 工作的流程：\n1. **安装：**  `service worker URL` 通过 `serviceWorkerContainer.register()` 来获取和注册。\n2. **激活：** 当 `service worker` 安装完成后，会接收到一个激活事件(activate event)。 `onactivate` 主要用途是清理先前版本的 `service worker` 脚本中使用的资源。\n3. **监听：** 两种状态\n    - 终止以节省内存；\n    - 监听获取 `fetch` 和消息 `message` 事件。\n4. **销毁：** 是否销毁由浏览器决定，如果一个 `service worker` 长期不使用或者机器内存有限，则可能会销毁这个 `worker` 。\n\n{% note warning %}\n*Tips：激活成功之后，在 Chrome 浏览器里，可以访问 chrome://inspect/#service-workers和 chrome://serviceworker-internals/ 可以查看到当前运行的service worker ，如图 👇。*\n{% endnote %} \n<img src=\"https://cdn.lishaoy.net/webOptimize/serviceWorker1.png\" alt=\"service worker\" width=\"100%\" title=\"service worker\" align=\"center\" />\n\n**现在，我们来写个简单的例子 🌰 **\n\n#### 注册 service worker\n\n要安装 `service worker` ，你需要在你的页面上注册它。这个步骤告诉浏览器你的 `service worker` 脚本在哪里。\n\n```javascript javascript https://lishaoy.net/webOptimize.html#注册-service-worker app.js\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js').then(function(registration) {\n    // Registration was successful\n    console.log('ServiceWorker registration successful with scope: ',    registration.scope);\n  }).catch(function(err) {\n    // registration failed :(\n    console.log('ServiceWorker registration failed: ', err);\n  });\n}\n```\n\n上面的代码检查 `service worker API` 是否可用，如果可用，`service worker /sw.js` 被注册。如果这个 `service worker` 已经被注册过，浏览器会自动忽略上面的代码。\n\n#### 激活 service worker\n\n在你的 `service worker` 注册之后，浏览器会尝试为你的页面或站点安装并激活它。 \n`install` 事件会在安装完成之后触发。`install` 事件一般是被用来填充你的浏览器的离线缓存能力。你需要为 `install` 事件定义一个 `callback` ，并决定哪些文件你想要缓存.\n\n```javascript javascript https://lishaoy.net/webOptimize.html#激活-service-worker sw.js\n// The files we want to cache\nvar CACHE_NAME = 'my-site-cache-v1';\nvar urlsToCache = [\n  '/',\n  '/css/main.css',\n  '/js/main.js'\n];\n\nself.addEventListener('install', function(event) {\n  // Perform install steps\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(function(cache) {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n```\n\n在我们的 `install callback` 中，我们需要执行以下步骤：\n- 开启一个缓存\n- 缓存我们的文件\n- 决定是否所有的资源是否要被缓存\n\n上面的代码中，我们通过 `caches.open` 打开我们指定的 `cache` 文件名，然后我们调用 `cache.addAll` 并传入我们的文件数组。这是通过一连串 `promise` _（caches.open 和 cache.addAll）_ 完成的。`event.waitUntil` 拿到一个 `promise` 并使用它来获得安装耗费的时间以及是否安装成功。\n\n#### 监听 service worker\n\n现在我们已经将你的站点资源缓存了，你需要告诉 `service worker` 让它用这些缓存内容来做点什么。有了 `fetch` 事件，这是很容易做到的。\n\n每次任何被 `service worker` 控制的资源被请求到时，都会触发 `fetch` 事件，我们可以给 `service worker` 添加一个 `fetch` 的事件监听器，接着调用 `event` 上的 `respondWith()` 方法来劫持我们的 **HTTP** 响应，然后你用可以用自己的方法来更新他们。\n\n```javascript javascript https://lishaoy.net/webOptimize.html#监听-service-worker sw.js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request);\n  );\n});\n```\n\n`caches.match(event.request)` 允许我们对网络请求的资源和 `cache` 里可获取的资源进行匹配，查看是否缓存中有相应的资源。这个匹配通过 `url` 和 `vary header` 进行，就像正常的 **HTTP** 请求一样。\n\n那么，我们如何返回 `request` 呢，下面 👇 就是一个例子 🌰\n\n```javascript javascript https://lishaoy.net/webOptimize.html#监听-service-worker sw.js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n\n        return fetch(event.request);\n      }\n    )\n  );\n});\n```\n上面的代码里我们定义了 `fetch` 事件，在 `event.respondWith` 里，我们传入了一个由 `caches.match` 产生的 `promise.caches.match` 查找 `request` 中被 `service worker` 缓存命中的 `response` 。\n如果我们有一个命中的 `response` ，我们返回被缓存的值，否则我们返回一个实时从网络请求 `fetch` 的结果。\n\n#### sw-toolbox\n\n{% note success %}\n*当然，我也可以使用第三方库，例如：[lishaoy.net](https://lishaoy.net) 使用了 **sw-toolbox**。*\n{% endnote  %}\n\n**sw-toolbox** 使用非常简单，下面 👇 就是 [lishaoy.net](https://lishaoy.net) 的一个例子 🌰\n\n```javascript javascript https://lishaoy.net/webOptimize.html#sw-toolbox persilee.js\n  \"serviceWorker\" in navigator ? navigator.serviceWorker.register('/sw.js').then(function () {\n    navigator.serviceWorker.controller ? console.log(\"Assets cached by the controlling service worker.\") : console.log(\"Please reload this page to allow the service worker to handle network operations.\")\n  }).catch(function (e) {\n    console.log(\"ERROR: \" + e)\n  }) : console.log(\"Service workers are not supported in the current browser.\")\n```\n\n以上是 **注册** 一个 `service woker`\n\n```javascript javascript https://lishaoy.net/webOptimize.html#sw-toolbox sw.js\n\"use strict\";\n(function () {\n    var cacheVersion = \"20180527\";\n    var staticImageCacheName = \"image\" + cacheVersion;\n    var staticAssetsCacheName = \"assets\" + cacheVersion;\n    var contentCacheName = \"content\" + cacheVersion;\n    var vendorCacheName = \"vendor\" + cacheVersion;\n    var maxEntries = 100;\n    self.importScripts(\"/lib/sw-toolbox/sw-toolbox.js\");\n    self.toolbox.options.debug = false;\n    self.toolbox.options.networkTimeoutSeconds = 3;\n\n    self.toolbox.router.get(\"/images/(.*)\", self.toolbox.cacheFirst, {\n        cache: {\n            name: staticImageCacheName,\n            maxEntries: maxEntries\n        }\n    });\n\n    self.toolbox.router.get('/js/(.*)', self.toolbox.cacheFirst, {\n        cache: {\n            name: staticAssetsCacheName,\n            maxEntries: maxEntries\n        }\n    });\n    self.toolbox.router.get('/css/(.*)', self.toolbox.cacheFirst, {\n        cache: {\n            name: staticAssetsCacheName,\n            maxEntries: maxEntries\n        }\n    \n    ......\n\n    self.addEventListener(\"install\", function (event) {\n        return event.waitUntil(self.skipWaiting())\n    });\n    self.addEventListener(\"activate\", function (event) {\n        return event.waitUntil(self.clients.claim())\n    })\n})();\n```\n就这样搞定了 🍉 _(具体的用法可以去 [sw-toolbox](https://googlechromelabs.github.io/sw-toolbox/api.html#main) 查看)_\n\n有的同学就问，`service worker` 这么好用，这个缓存空间到底是多大？其实，在  **Chrome** 可以看到，如图\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/storageQuota.png\" alt=\"fstorage quota\" width=\"100%\" title=\"storage quota\" align=\"center\" />\n\n可以看到，大概有 **30G** ，我的站点只用了 **183MB** ，完全够用了 🍓\n\n最后，来两张图 \n\n<img src=\"https://cdn.lishaoy.net/webOptimize/serviceWorker2.png\" alt=\"from ServiceWorker\" width=\"100%\" title=\"from ServiceWorker\" align=\"center\" />\n\n<img src=\"https://cdn.lishaoy.net/webOptimize/serviceWorker3.png\" alt=\"Cache Storage\" width=\"100%\" title=\"Cache Storage\" align=\"center\" />\n\n<img class=\"hidden\" src=\"https://cdn.lishaoy.net/webOptimize/Optimize.png\" alt=\"web optimize\" width=\"100%\" title=\"web optimize\" align=\"center\">\n\n## 未完，待续。。。 😜\n\n","tags":["web"],"categories":["性能"]},{"title":"Promise诞生记","url":"%2FcreatePromise.html","content":"\n{% fi https://cdn.lishaoy.net/createPromise/promise.png, Promise, Promise %}\n\n前端近年的兴起，有大部分是因为 `NodeJS` 的诞生，而 `NodeJS` 是个适用于 **异步IO** 密集型的语言，一些基于 `NodeJS` 的框架，比喻 *KOA2、Adonis* 就有大量的 `async` 和 `await` 语法，`async`的函数的返回值就是 `Promise` 对象，我们可以用 `async` 和 `await` 语法，写出优雅的异步代码，来替换难看且难维护的回调函数。\n\n这里我们会渐进式的来创建一个 `Promise` 的实现，如果，你还不了解 `Promise` ，赶快移步 [Promise](http://es6.ruanyifeng.com/#docs/promise) 了解学习，当然这个实现会符合 [Promise/A+](https://promisesaplus.com) 规范，`JavaScript` 中有很多第三方的 `Promise` 库，[bluebird](http://bluebirdjs.com/docs/getting-started.html) 就是一个第三方 `Promise` 类库，相比其它第三方类库或标准对象来说，其有以下优点：功能更齐全而不臃肿、浏览器兼容性更好,大家可以了解下。\n\n---\n\n<!-- more -->\n\n废话不多说，直接开干。。。 😠\n\n## 定义 Promise 类型\n\n一个简单 `Promise` 语法，如下\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... doSomething\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n### 实现 resolve 和 then\n\n首先我们以上 👆 的语法，自己定义一个 `Promise` 实例\n\n```javascript\nfunction Promise(fn) {\n  var callback = null;\n  //实现 then 方法 , 先一步一步来，实现传一个参数 -- resolve\n  this.then = function(cb) {\n    callback = cb;\n  };\n\n  //实现 resolve , value:异步操作的最终值\n  function resolve(value) {\n    callback(value);\n  }\n  //执行 function 参数\n  fn(resolve);\n}\n```\n\n一个简单的实例写好了，然后，来用一下,看看 👀 结果如何\n\n```javascript\nconst p = new Promise(function(resolve){\n  resolve(66);\n});\n\np.then(function(value){\n  console.log(value);\n});\n```\n\n\n{% note info %}\n\n执行结果是：`callback is not a function`\n\n{% endnote %}\n\n### 修改 callback 为异步\n\n**这里就遇到一个问题： **  \n\n** 发现 `resolve()` 在 `then()` 之前调用，在 `resolve()` 被调用的时候， `callback` 还是 `null` ，我们的代码是同步的，而不是异步的。</br> 如是，想办法解决掉这个问题，就是利用 `setTimeout` , 把 `callback` 加入异步队列** \n\n代码如下 👇\n\n```javascript\nfunction Promise(fn) {\n  var callback = null;\n  //实现 then 方法 , 先一步一步来，实现传一个参数 -- resolve\n  this.then = function(cb) {\n    callback = cb;\n  };\n\n  //实现 resolve , value:异步操作的最终值\n  function resolve(value) {\n    // 用 setTimeout 把 callback 加入到异步队列，这样就会，先执行 then() 方法\n    setTimeout(function(){\n      callback(value);\n    },1)\n  }\n  //执行 function 参数\n  fn(resolve);\n}\n```\n\n然后，再来用一下,看看 👀 结果如何\n\n```javascript\nconst p = new Promise(function(resolve){\n  resolve(66);\n});\n\np.then(function(value){\n  console.log(value);\n});\n```\n\n{% note info %}\n\n执行结果是：`66`\n\n{% endnote %}\n\n## 未完待续。。。\n","tags":["Promise"],"categories":["JS"]},{"title":"CSSModules","url":"%2FCSSModules.html","content":"\n{% fi https://cdn.lishaoy.net/CSSModules/cssModules.png, CSS Modules, CSS Modules %}\n\n这篇文章来一起了解 `css` 模块化的用法和原理 ，**dome** 地址：[css modules](https://github.com/persilee/webpack_test) 😮\n\n---\n\n<!-- more -->\n\n#### 局部作用域\n\n一般我们引入页面的 `CSS` 的作用域都是全局的，都是对这个页面起作用，产生局部的作用域，就是使用一个独一无二的 `class` 的名称，不会和其它选择器重名的， **`CSS Modules`** 就是这个原理。下面我们看一段代码\n\n```javascript\nimport $ from 'jquery';\nimport styles from './main.css';\nimport test from './test.html';\n\n$('body').append($('<div><h1>我会变绿</h1></div>'));\n$('div h1').addClass(styles.testGreen);\n$('body').append(test).find('h2').addClass(styles.testBlue);\n```\n\n上面的代码我把 `main.css` 输入到 `style` 对象，然后下面用了 `styles.testGreen` 对象的属性形式调用，就会应用 `main.css` 里的样式\n\n```css\n.testGreen {\n  color: green;\n}\n```\n\n构建工具（ `webpack` ）编译成一个哈希字符串\n\n```vbscript-html\n<div>\n    <h1 class=\"_305zeUSoiGREv3GqPa9H8F\">我会变绿</h1>\n</div>\n```\n\n`main.css` 也会同时编译\n\n```css\n._305zeUSoiGREv3GqPa9H8F {\n  color: #aaf200;\n}\n```\n\n这样一来，这个类名就是独一无二的了，只对应用的组件有效。\n**`CSS Modules`** 支持不同的构建工具，这里我使用的是 `webpack` ,下文都是以 `webpack` 为例。\n\n下面我们来看下 **`webpack.config.js`**\n\n```javascript\nmodule.exports = {\n  context: __dirname + '/src',\n  devtool: 'eval-source-map', //配置生成Source Maps，选择合适的选项\n  entry: {\n    app: ['./app.js', './test.js'],\n  },\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js',\n    publicPath: '/assets',\n  },\n  module: {\n    loaders: [\n      {test: /\\.json$/,loader: 'json-loader'},\n      {test: /\\.js$/,exclude: /node_modules/,loader: 'babel-loader'},\n      {test: /\\.css$/,loader: ExtractTextPlugin.extract({\n          fallbackLoader: \"style-loader\",\n          loader: {\n            loader: \"css-loader\",\n            query: {\n              modules: true\n            }\n          }\n        })\n      },\n      {test: /\\.html$/,loader: 'html-loader'},\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin('style.css')\n  ]\n};\n```\n\n上面的代码可以看到，`query:{modules:true}` 代表开启 **`CSS Modules`** 模块，这里还配置了把所以得 `css` 合并一个文件，具体的可以了解 `webpack` 的 `extract-text-webpack-plugin`插件。\n\n#### 全局作用域\n\n**`CSS Modules`** 允许用 `:global(.className)` 的语法声明一个全局的作用域。加了 `:global` 的不会被编译成哈希值。\n\n```css\n:global(.title) {\n  color: black;\n}\n\n.title {\n  color: red;\n}\n```\n\n`test.js` 使用普通的写法，就会引用全局的 `.title` 的样式\n\n```javascript\nimport $ from 'jquery';\nimport styles from './main.css';\nimport test from './test.html';\n\n$('body').append($('<div><h1>我是title</h1></div>'));\n$('div h1').addClass('title');\n```\n\n结果 `h1` 的title显示黑色。\n\n#### Class的组合\n\n在 **`CSS Modules`** 里，一个选择器可以继承另一个选择器。\n\n在 `mian.css` 里，我让 `.testBlue` 继承 `.testBg` 类\n\n```css\n.testBg {\n  background-color: red;\n}\n\n.testBlue {\n  color: blue;\n  composes: testBg;\n}\n\n```\n不用修改 `test.js` ,应用了 `.testBlue` 就会有一个红色的背景。\n\n编译结果：\n\n```css\n.eh33VC37uFHXkCZ8LfKYd {\n  background-color: #ff0000;\n}\n\n.xrmZso54fTBX29J9G65Ai {\n  color: #0c77f8;\n}\n```\n\n相应的 `html` 代码：\n\n```html\n<h3 class=\"xrmZso54fTBX29J9G65Ai eh33VC37uFHXkCZ8LfKYd _2gsuNWm9029FHPYJP62C-t\">\n    我会变蓝\n</h3>\n```\n\n#### 输入变量\n\n**`CSS Modules`** 支持使用变量，不过要安装 **PsotCSS** 和 **postcss-modules-values**。\n\n```vim\n$ npm install --save postcss-loader postcss-modules-values\n```\n\n把 `postcss-loader` 加入 `webpack.config.js` .\n\n```javascript\n{\n    test: /\\.css$/,\n    loader: 'style-loader!css-loader?modules!postcss-loader'\n},\n```\n\n然后我在 `colors.css` 里定义了一些变量。\n\n```css\n@value blue: #0c77f8;\n@value red: #ff0000;\n@value green: #aaf200;\n```\n\n在 `main.css` 里可以这样引用变量\n\n```css\n@value colors: \"./color.css\";\n@value blue, red, green from colors;\n\n.title {\n  color: red;\n}\n\n.testBg {\n  background-color: red;\n}\n\n.testGreen {\n  color: green;\n}\n\n.testBlue {\n  color: blue;\n  composes: testBg;\n  composes: div;\n}\n```\n\n这样就可以把 `colors.css` 的变量拿过来用了，是不是很神奇。","tags":["modules"],"categories":["CSS"]},{"title":"如何使用 markdown 语法写博客","url":"%2FmarkdownGrammar.html","content":"\n{% fi https://cdn.lishaoy.net/markdownGrammar/markdown.png, markdown, markdown %}\n\n平时我写日记、文档和博客都会用到 `markdown` 语法，我用的是 `马克飞象` 先在本地写好，而且可以和 `印象笔记` 同步，如果知识积累的多了，也会总结下，分享到社区，直接 <kbd>⌘ -  C</kbd>  然后 <kbd>⌘ -  V</kbd>  就可以了，特别方便。 🙂\n\n---\n\n<!-- more -->\n\n### 什么是Markdown语法\n`Markdown` 是一种轻量级标记语言，目标是实现「易读易写」。\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n---\n\n### 标题\n**在 `Markdown` 中，你只需要在文本前面加上 `#` 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 `#` 即可，标题字号相应降低。例如：**\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n效果如下 ：\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n---\n### 引用\n**`Markdown` 标记区块引用是使用类似 email 中用的引用方式，只需要在整个段落的第一行最前面加上 > 。**\n例如：\n```\n>这是一个引用示例\n```\n效果如下：\n\n>这是一个引用示例\n\n**区块引用可以嵌套，只要根据层次加上不同数量的 > ：**\n\n```vim\n> 这是第一级引用。\n>\n> > 这是第二级引用。\n>\n> 现在回到第一级引用。\n```\n效果如下：\n> 这是第一级引用。\n>\n> > 这是第二级引用。\n>\n> 现在回到第一级引用。\n\n---\n### 列表\n**Markdown 支持有序列表和无序列表。**\n\n1. 无序列表使用星号、加号或是减号作为列表标记：\n\n```vim\n*   Red\n*   Green\n*   Blue\n```\n等同于\n```vim\n+   Red\n+   Green\n+   Blue\n```\n也等同于\n```vim\n-   Red\n-   Green\n-   Blue\n```\n效果如下：\n-   Red\n-   Green\n-   Blue\n\n----\n\n2. 有序列表则使用数字接着一个英文句点：\n\n```vim\n1.  Bird\n2.  McHale\n3.  Parish\n```\n效果如下：\n1.  Bird\n2.  McHale\n3.  Parish\n\n如果你的列表标记写成：\n```vim\n1.  Bird\n1.  McHale\n1.  Parish\n```\n效果是：\n1.  Bird\n1.  McHale\n1.  Parish\n\n甚至是：\n```vim\n3. Bird\n1. McHale\n8. Parish\n```\n效果是：\n3. Bird\n1. McHale\n8. Parish\n\n可以看到，数字还是正常的，所以，你可以让 `Markdown` 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。\n\n如果要在列表项目内放进引用，那 > 就需要缩进：\n```vim\n*   A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n```\n效果如下：\n*   A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n\n---\n\n### 代码区块\n\n只要把你的代码块包裹在  <code>\\`\\`\\`</code>  之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 `Ruby` 代码着色：\n\n<code>\n\\`\\`\\`ruby </br>\nrequire 'redcarpet' </br>\nmarkdown = Redcarpet.new(\"Hello World!\") </br>\nputs markdown.to_html </br>\n\\`\\`\\`\n</code>\n\n效果如下：\n\n```ruby\n    require 'redcarpet'\n    markdown = Redcarpet.new(\"Hello World!\")\n    puts markdown.to_html\n```\n\n---\n\n### 强调\n在 `Markdown` 中，可以使用 \\* 和 \\_ 来表示斜体和加粗。\n\n斜体：\n\n```vim\n*Coding，让开发更简单*\n_Coding，让开发更简单_\n```\n效果如下：\n\n*Coding，让开发更简单* </br>\n_Coding，让开发更简单_\n\n加粗：\n\n```vim\n**Coding，让开发更简单**\n__Coding，让开发更简单__\n```\n效果如下：\n\n**Coding，让开发更简单** </br>\n__Coding，让开发更简单__\n\n---\n\n### 代码\n如果要标记一小段行内代码，你可以用反引号把它包起来 <code>\\`\\`\\`</code> ，例如：\n\n```vim\nUse the `printf()` function.\n```\n效果如下：\n\nUse the `printf()` function.\n\n---\n\n### 自动链接\n`Markdown` 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来，`Markdown` 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：\n```css\n<http://example.com/>\n```\n效果如下：\n\n<http://example.com/>\n\n### 链接\n`Markdown` 支持两种形式的链接语法： *行内式* 和 *参考式* 两种形式。我个人比较喜欢用 *参考式* 。\n\n不管是哪一种，链接文字都是用 [方括号] 来标记。\n\n1. *行内式* 的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 `title` 文字，只要在网址后面，用双引号把 `title` 文字包起来即可，例如：\n\n```\nThis is [an example](http://example.com/ \"Title\") inline link.\n```\n效果如下：\n\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n---\n\n### 图片\n`Markdown` 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： *行内式* 和 *参考式* 。\n\n1. 行内式的图片语法看起来像是：\n\n```\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n详细叙述如下：\n\n- 一个惊叹号 `!`\n- 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 `title` 文字。\n\n---\n\n2. 参考式的图片语法则长得像这样：\n\n```lasso\n![Alt text][id]\n```\n`id` 是图片参考的名称，图片参考的定义方式则和连结参考一样：\n```lasso\n[id]: url/to/image  \"Optional title attribute\"\n```\n`Markdown` 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `<img>`  标签。\n\n---\n\n### LaTeX 公式\n\n可以创建行内公式，例如 :\n```\n$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n```\n效果如下：\n\n$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n\n或者块级公式：\n```\n$$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n```\n效果如下：\n\n$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n---\n\n### 表格\n\n```lasso\n| Item      |    Value | Qty  |\n| :-------- | --------:| :--: |\n| Computer  | 1600 USD |  5   |\n| Phone     |   12 USD |  12  |\n| Pipe      |    1 USD | 234  |\n```\n\n效果如下：\n\n| Item      |    Value | Qty  |\n| :-------- | --------:| :--: |\n| Computer  | 1600 USD |  5   |\n| Phone     |   12 USD |  12  |\n| Pipe      |    1 USD | 234  |\n\n\n---\n\n### 流程图\n\n<code>\n\\`\\`\\`flow </br>\nst=>start: Start </br>\ne=>end </br>\nop=>operation: My Operation </br>\ncond=>condition: Yes or No? </br>       \nst->op->cond </br>\ncond(yes)->e </br>\ncond(no)->op </br>\n\\`\\`\\`\n</code>\n\n效果如下：\n\n```flow\nst=>start: Start\ne=>end\nop=>operation: My Operation\ncond=>condition: Yes or No?\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n以及时序图:\n\n<code>\n\\`\\`\\`sequence </br>\nAlice->Bob: Hello Bob, how are you? </br>\nNote right of Bob: Bob thinks </br>\nBob-->Alice: I am good thanks! </br>\n\\`\\`\\`\n</code>\n\n效果如下：\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 复选框\n\n使用 `- [ ]` 和 `- [x]` 语法可以创建复选框，实现 todo-list 等功能。例如：\n\n```lasso\n- [x] 已完成事项\n- [ ] 待办事项1\n- [ ] 待办事项2\n```\n效果如下：\n- [x] 已完成事项\n- [ ] 待办事项1\n- [ ] 待办事项2\n\n---\n\n### 分割线\n在 `Markdown` 中，可以制作分割线，例如：\n\n```lasso\n    ---\n```\n效果如下：\n\n--- \n\n### 反斜杠\n\n`Markdown` 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `<em>` 标签），你可以在星号的前面加上反斜杠：\n```\n\\*literal asterisks\\*\n```\n效果如下：\n\n\\*literal asterisks\\*\n\n`Markdown` 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\n```\n  \\   反斜线\n  `   反引号\n  *   星号\n  _   底线\n  {}  花括号\n  []  方括号\n  ()  括弧\n  #   井字号\n  +   加号\n  -   减号\n  .   英文句点\n  !   惊叹号\n```\n","tags":["markdown"],"categories":["工具"]},{"title":"被遗忘的CSS","url":"%2FupsetCssSummary.html","content":"\n{% fi https://cdn.lishaoy.net/upsetCssSummary/css.png, css, css %}\n\n平时在工作中遇到一些比较偏门的 `css` ，用过一两次，但是老是记不住，于是又需要去 **baidu、 google** ，所以都积累起来，方便以后查看（持续更新...） 😀\n\n---\n\n<!-- more -->\n\n#### `outline`  **当input选中的时候会出现一个边框**\n\n```css\n/*一般设置成 none*/\ntextarea:focus, input:focus{\n    outline: none;\n}\n```\n#### `contenteditable` **规定元素内容是否可编辑**\n\n```vbscript-html\n<div id=\"example-one\" contenteditable=\"true\">\n```\n\n```css\n#example-one { \n    margin-bottom: 10px; \n}\n[contenteditable=\"true\"] { \n    padding: 10px; outline: 2px dashed #CCC; \n}\n[contenteditable=\"true\"]:hover { \n    outline: 2px dashed #0090D2; \n}\n```\n#### `webkit-playsinline` **video 都可以在页面中播放，而不是全屏播放**\n\n```vbscript-html\n<video id=\"myvideo\" src=\"test.mp4\" webkit-playsinline=\"true\"></video>\n```\n\n#### `clearfix` **清除浮动**\n\n```css\n.clearfix {\n    zoom: 1;\n}\n.clearfix:after {\n     visibility: hidden;\n     display: block;\n     font-size: 0;\n     content: \" \";\n     clear: both;\n     height: 0;\n }\n```\n#### `user-select ` **禁止选中文本**\n\n```css\np {\n    -webkit-user-select: none; /* Chrome, Opera, Safari */\n    -moz-user-select: none; /* Firefox 2+ */\n    -ms-user-select: none; /* IE 10+ */\n    user-select: none; /* Standard syntax */\n}\n```\n#### `webkit-scrollbar` **自定义浏览器滚动条**\n\n```css\n/*定义滚动条宽高及背景，宽高分别对应横竖滚动条的尺寸*/\n\ndiv::-webkit-scrollbar {\n    width: 5px;\n    height: 5px;\n    background-color: rgba(245, 245, 245, 0.47);\n}\n\n/*定义滚动条的轨道，内阴影及圆角*/\n\ndiv::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);\n    border-radius: 10px;\n    background-color: #f5f5f5;\n}\n\n/*定义滑块，内阴影及圆角*/\n\ndiv::-webkit-scrollbar-thumb {\n    /*width: 10px;*/\n    height: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);\n    background-color: rgba(85, 85, 85, 0.25);\n}\n```\n\n#### `webkit-appearance` **去除默认样式**\n\n```css\ninput, button, textarea, select {\n    *font-size: 100%;\n    -webkit-appearance:none;\n}\n```\n#### **使用CSS transforms 或者 animations时可能会有页面闪烁的bug**\n\n```css\nelements {\n     -webkit-backface-visibility: hidden; \n}\n```\n#### `transform-style: preserve-3d` **让元素支持3D**\n\n```css\nelements {\n    -webkit-transform: rotateY(60deg); /* Chrome, Safari, Opera */\n    -webkit-transform-style: preserve-3d; /* Chrome, Safari, Opera */\n    transform: rotateY(60deg);\n    transform-style: preserve-3d;\n}\n```\n#### `perspective` **这个属性定义子元素会获得透视效果，而不是元素本身**\n\n```vbscript-html\n<div class=\"cube pers250\">\n    <div class=\"face front\">1</div>\n    <div class=\"face back\">2</div>\n    <div class=\"face right\">3</div>\n    <div class=\"face left\">4</div>\n    <div class=\"face top\">5</div>\n    <div class=\"face bottom\">6</div>\n</div>\n```\n```css\n.cube {\n  width: 100%;\n  height: 100%;\n  backface-visibility: visible;\n  perspective-origin: 150% 150%;\n  transform-style: preserve-3d;\n  -webkit-backface-visibility: visible;\n  -webkit-perspective-origin: 150% 150%;\n  -webkit-transform-style: preserve-3d;\n}\n.pers250 {\n  perspective: 250px;\n  -webkit-perspective: 250px;\n}\n.face {\n  display: block;\n  position: absolute;\n  width: 100px;\n  height: 100px;\n   border: none;\n  line-height: 100px;\n  font-family: sans-serif;\n  font-size: 60px;\n  color: white;\n  text-align: center;\n}\n```\n#### **css实现不换行、自动换行、强制换行**\n\n```css\n/*不换行*/\nwhite-space:nowrap;\n\n/*自动换行*/\nword-wrap: break-word; \nword-break: normal; \n\n/*强制换行*/\nword-break:break-all;\n```\n\n#### `font-smoothing` **设置字体平滑，会让字体看起来比较舒服**\n\n```css\nh1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6, p, .navbar, .brand, a, .td-name, td {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-family: \"Microsoft YaHei\", \"微软雅黑\", 'Muli', \"Helvetica\", Arial, sans-serif;\n}\n```\n#### `::selection` **修改选中文本颜色**\n\n```css\n::selection {\n\tcolor: white;\n\tbackground-color: rgba(0, 0, 0, 0.8);\n}\n::-webkit-selection {\n\tcolor: white;\n\tbackground-color: rgba(0, 0, 0, 0.8);\n}\n::-moz-selection {\n\tcolor: white;\n\tbackground-color: rgba(0, 0, 0, 0.8);\n}\n```\n\n#### 让背景图片大小自适应且居中\n\n```css\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: 50% 50%;\n```","tags":["css"],"categories":["CSS"]},{"title":"PHP ThinkPHP 初识","url":"%2FphpThinkPHPBasis.html","content":"\n{% fi https://cdn.lishaoy.net/phpThinkPHPBasis/php.png, php && thinkPHP 基础, php && thinkPHP 基础 %}\n\n这篇文章主要带大家认识一下 `PHP` 、 `thinkPHP` ，都是一下基础，其中包括 **PHP语法（变量、字符串、数组、表单、数据库）** 、**面向对象（Class创建、属性、继承、访问控制、抽象、接口等）** 、 **thinkPHP（控制器、视图、模型等）** 😝\n\n---\n\n<!-- more -->\n\n## PHP基础知识\n以下知识点所有内容都是来自官方提供的 **PHP** 文档《[PHP手册][1]》，更多细节及知识点可以查看《[PHP手册][2]》。\n\n如果你平时用 **Windows** 系统，可以使用 [WAMP][3] 来搭建一个本地的开发环境。如果你是 **OSX** ，可以使用 [MAMP][4] 来搭建一个开发环境。\n### PHP语法\n#### 认识PHP\nPHP 代码被包含在特殊的起始符和结束符 `<?php` 和 `?>` 中，使得可以进出“PHP 模式”。如果文件都是 **PHP** 代码，可以省略结束标记，但是必须以 `;` 结束。\n\n```html\n<body>\n  <h1>php</h1>\n  <?php\n    echo \"lishaoying\";\n    $name = '李少颖';\n    echo \"hello: \" . $name ;\n  ?>\n</body>\n```\n结果会输出：`lishaoyinghello: 李少颖`, **PHP** 解析器会解析开始`<?php` 和结束标记 `?>` 之间的内容。\n\n---\n#### 变量\n**PHP** 中的变量用一个美元符号后面跟变量名来表示。变量名是区分大小写的。\n```php\n<?php\n\n$name = 'lishaoy.net';\necho \"hello $name \\r\\n\";\n```\n结果会输出：`hello lishaoy.net `。\n\n---\n#### 字符串\n在 **PHP** 里面定义一个字符串，可以使用单引号`' '`或者双引号`\" \"`。\n```php\n<?php\n\n$email = \"persilee@foxmail.com<br />\";\n```\n第三种表达字符串的方法是用 **heredoc** 句法结构：`<<<`。\n\n```php\n$word = <<< WORD\n这是一个测试 - $name 。 . <br />\n今天，天气不错，我们出去玩吧！ . <br />\nWORD;\n\necho $word;\n```\n结果会输出： `这是一个测试 - lishaoy.net 。`\n\n---\n#### 数组\n可以用 `array()` 语言结构来新建一个数组。它接受任意数量用逗号分隔的 键（**key**） `=>` 值（**value**）对。\n\n```php\n<?php\n$tracks = array(\n  0 => '长城',\n);\n\necho var_dump(\n  $tracks[0]\n);\n```\n结果会输出： `string(6) \"长城\"`。\n\n---\n#### 表单\n`$_GET`，还有 `$_POST`，这两个东西里面会存储使用不同的方法提交的表单的内容，`$_GET` 里面存储的是用 **GET** 方法提交的表单内容。\n\n```html\n<body>\n  <form class=\"\" action=\"process.php\" method=\"get\">\n    <input type=\"text\" name=\"user_name\" value=\"\" placeholder=\"用户名\">\n    <input type=\"email\" name=\"email\" value=\"\" placeholder=\"Email\">\n    <button type=\"submit\">提 交</button>\n  </form>\n</body>\n```\n**process.php**文件内容：\n\n```php\n<?php\necho '<pre>';\n  var_dump(\n    $_GET['user_name']\n  );\necho '</pre>';\n```\n点提交之后会把文本框的内容传递到**process.php**文件处理，这里会输出文本框的输入内容。\n\n---\n#### 数据库\n**PDO** 类，代表 **PHP** 和数据库服务之间的一个连接。\n\n```php\n$db_handle = new PDO('mysql:host=127.0.0.1;dbname=msg;port=8889;charset=utf8','msg_test','123');\n```\n这样就可以创建一个和数据库的连接。\n```php\n<?php\n\ntry {\n  $db_handle = new PDO('mysql:host=127.0.0.1;dbname=msg;port=8889;charset=utf8','msg_test','123');\n\n$statement = $db_handle->prepare(\n  'insert into posts(title, content) values (:title, :content)'\n);\n\n$title = 'Wall-e';\n$content = 'wall-e已经在地球上孤独生活了几百年，他爱上了。。。';\n\n$statement->bindParam(':title', $title);\n$statement->bindParam(':content', $content);\n\n$statement->execute();\n\n} catch (Exception $e) {\n  echo $e->getMessage();\n}\n```\n可以向数据库的**posts**表插入一条数据。\n\n---\n### 面向对象\n#### 创建Class\n每个类的定义都以关键字 `class` 开头，后面跟着类名，后面跟着一对花括号，里面包含有类的属性与方法的定义。\n```php\nclass Track\n{\n    \n}\n```\n\n---\n#### 增加属性\n类的变量成员叫做“**属性**”，或者叫“**字段**”、“**特征**”，在本文档统一称为“**属性**”。\n```php\nclass Track\n{\n    public $track_name;\n    public $track_artist;\n}\n```\n\n---\n#### 继承\n**继承** 将会影响到类与类，对象与对象之间的关系。\n\n比如，当扩展一个类，子类就会**继承**父类所有公有的和受保护的方法。除非子类覆盖了父类的方法，被**继承**的方法都会保留其原有功能。\n```php\n<?php\n\nclass Player extends Track\n{\n\n}\n```\n\n---\n#### 访问控制\n对属性或方法的访问控制，是通过在前面添加关键字 `public`（公有），`protected`（受保护）或 `private`（私有）来实现的。被定义为公有的类成员可以 **在任何地方被访问**。被定义为受保护的类成员则可以 **被其自身以及其子类和父类访问**。被定义为私有的类成员则 **只能被其定义所在的类访问**。\n\n---\n#### 静态属性与方法\n声明类属性或方法为**静态**( `static` )，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。\n```php\nclass Track\n{\n    public static $track_name = 'Magic';\n    public $track_artist;\n    \n    public static function track_playing() {\n        return '正在播放' . self::$track_name;\n    }\n}\n```\n\n---\n#### 构造函数\n具有**构造函数**( `__construct` )的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。\n```php\n<?php\n\nclass Track\n{\n    public $track_name;\n    public $track_artist;\n    \n    public function __construct() {\n        echo '初始化数据...';\n    }\n    \n    public function track_playing() {\n        return '正在播放' . $this->$track_name;\n    }\n}\n```\n\n---\n#### 构造器与获取器\n在给不可访问属性赋值时，`__set()` 会被调用。\n读取不可访问属性的值时，`__get()` 会被调用。\n```php\n<?php\n\nclass Track\n{      \n    private $track_name;\n    private $track_artist;\n\n    public function __set($name, $value) {\n        if (property_exists($this, $name)) {\n            $this->$name = $value;\n        }\n    }\n    \n    public function __get($name) {\n        return $this->$name;\n    }\n\n    public function track_playing() {\n        return '正在播放' . $this->$track_name;\n    }\n}\n```\n\n---\n#### 抽象类\n**定义为抽象的类不能被实例化**( `abstract` )。任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。\n```php\n<?php\n\nabstract class Entity\n{\n    protected $entity_type;\n    public function get_entity_type() {\n        return $this->entity_type;\n    }\n    \n    abstract public function save();\n}\n\nclass User extends Entity\n{\n    protected $entity_type = 'user';\n    \n    public function save() {\n        return $this->entity_type . '：保存成功！';\n    }\n}\n```\n\n---\n#### 接口\n使用 **接口**（ `interface `），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。\n\n**接口** 是通过 `interface` 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。\n\n**接口** 中定义的所有方法都必须是公有，这是接口的特性。\n```php\n<?php\n\ninterface DataInterface \n{\n    public function get_data();\n}\n\ninterface EntityInterface\n{\n    public function get_entity_type();\n}\n\nclass Entity implements DataInterface, EntityInterface\n{\n    public function get_data() {\n        return '数据...';\n    }\n    \n    public function get_entity_type() {\n        return '类型...';\n    }\n}\n```\n\n---\n## ThinkPHP\n以下内容基本都是来自**ThinkPHP**[官方文档][5]，更多细节及知识点可查看 [官方文档][5]。\n### 基础\n#### 环境要求\n**PHP版本要求**\n- PHP5.3以上版本\n\n**支持的服务器和数据库环境**\n- 支持Windows/Unix服务器环境\n- 可运行于包括Apache、IIS和nginx在内的多种WEB服务器和模式\n- 支持Mysql、MsSQL、PgSQL、Sqlite、Oracle、Ibase、Mongo以及PDO等多种数据库和连接\n\n如果你平时用 **Windows** 系统，可以使用 [WAMP][6] 来搭建一个本地的开发环境。如果你是 **OSX** ，可以使用 [MAMP][7] 来搭建一个开发环境。\n\n---\n#### 目录结构\n初始的目录结构如下：\n```vim\nwww  WEB部署目录（或者子目录）\n├─index.php       入口文件\n├─README.md       README文件\n├─Application     应用目录\n├─Public          资源文件目录\n└─ThinkPHP        框架目录\n```\n其中框架目录**ThinkPHP**的结构如下：\n```vim\n├─ThinkPHP 框架系统目录（可以部署在非web目录下面）\n│  ├─Common       核心公共函数目录\n│  ├─Conf         核心配置目录 \n│  ├─Lang         核心语言包目录\n│  ├─Library      框架类库目录\n│  │  ├─Think     核心Think类库包目录\n│  │  ├─Behavior  行为类库目录\n│  │  ├─Org       Org类库包目录\n│  │  ├─Vendor    第三方类库目录\n│  │  ├─ ...      更多类库目录\n│  ├─Mode         框架应用模式目录\n│  ├─Tpl          系统模板目录\n│  ├─LICENSE.txt  框架授权协议文件\n│  ├─logo.png     框架LOGO文件\n│  ├─README.txt   框架README文件\n│  └─ThinkPHP.php    框架入口文件\n```\n\n---\n#### 入口文件\n**ThinkPHP**采用单一入口模式进行项目部署和访问，无论完成什么功能，一个应用都有一个统一（但不一定是唯一）的入口。\n\n**入口文件主要完成：**\n- 定义框架路径、项目路径（可选）\n- 定义调试模式和应用模式（可选）\n- 定义系统相关常量（可选）\n- 载入框架入口文件（**必须**）\n\n```php\n// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false\ndefine('APP_DEBUG',true);\n\n// 定义应用目录\ndefine( 'APP_PATH', dirname(__FILE__).'/Application/' );\n\n//生成后台模块\ndefine('BIND_MODULE','Admin');\n\n// 引入ThinkPHP入口文件\nrequire dirname( __FILE__).'/ThinkPHP/ThinkPHP.php';\n```\n\n---\n#### URL\n入口文件是应用的单一入口，对应用的所有请求都定向到应用入口文件，系统会从URL参数中解析当前请求的模块、控制器和操作：\n\n```vim\nhttp://serverName/index.php/模块/控制器/操作\n```\n\n---\n### 控制器\n#### 控制器定义\n一般来说，ThinkPHP的控制器是一个类，而操作则是控制器类的一个公共方法。\n下面就是一个典型的控制器类的定义：\n```php\nnamespace Admin\\Controller;\nuse Think\\Controller;\n\nclass LoginController extends Controller {\n    public function hello(){\n        echo 'hello,thinkphp!';\n    }\n}\n```\n在浏览器里访问：`http://msg:8899/index.php/Login/hello`，会显示：`hello,thinkphp!`。\n\n---\n#### AJAX返回\n**ThinkPHP** 可以很好的支持AJAX请求，系统的\\Think\\Controller类提供了ajaxReturn方法用于AJAX调用后返回数据给客户端。\n```php\n<?php\n\nnamespace Admin\\Controller;\nuse Think\\Controller;\n\nclass LoginController extends Controller {\n    public function login()\n    {\n      $data['status']  = 1;\n      $data['content'] = 'content';\n      $this->ajaxReturn($data);\n    }\n}\n```\n\n---\n#### 跳转和重定向\n\n**页面跳转**\n\n在应用开发中，经常会遇到一些带有提示信息的跳转页面，例如操作成功或者操作错误页面，并且自动跳转到另外一个目标页面。系统的`\\Think\\Controller`类内置了两个跳转方法`success`和`error`，用于页面跳转提示，而且可以支持ajax提交。\n\n```php\n    public function jump()\n    {\n      $posts = D('posts'); //实例化User对象\n      $data['title'] = 'cat';\n      $data['content'] = '猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。';\n      $result = $posts->add($data);\n      if($result){\n          //设置成功后跳转页面的地址，默认的返回页面是$_SERVER['HTTP_REFERER']\n          $this->success('新增成功','Login/login');\n      } else {\n          //错误页面的默认跳转页面是返回前一页，通常不需要设置\n          $this->error('新增失败');\n      }\n    }\n```\n\n**重定向**\n\n`Controller`类的`redirect`方法可以实现页面的重定向功能。\n\n```php\n//重定向到New模块的Category操作\n$this->redirect('New/category', array('cate_id' => 2), 5, '页面跳转中...');\n```\n上面的用法是停留5秒后跳转到`New`模块的`category`操作，并且显示页面跳转中字样，重定向后会改变当前的**URL**地址。\n\n---\n\n#### 输入变量\n\n**获取变量**\n\n`I`方法是**ThinkPHP**用于更加方便和安全的获取系统输入变量，可以用于任何地方，用法格式如下：\n```php\nI('变量类型.变量名/修饰符',['默认值'],['过滤方法'],['额外数据源'])\n```\n\n变量类型是指请求方式或者输入类型，包括：\n\n|  变量类型   |   含义    |\n| :-------- | :--------| \n| get    |   获取GET参数 | \n| post    |   获取POST参数 | \n| param    |   自动判断请求类型获取GET、POST或者PUT参数 | \n| request    |   获取REQUEST 参数 | \n| put    |   获取PUT 参数 | \n| session    |   获取 $_SESSION 参数 | \n| cookie    |   获取 $_COOKIE 参数 | \n| server    |   获取 $_SERVER 参数 | \n| globals    |   获取 $GLOBALS参数 |\n| path    |   获取 PATHINFO模式的URL参数（3.2.2新增） |\n| data    |   获取 其他类型的参数，需要配合额外数据源参数（3.2.2新增） |\n\n我们以`GET`变量类型为例，说明下 `I` 方法的使用：\n\n```php\npublic function variable()\n{\n    $data['title'] = I('get.title');\n    $data['content'] = I('get.content');\n    dump($data);\n    $this->display();\n}\n```\n输出结果：\n```vim\narray(2) {\n  [\"title\"] => string(6) \"啊啊\"\n  [\"content\"] => string(6) \"啊啊\"\n}\n```\n\n---\n### 视图\n#### 模板定义\n\n每个模块的模板文件是独立的，为了对模板文件更加有效的管理，**ThinkPHP**对模板文件进行目录划分，默认的模板文件定义规则是：\n```php\n视图目录/[模板主题]/控制器名/操作名+模板后缀\n```\n默认的视图目录是模块的 **View** 目录（模块可以有多个视图文件目录，这取决于你的应用需要），框架的默认视图文件后缀是`.html`。 新版模板主题默认是空（表示不启用模板主题功能）。\n\n在每个模板主题下面，是以模块下面的控制器名为目录，然后是每个控制器的具体操作模板文件，例如：\n\n例如**Login**下的**variable**，对应的模板文件：`Admin/View/Login/variable.html`\n\n---\n#### 模板赋值\n\n如果要在模板中输出变量，必须在在控制器中把变量传递给模板，系统提供了assign方法对模板变量赋值，无论何种变量类型都统一使用assign赋值。\n```php\npublic function variable()\n    {\n      $data['title'] = I('get.title');\n      $data['content'] = I('get.content');\n      $this->assign($data);\n      $this->display();\n    }\n```\n`assign`方法必须在`display`和`show`方法之前调用，并且系统只会输出设定的变量，其它变量不会输出（系统变量例外），一定程度上保证了变量的安全性。\n\n赋值后，就可以在模板文件中输出变量了，如果使用的是内置模板的话，就可以这样输出： `{$title}`。\n\n---\n#### 渲染模板\n渲染模板输出最常用的是使用`display`方法，调用格式：\n```vim\ndisplay('[模板文件]'[,'字符编码'][,'输出类型'])\n```\n如果没有按照模板定义规则来定义模板文件（或者需要调用其他控制器下面的某个模板），可以使用：\n```php\n// 指定模板输出\n$this->display('edit'); \n```\n表示调用当前模块下面的`edit`模板\n```php\n$this->display('Member:read');\n```\n表示调用`Member`模块下面的`read`模板。\n\n---\n### 模型\n\n#### 模型定义\n> 模型类并非必须定义，只有当存在独立的业务逻辑或者属性的时候才需要定义。\n\n模型类通常需要继承系统的\\Think\\Model类或其子类，下面是一个Home\\Model\\UserModel类的定义：\n```php\n<?php\nnamespace Admin\\Model;\nuse Think\\Model;\n\nclass PostsModel extends Model{\n \n}\n```\n模型类的作用大多数情况是操作数据表的，如果按照系统的规范来命名模型类的话，大多数情况下是可以自动对应数据表。\n\n#### 模型实例化\n在ThinkPHP中，可以无需进行任何模型定义。\n\n根据不同的模型定义，我们有几种实例化模型的方法，根据需要采用不同的方式：\n**直接实例化**\n可以和实例化其他类库一样实例化模型类，例如：\n```php\n$User = new \\Home\\Model\\UserModel();\n$Info = new \\Admin\\Model\\InfoModel();\n// 带参数实例化\n$New  = new \\Home\\Model\\NewModel('blog','think_',$connection);\n```\n**D方法实例化**\n上面实例化的时候我们需要传入完整的类名，系统提供了一个快捷方法 **D** 用于数据模型的实例化操作。\n```php\n<?php\npublic function jump()\n    {\n      $posts = D('posts'); //实例化posts对象\n    }\n```\n\n**M方法实例化模型**\n**D** 方法实例化模型类的时候通常是实例化某个具体的模型类，如果你仅仅是对数据表进行基本的  **CURD** 操作的话，使用 **M** 方法实例化的话，由于不需要加载具体的模型类，所以性能会更高。\n\n```php\n// 使用M方法实例化\n$User = M('User');\n// 和用法 $User = new \\Think\\Model('User'); 等效\n// 执行其他的数据操作\n$User->select();\n```\n#### CURD操作\n**ThinkPHP**提供了灵活和方便的数据操作方法，对数据库操作的四个基本操作（CURD）：创建、更新、读取和删除的实现是最基本的，也是必须掌握的，在这基础之上才能熟悉更多实用的数据操作方法。\n\n**CURD** 操作通常是可以和连贯操作配合完成的。\n\n**创建数据对象**\n\n**ThinkPHP**可以帮助你快速地创建数据对象，最典型的应用就是自动根据表单数据创建数据对象，这个优势在一个数据表的字段非常之多的情况下尤其明显。\n\n```php\n// 实例化User模型\n$User = M('User');\n// 根据表单提交的POST数据创建数据对象\n$User->create();\n```\n\n**数据写入**\n\n**ThinkPHP**的数据写入操作使用`add`方法，使用示例如下：\n```php\n    public function jump()\n    {\n      $posts = D('posts'); //实例化User对象\n      $data['title'] = 'cat';\n      $data['content'] = '猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。';\n      $result = $posts->add($data);\n```\n\n**读取数据**\n\n读取数据是指读取数据表中的一行数据（或者关联数据），主要通过`find`方法完成，例如：\n```php\npublic function getPosts(){\n      $posts = D('posts'); //实例化posts对象\n\n      $posts->where('id=1')->find();\n\n      dump($posts);\n    }\n```\n`find`方法查询数据的时候可以配合相关的连贯操作方法，其中最关键的则是where方法。\n\n**更新数据**\n\n更新数据使用`save`方法，例如：\n```php\npublic function savePosts(){\n      $posts = D('posts'); //实例化posts对象\n      $data['title'] = 'dog';\n      $data['content'] = '狗，（拉丁文:Canis lupus familiaris,英文名称dog）中文亦称“犬”，狗属于食肉目，分布于世界各地。狗与马、牛、羊、猪、鸡并称“六畜”。有科学家认为狗是由早期人类从灰狼...';\n      $posts->where('id=1')->save($data);\n    }\n```\n\n**数据删除**\n\n**ThinkPHP**删除数据使用`delete`方法，例如：\n```php\npublic function deletePosts(){\n      $posts = D('posts'); //实例化posts对象\n\n      $posts->delete(4);\n    }\n```\n表示删除主键为**4**的数据\n\n#### 连贯操作\n**ThinkPHP**模型基础类提供的连贯操作方法（也有些框架称之为链式操作），可以有效的提高数据存取的代码清晰度和开发效率，并且支持所有的**CURD**操作。\n\n使用也比较简单， 假如我们现在要查询一个**User**表的满足状态为**1**的前**10**条记录，并希望按照用户的创建时间排序 ，代码如下：\n```php\n$User->where('status=1')->order('create_time')->limit(10)->select();\n```\n这里的`where`、`order`和`limit`方法就被称之为连贯操作方法，除了`select`方法必须放到最后一个外（因为select方法并不是连贯操作方法），连贯操作的方法调用顺序没有先后。\n\n  [1]: http://php.net/manual/zh/index.php\n  [2]: http://php.net/manual/zh/index.php\n  [3]: http://wampserver.com\n  [4]: https://www.mamp.info/en/\n  [5]: http://document.thinkphp.cn/manual_3_2.html#preface\n  [6]: http://wampserver.com\n  [7]: https://www.mamp.info/en/","tags":["thinkPHP"],"categories":["PHP"]},{"title":"浅谈JavaScript作用域","url":"%2FjavascriptScope.html","content":"\n{% fi https://cdn.lishaoy.net/javascriptScope/javascriptScope01.png , javascript Scope, javascript Scope %}\n\n我们在面试时，总会碰到一些奇奇怪怪的关于 **作用域** 的面试题，其实弄清楚原理，万变不离其宗，大部分的面试题都可以得 '姐'。 \n\n所以，今天我们来谈谈 `JavaScript` 的 **作用域(javascript scope)** ，这是老生常谈的话题，这里我们会从 **作用域** 开始，会延伸到 **预解析规则（预编译） 、 变量提升 、函数提升 、表达式 、语句 、IIFE 、 匿名函数表达式 、 具名函数表达式** 等，彻底搞明白作用域这些事 🤓\n\n---\n\n<!-- more -->\n\n### 变量提升和函数提升\n\n在开始阐述之前，我们来看一段代码，看看结果是什么？\n\n```javascript\nalert(a);\nfunction a(){ alter(2); }\nalert(a);\nvar a = 1\nalert(a);\nvar a = 3;\nalert(a);\nfunction a(){ alter(4); }\nalert(a);\na();\n```\n\n这里先揭晓答案：\n{% note success %} \n- 第一个 `alert(a)`  弹出 `function a(){ alter(4); }` 函数体\n- 第二个 `alter(a)`  弹出 `function a(){ alter(4); }` 函数体\n- 第三个 `alter(a)`  弹出 **1**\n- 第四个 `alter(a)`  弹出 **3**\n- 第五个 `alter(a)`  弹出 **3**\n- 最后一行报错 `a is not a function`\n{% endnote %}  \n\n下面来分析一下这段代码：\n其实在 `javascript` 开始执行代码之前，有一个 **预解析（预编译）** 的过程，这个过程会产生 **变量提升** 和 **函数提升** ，其实整个执行过程可以分为两部分，方便理解：\n\n1. **预解析**\n这个过程，会把 关键字 `var` 、 `function` 、 **参数** 提取出来\n\n上面这段代码 **预解析** 的过程是：\n\n```javascript\n// 第1行，没有关键字 ， 不解析\n// 第2行，遇到 function 关键字，解析到全局的头部\na = function a(){ alter(2); }\n// 第3行，没有关键字 ， 不解析\n// 第4行，遇到关键字 var ， 解析到全局的头部\na = undefined\n// 第5行，没有关键字 ， 不解析\n// 第6行，遇到关键字 var ， 解析到全局的头部\na = undefined\n// 第8行，遇到 function 关键字，解析到全局的头部\na = function a(){ alter(4); }\n// 第9行，没有关键字 ， 不解析\n// 第10行，a() 函数调用\n```\n\n此时这里有4个同名变量 a ，依循规则是：`function` 优先与 `var`, 同名的后面覆盖前面的\n因此，`a = function a(){ alter(2); }` 替换掉下面的2个 ~~`a = undefined`~~ ，`a = function a(){ alter(4); }` 又替换掉 ~~`a = function a(){ alter(2); }`~~ ,最终只剩下 `a = function a(){ alter(4); }`\n\n**预解析（预编译）** 后的代码样子是这样的\n\n```javascript\nvar a = function a(){ alter(4); }\nalert(a);\nalert(a);\na = 1\nalert(a);\na = 3;\nalert(a);\nalert(a);\na();\n```\n\n2. 执行代码，就是执行的这段代码，依次从上到下执行，最后的 `a()` 函数调用，这时的 `a` 已被 **表达式** 赋值成 **3** ，而报错 `a is not a function`\n\n----\n\n### 全局作用域和局部作用域\n\n再看这段代码\n\n```javascript\nvar a = 1;\nfunction fn1(){\n    alert(a);\n    var a = 2;\n}\nfn1();\nalert(a);\n```\n\n这里先揭晓答案：\n{% note success %}\n- 第一个 `alert(a)` 弹出 `undefined`\n- 第二个 `alert(a)` 弹出 **1**\n{% endnote %}\n\n`JavaScript` 的作用域只用两种，一个是全局的，一个是函数的，也称为 **全局作用域** 和 **局部作用域** ；**局部作用域** 可以访问 **全局作用域** 。但是 **全局作用域** 不能访问 **局部作用域** \n\n同样用 **预解析（预编译）** 的方法来分析这段代码\n1. **预解析（预编译）** 全局作用域\n\n```javascript\n// 第1行，遇到 var 关键字，解析到全局的头部\na = undefined\n// 第2行，遇到 function 关键字，解析到全局的头部\nfn1 = function fn1(){\n    alert(a);\n    var a = 2;\n}\n// 第3行，没有遇到关键字，不解析\n// 第4行，没有遇到关键字，不解析\n```\n\n2. 开始执行代码\n\n第1行，遇到表达式 `a = 1`, **a** 被赋值成 **1** </br>\n第6行，遇到函数调用 `fn1()` ,开始 **预解析（预编译）** 局部\n\n3. **预解析（预编译）** 局部作用域\n\n```javascript\n// 第3行，没有遇到关键字，不解析\n// 第4行，遇到 var 关键字，解析到局部\na = undefined\n```\n4. 开始执行 **局部** 代码\n\n第3行，弹出 `undefined` \n第4行，遇到表达式，把局部 **a** 改成 **2**\n\n5. 局部执行完成，继续执行全局\n\n第7行，弹出 **1** ，因为全局和局部是两个独立的作用域\n\n----\n\n### 作用域链\n\n如果，把上面👆代码，稍作修改\n\n```javascript\nvar a = 1;\nfunction fn1(){\n    alert(a);\n    a = 2;\n}\nfn1();\nalert(a);\n```\n\n去掉了 `function` 里的 `var` ，结果就会不一样\n这次，输出的是：\n- 第一个 `alert` 弹出 **1**\n- 第二个 `alert` 弹出 **2**\n因为在解析局部是没有发现 `var a` ，如是在执行时，就会去全局查找，找到了全局的 `a = 1` ，所以 第一个 `alert` 弹出 **1** ，而不是 `undefined` ,这个就是 **作用域连**\n\n----\n\n### 表达式、语句 和 IIFE\n\n在看下以下 👇 的代码\n\n```javascript\nvar b = 10;\nconsole.log(b);\n(function b() {\n    console.log(b);\n    b = 20;\n    console.log(b);\n  }\n)();\nconsole.log(b);\nfunction b() {\n    b = 30;\n    console.log(b);\n}\n```\n\n先揭晓答案：\n{% note success %}\n- 第1个 `console.log(b)` 输出的是 **10**\n- 第2个 `console.log(b)` 输出函数体 `b() {console.log(b); b = 20; console.log(b);}`\n- 第3个 `console.log(b)` 输出函数体 `b() {console.log(b); b = 20; console.log(b);}`\n- 第4个 `console.log(b)` 输出的是 **10**\n- 第5个 没有任何输出\n{% endnote %}\n\n在分析这段代码之前，我们需要掌握一点知识，什么是 **语句** ，什么是 **表达式** 以及 **IIFE**\n#### 表达式、语句\n\n`JavaScript` 程序的执行单位为行 `（line）` ，也就是一行一行地执行。一般情况下，每一行就是一个语句。\n\n语句 `（statement）` 是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。\n\n```javascript\nvar a = 1 + 3;\n```\n\n`1 + 3` 叫做表达式 `（expression）` ，指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。\n\n#### 立即执行函数 -- IIFE *（Immediately-Invoked Function Expression）*\n\n在 `Javascript` 中，圆括号 `()` 是一种运算符，跟在 **函数名** 之后，表示调用该函数。例如： `a()`\n\n有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。\n\n```javascript\nfunction(){ /* code */ }();\n// SyntaxError: Unexpected token (\n```\n\n产生这个错误的原因是，`function` 这个关键字即可以当作语句，也可以当作表达式。\n\n```javascript\n// 语句\nfunction f() {}\n\n// 表达式\nvar f = function f() {}\n```\n\n为了避免解析上的歧义，`JavaScript` 引擎规定，如果 `function` 关键字出现在行首，一律解释成语句。因此，`JavaScript` 引擎看到行首是 `function` 关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。\n\n解决方法就是不要让 `function` 出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。\n\n```javascript\n(function(){ /* code */ }());\n// 或者\n(function(){ /* code */ })();\n```\n\n上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式” *（Immediately-Invoked Function Expression）* ，简称 **IIFE**。\n\n了解这些知识之后，再来分析上面 👆 提到的这段代码\n\n先拆开来分析下代码，把这段单独拿出来，看看 👀\n\n```javascript\n(function b() {\n    console.log(b);\n    b = 20;\n    console.log(b);\n  }\n)();\n```\n\n其实这段是可以单独运行的，结果是\n\n{% note success %}\n- 第1个 `console.log(b)` 输出函数体 `b() {console.log(b); b = 20; console.log(b);}`\n- 第2个 `console.log(b)` 输出函数体 `b() {console.log(b); b = 20; console.log(b);}`\n{% endnote %}\n\n再来分析下原因，很明显这个就是一个 **IIFE** , 由一个 **函数表达式** 和 圆括号 `()` 运算符组成，上面 👆 这段代码和下面 👇 是等价的\n\n```javascript\nvar b = function b() {\n    console.log(b);\n    b = 20;\n    console.log(b);\n}();\n```\n\n再来分析，就比较容易理解了\n\n- **首先开始解析**\n\n```javascript\nb = undefined; //第一行 遇到 var 关键字，变量提升\n```\n解析完之后的样子\n\n```javascript\nvar b;\nb = function b() {\n    console.log(b);\n    b = 20;\n    console.log(b);\n};\nb();\n```\n\n- **执行代码**\n\n第2行，遇到 **表达式语句** 将 `b(){console.log(b); b = 20; console.log(b);}` 赋值给 `b`  \n第7行，调用函数，开始局部解析\n\n局部解析没有发现关键字 `var` 和 `function` ，没有任何动作\n\n继续执行 **局部** 代码\n\n第3行， `console.log(b)` 输出外部的 `b = b(){console.log(b); b = 20; console.log(b);}` </br>\n第4行， 由第3行可知，此时， `b` 是个内部函数体，而不是外部变量 `b` ，解析器只会把 `b = 20;` 当成普通 **表达式** ，而不是 **表达式语句** ，不会进行赋值操作 </br>\n第5行， `b` 的值没有任何改变，依然输出函数体 `b = b(){console.log(b); b = 20; console.log(b);}` </br>\n\n最终，回到最开始代码本身\n\n```javascript\nvar b = 10;\nconsole.log(b);\n(function b() {\n    console.log(b);\n    b = 20;\n    console.log(b);\n  }\n)();\nconsole.log(b);\nfunction b() {\n    b = 30;\n    console.log(b);\n}\n```\n**预解析：**\n\n```javascript\nb = undefined; //变量提升\nb = function b() { //函数提升\n    b = 30;\n    console.log(b);\n}\n```\n\n遵循，函数 `一等公民` 原则，函数优先级高于变量， ~~`b = undefined;`~~ 被干掉\n\n预解析之后，应该是这个样子\n\n```javascript\nvar b = function b() {\n    b = 30;\n    console.log(b);\n}\nb = 10;\nconsole.log(b);\n(function b() {\n    console.log(b);\n    b = 20;\n    console.log(b);\n})();\nconsole.log(b);\n```\n再来看下答案，就很清楚了\n\n{% note success %}\n- 第1个 `console.log(b)` 输出的是 **10**\n- 第2个 `console.log(b)` 输出函数体 `b() {console.log(b); b = 20; console.log(b);}`\n- 第3个 `console.log(b)` 输出函数体 `b() {console.log(b); b = 20; console.log(b);}`\n- 第4个 `console.log(b)` 输出的是 **10**\n- 第5个 没有任何输出，由于函数提升，最终 被 `b = 10` 覆盖\n{% endnote %}\n\n这里，可以把上面 👆 代码稍作改动，结果会不一样，如：\n\n```javascript\nvar b = 10;\nconsole.log(b);\n(function b() {\n    console.log(b);\n    var b = 20;  // ++++ 加了 var\n    console.log(b);\n  }\n)();\nconsole.log(b);\nfunction b() {\n    b = 30;\n    console.log(b);\n}\n```\n\n这里就不揭晓答案了，感兴趣的，可自行思考 🤔 ，看看 👀 最终答案如何。。。\n\n----\n### 匿名函数表达式、具名函数表达式\n\n在来看看这段代码👇\n\n```javascript\nvar a = 3;\nfunction fn() {\n    foo();\n    function foo() {\n        console.log(1);\n    }\n    foo();\n    var foo = function() {\n        console.log(2);\n    };\n    foo();\n    var bar = function foo() {\n        if(a > 3) return;\n        console.log(++a);\n        foo();\n    };\n    foo();\n    bar();\n}\nfn();\n```\n先揭晓答案：\n{% note success %}\n- 第1个 `foo()` 输出的是 **1**\n- 第2个 `foo()` 输出的是 **1**\n- 第3个 `foo()` 输出的是 **2**\n- 第4个 `foo()` 输出的是 **2**\n- 最后的 `bar()` 输出的是 **4**\n{% endnote %}\n\n以上代码包含了 **函数声明** 、 **匿名函数表达式** 、 **具名函数表达式** ，**匿名函数表达式** 、 **具名函数表达式** 是把函数体赋值给一个变量，因此拥有和变量相同的特性 **变量提升** ，而 **具名函数表达式** 的函数名只能在函数内部使用。\n\n了解了这些，再来分析段代码\n\n- **全局预解析**\n\n```javascript\na = undefined\nfn = function fn(){\n    ...\n}\n```\n- **执行代码**\n第1行，遇到表达式,把 **a** 的值改变成3 </br>\n最后行，遇到函数调用，重新 **预解析** 局部\n\n- **局部预解析**\n\n```javascript\n// 第4行，遇到 function 关键字，解析到局部的头部\nfoo = function(){\n    console.log(1);\n}\n// 第8行，遇到 var 关键字，解析到局部的头部\nfoo = undefined\n// 第12行，遇到 var 关键字，解析到局部的头部\nbar = undefined\n```\n\n由于有两个同名变量 `foo` ，遵循 `function` 优先 `var` 因此， ~~`foo = undefined`~~ 被干掉\n\n**局部预解析** 完之后的代码应该是这个样子👇\n\n```javascript\nvar a = 3\nfunction fn() {\n    var foo = function foo() {\n        console.log(1);\n    }\n    var bar;\n    foo();\n    foo();\n    foo = function foo() {\n        console.log(2);\n    };\n    foo();\n    bar = function foo() {\n        if(a > 3) return;\n        console.log(++a);\n        foo();\n    };\n    foo();\n    bar();\n}\nfn();\n```\n\n- **执行局部代码** </br>\n第1个 `foo()` 输出的是 **1** </br>\n第2个 `foo()` 输出的是 **1** </br>\n第3个 `foo()` 输出的是 **2** </br>\n第4个 `foo()` 输出的是 **2** ，注意这个 `foo()` 输出的是上面 `foo = function foo() {console.log(2);}` 的内容，因为 **具名函数表达式** 的函数名只能在函数内部使用，在外部无法访问。</br>\n最后的 `bar()` 输出的是 **4** ，这里才是输出 `function foo() {if(a > 3) return;console.log(++a);foo();}` 里的内容，而且，这个函数体内也有自身的调用，结果 `a` 变量 **+1** ，说明可以调用，其实，可以用 `bar.name` 输出的就是 `foo`\n\n**所以，注意：**\n\n{% note danger %}\n- `bar = function foo()` , 不要用这种写法 ，优雅的写法是 **变量名** 和 **函数名** 保持一致 `foo = function foo()`\n- 不推荐使用 **匿名函数表达式** ，有以下 👇 几个缺点\n    * 在追踪栈中没函数名，调试困难\n    * 如果需要引用自身，只能用非标准的 `arguments.callee`（ES5严格模式禁用）\n{% endnote %}","tags":["变量提升"],"categories":["JS"]},{"title":"如何用 CSS + HTML + JS 创建桌面应用","url":"%2FnwjsElectronjs.html","content":"\n最近研究了一下基于 `Chromium` 定制浏览器的方案，查阅了大量资料，具体方案也有了大概的蓝图 😉 \n\n----\n\n<!-- more -->\n\n在阐述方案之前，先要了解几个名词：\n\n### 简介\n\n#### Chromium\n\n>Chromium是一个由Google主导开发的网页浏览器，以BSD许可证等多重自由版权发行并开放源代码。Chromium的开发可能早自2006年即开始。\n\n>Chromium是Google为发展自家的浏览器Google Chrome而打开的项目，所以Chromium相当于Google Chrome的工程版或实验版（尽管Google Chrome本身也有β版），新功能会率先在Chromium上开放，待验证后才会应用在Google Chrome上，故Google Chrome的功能会相对落后但较稳定。 —— [维基百科](https://zh.wikipedia.org/wiki/Chromium#cite_note-3)\n\n#### CEF\n\n>Chromium Embedded Framework (CEF)是个基于Google Chromium项目的开源Web browser控件，支持Windows, Linux, Mac平台。除了提供C/C++接口外，也有其他语言的移植版。\n\n>因为基于Chromium，所以CEF支持Webkit & Chrome中实现的HTML5的特性，并且在性能上面，也比较接近Chrome。\nCEF还提供的如下特性：自定义插件、自定义协议、自定义JavaScript对象和扩展；可控制的resource loading, navigation, context menus等等  —— [百度百科](https://baike.baidu.com/item/CEF/20837917?fr=aladdin)\n\n#### NW\n\n>NW.js 是基于 Chromium 和 Node.js 运行的， 以前也叫nodeWebkit。这就给了你使用HTML和JavaScript来制作桌面应用的可能。在应用里你可以直接调用Node.js的各种api以及现有的第三方包。因为Chromium和 Node.js 的跨平台，那么你的应用也是可以跨平台的。—— [SegmentFault][1]\n\n#### Electron\n\n>Electron（最初名为Atom Shell）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。—— [维基百科][2]\n\n所以 ，**CEF**、**nw**、**Electron** 都是基于 `Chromium` 的开源框架，可以实现所需的定制浏览器需求，准确的讲应该是用 `HTML5` 、 `CSS3` 、 `JavaScript` 来制作拥有漂亮界面的**桌面应用**。\n\n就是一个本地客户端应用程序使用一个内置的浏览器内核渲染前端界面，另一方面还可以调用本地系统级API，实现本地应用程序的各种功能。\n\n------\n\n### 市场调研\n\n通过查阅大量资料得知，以各企业的线上产品及使用的技术供参考。\n\n#### CEF 案例\n\n据 **CEF** 官方介绍，以下（如图）桌面应用在使用 `CEF`。\n\n<img src=\"https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/CEF.png?raw=true\" alt=\"CEF\" width=\"85%\" title=\"who is using CEF\" align=\"center\" />\n\n国内桌面应用有：[有道云笔记][3] <i style=\"color:#aaa\">（网易）</i>、[钉钉][4]<i style=\"color:#aaa\">（阿里巴巴）</i>、[QQ][5]<i style=\"color:#aaa\">（腾讯）</i> 等，查看安装后目录及文件，可以看出 **有道云笔记**、**钉钉** 是使用的是`CEF`，而 **钉钉** 界面是使用 `AngularJs`，据了解后端应该用了`C++`和`Python`。\n\n**QQ** 很早之前就通过内嵌 **IE** 来实现一些功能和界面。从2013年开始，**QQ** 引入了 `CEF`，对一些之前用 **IE** 的地方进行了替换。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520329975606.png?raw=true \"钉钉Mac版目录\")\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520330256871.png?raw=true \"钉钉Mac版应用界面\")\n\n#### NW 案例\n\n这个是 **[NW](https://nwjs.io)** 官方给出的使用 `nw.js` 的应用列表：[https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js][6] \n\n而国内的有，比如微信开发工具等，是基于 `nw.js` 开发的。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571438918.png?raw=true \"微信开发工具Mac版目录\")\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571517344.png?raw=true \"微信开发工具Mac版\")\n\n#### Electron 案例\n\n这个是 **[Electron](https://electronjs.org)** 官方给出的是用 `electron` 的应用列表：[https://electronjs.org/apps](https://electronjs.org/apps)\n\n如图，**Electron** 已被像 **微软**、 **Facebook**、 **Slack** 和 **Docker** 这样的公司用于创建应用程序。\n\n<img src=\"https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520668439676.png?raw=true\" alt=\"electron\" width=\"85%\" title=\"electron 应用\" align=\"center\" />\n\n我所用的编辑器 **Visual Studio Code** 就是基于 `electron` 开发的\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520669844227.png?raw=true \"VS Code Mac版\")\n \n ----\n\n### 实战\n\n下面会分别用 `nw.js` 和 `electron` 做一个简单的 **Dome**。\n\n由于 **CEF** 文档资料少且原生是 `C\\C++` ，虽然官方给出了 `java` 版的 **JCEF** ，开发起来效率较低，故此不知演示。\n\n这个是 **[CEF][7]** 官网，在 *External Projects* 章节列出支持语言：\n\n> - Net (CEF3) - https://github.com/cefsharp/CefSharp\n> - Net (CEF1) - https://bitbucket.org/fddima/cefglue\n> - Net/Mono (CEF3) - https://bitbucket.org/xilium/xilium.cefglue\n> - Net (CEF3) - https://bitbucket.org/chromiumfx/chromiumfx\n> - Delphi (CEF1) - http://code.google.com/p/delphichromiumembedded/\n> - Delphi (CEF3) - https://github.com/hgourvest/dcef3\n> - Delphi (CEF3) - https://github.com/salvadordf/CEF4Delphi\n> - Go - https://github.com/CzarekTomczak/cef2go\n> - Java - https://bitbucket.org/chromiumembedded/java-cef\n> - Java - http://code.google.com/p/javacef/\n> - Python - http://code.google.com/p/cefpython/\n\n#### NW => Hello, world!\n\n从一个简单的例子来让我们看看如何编写一个 **NW** 应用。\n\n- **第一步** 创建 `package.json` 配置文件\n\n```vim\n{\n    \"name\": \"helloworld\",\n    \"main\": \"index.html\",\n    \"icon\": \"img/app.png\",\n    \"window\": {\n        \"icon\": \"img/app.png\"\n    }\n}\n```\n`main` 配置应用打开首页，`name` 配置应用的名称。\n\n- **第二步** 创建 `index.html` \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Holle NW</title>\n</head>\n<style>\n    html,\n    body {\n        height: 100%;\n        margin: 0;\n    }\n\n    .box {\n        height: 100%;\n        display: flex; /* css3 弹性盒子 */\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n\n<body>\n    <div class=\"box\">\n        <h1>Holle NW!</h1>\n    </div>\n</body>\n\n</html>\n```\n这是一个简单的 **HTML** 文件，加入了一点CSS，目的是让 **Holle NW!** 水平垂直居中。\n\n- **第三步** 打包应用\n\n这里我只测试了 **Mac** 和 **Windows** 的打包，**Linux** 没有测试。\n\n**Mac打包应用：** 在项目根目录执行以下命令，把所有文件压缩成 `app.nw` 文件。\n\n```vim\nzip -r app.nw *\n```\n\n然后把`app.nw` 文件放到 `nwjs.app/Contents/Resources/` 目录下即可，效果如图：\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711078780.png?raw=true \"Mac下运行效果\")\n\n**Windows打包应用：**  将应用的所有相关文件打成一个名为`package.nw` 的压缩包，将`package.nw` 与**NW**可执行文件放到相同目录即可，效果如图：\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711343860.png?raw=true \"Windons下运行效果 \")\n\n-----\n\n#### Electron => Hello, world!\n\n**Electron** 可以让你使用纯 `JavaScript` 调用丰富的原生(操作系统) **APIs** 来创造桌面应用。\n\n只需3个文件就可以构建一个简单的应用\n\n```zsh\nyour-app/\n  ├── package.json\n  ├── main.js\n  └── index.html\n```\n\n- **第一步** 创建配置文件\n\n首先需要安装 **Node** 环境，用 `npm` 来创建一个应用的配置文件 `package.json`\n\n```vim\nnpm init\n```\n\n在 `package.json` 里新增启动命令 `start` \n\n```vim\n{\n    \"name\": \"your-app\",\n    \"version\": \"0.1.0\",\n    \"main\": \"main.js\",\n    \"scripts\": {\n      \"start\": \"electron .\"\n    }\n  }\n```\n\n- **第二步** 创建入口文件 `main.js`\n\n```javascript\nconst {app, BrowserWindow} = require('electron');\nconst path = require('path')\nconst url = require('url')\n\nfunction createWindow() {\n    win = new BrowserWindow({\n        width: 1008,\n        height: 759\n    })\n      \n    win.loadURL(url.format({\n        pathname: path.join(__dirname, 'index.html'),\n        protocol: 'file:',\n        slashes: true\n    }))\n}\n\napp.on('ready', createWindow)\n```\n\n代码已经很清晰直观，`createWindow` 创建一个桌面窗口，而大小由 `width`、`height` 控制，`win.loadURL` 用来加载页面。\n\n- **第三步** 创建展示文件 `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Hello Electron</title>\n</head>\n<style>\n    html,\n    body {\n        height: 100%;\n        margin: 0;\n    }\n\n    .box {\n        height: 100%;\n        display: flex;\n        /* css3 弹性盒子 */\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n\n<body>\n    <div class=\"box\">\n        <h1>Hello Electron!</h1>\n    </div>\n</body>\n\n</html>\n```\n这是一个简单的 **HTML** 文件，加入了一点CSS，目的是让 **Holle NW!** 水平垂直居中。\n\n- **第四步** 打包应用\n\n**打包应用：** 打包应用可以是用 `electron-packager` 工具进行打包，需要在 `package.json` 配置以下命令\n\n```json\n\"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./ HelloElectron --all --out ./OutApp --version 0.0.1 --overwrite --ignore=node_modules --icon=./app/img/app.ico\"\n  },\n```\n\n然后，运行在终端执行命令 `npm run packagerMac` 即可打包`linux`、`Mac`、`windows` 三大平台应用包，效果如图：\n\n<img src=\"https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520791859473.png?raw=true\" alt=\"打包后的应用\" width=\"60%\" title=\"打包后的应用\" align=\"center\" />\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520790145115.png?raw=true \"Mac下运行效果\")\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520792416456.png?raw=true \"Windows下运行效果\")\n\n----\n\n### GitHub关注度和活跃度\n\n首先我们需要先了解一下 **GitHub** 的以下三个状态的意思，\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857435681.png?raw=true)\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857536175.png?raw=true) ：表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 `pull request`、被别人发起了`issue` 等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857569746.png?raw=true)：表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞，表示对这个项目的支持。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857709924.png?raw=true)：当选择 `fork`，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。<i style=\"color:#aaa\">（一般用于修改**bug**和优化项目或者在此项目上开发新功能等）</i>\n\n#### CEF\n\n**CEF** 在 **GitHub** 找不到项目，这个[官网][8] 提供的数据，如图<i style=\"color:#aaa\">（由于在**GitHub** 没有项目，相关数据无法准确统计）</i>。\n\n![CEF关注度](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520855809138.png?raw=true \"CEF关注度\")\n\n#### NW\n\n**NW关注度：** ![Alt text](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520856387728.png?raw=true)\n\n**NW活跃度：**如图\n\n![2011年~2018年提交量](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858064076.png?raw=true \"2011年~2018年提交量\")\n\n#### Electron\n\n**Electron关注度：** ![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858325207.png?raw=true)\n\n**活跃度：** 如图\n\n![electron2013年~2018年提交量](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858451333.png?raw=true \"electron2013年~2018年提交量\")\n\n----\n\n通过以上的 **市场调研**、**实战**、**GitHub关注度和活跃度** 等 **Electron** 都占有优势，如下\n\n-  市场案例较多，各大型企业都在使用\n-  开发实战代码更直观，容易理解和维护，各种文档健全、网络资料较多且质量较高，周边辅助工具齐全，开发效率可大大提高\n-  **GitHub** 关注度和活跃度持续攀升\n\n所有结合以上情况，之后会用以下技术栈做一个完善的案例\n\n- **跨平台桌面应用框架：**`electron`  <i style=\"color:#aaa\">（Chromium + Node.js）</i>\n- **UI库：** `iView`\n- **js框架：** `Vue.js`\n- **自动化构建工具：**  `webpack`\n- **HTML5、CSS3、ES6**\n\n\n  [1]: https://segmentfault.com/a/1190000003870613\n  [2]: https://zh.wikipedia.org/wiki/Electron_%28%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%29\n  [3]: http://note.youdao.com\n  [4]: https://www.dingtalk.com/?source=2202&lwfrom=2017120202092064209309201\n  [5]: https://im.qq.com/pcqq/\n  [6]: https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js\n  [7]: https://bitbucket.org/chromiumembedded/cef\n  [8]: https://bitbucket.org/chromiumembedded/cef/overview","tags":["桌面应用"],"categories":["Node"]},{"title":"用 Hexo Next GitHubPages 搭建漂亮的免费博客","url":"%2FhexoGithubpagesNext.html","content":"{% fi https://cdn.lishaoy.net/hexoGithubpagesNext/git_hexo.jpeg, GitHubPages + Hexo, GitHubPages + Hexo %}\n<div class=\"text-center\">\n    <h3>今天搭建了自己的博客 😝</h3>\n</div>\n\n花费了 **一天半** 的时间，终于把我的 **个人博客** 搭建完成，下面我写下搭建博客的过程，其实挺简单的 🙃\n\n---\n\n<!-- more -->\n\n### 博客所用技术 （Hexo + Next + GitHubPages）\n\n在文章的末尾我会 **贴出** 我基于 **Hexo + Next + GitHubPages** 搭建博客，所参考的文章链接。\n\n如果，你也想用这些技术搭建漂亮的博客，你就需要了解下 `Hexo` 、 `Next` 、 `GitHubPages` 这三个单词，下面会逐个解释。\n\n####  什么是 Hexo\n> **Hexo** 是一个快速、简洁且高效的博客框架。**Hexo** 使用 *Markdown*（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 -- [Hexo](https://hexo.io/zh-cn/docs/index.html)\n\n####  什么是 Next\n\n> **NexT** 是 **Hexo**的一个主题（theme），拥有丰富而简单的配置，结合第三方服务，可以打造属于您自己的博客。 -- [Next](http://theme-next.iissnan.com)\n\n#### 什么是 GitHubPages\n\n> GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. -- [GitHubPages](https://help.github.com/articles/what-is-github-pages/)\n\n**翻译过来大概是：** GitHub页面是一个静态的站点托管服务，旨在从GitHub存储库中直接托管您的个人、组织或项目页面。\n\n所以，`Hexo` 、 `Next` 、 `GitHubPages` 配合起来就可以免费搭建漂亮的 **个人博客** , 是不是很爽 😆\n\n----\n### 如何\b基于 \bHexo 搭建博客\n\n基于 \bHexo 搭建博客，只需简单的几步，就能完成 **个人博客** 的搭建。\n\n#### \b准备工作\n\n##### 下载安装 \b`nodejs`\n\n`node` 会自带 \b`npm` 包管理工具，*建议安装* `yarn` 来管理依赖 （\b因为 `hexo` 貌似是用 `yarn` 管理 **依赖** 的，否则可以回出现 **依赖\b** 问题）。\n\n**Mac** 用户可以用 `brew` 安装，**Windows** 可以用 `cmder` 或去官网下安装包程序。\n\n```\bvim\n    brew install node\n```\n\n然后用 \b`npm` 安装 `yarn`\n\n```vim\n    npm install yarn\n```\n\n##### 安装\b `git`\n\n**Mac\b** 用户可用刚安装的 `yarn` 包管理工具安装 `git`，**Windows** 可以 `cmder` 或去官网下安装包程序。\n\n```vim\n    yarn add git -g\n```\n\n##### 安装 `hexo`\n\n进入你的项目目录，比如我的是 `myblog` ，\n\n```vim\n    cd myblog\n```\n\n然后用 `\byarn` 安装 `hexo`。\n\n```vim\n    yarn add hexo -S\n```\n\n此时，环境都准备好了，就可以开始搭建 **\bhexo** 博客了 😜\n\n----\n#### 搭建本地博客\n\n##### 进入你的项目目录\n\n比如：我的是 `myblog`。\n\n```vim\n    cd myblog\n```\n\n##### 项目初始化\n\n项目初始化，会自动生成博客模板，以后写博客只需用 `markdown` 语法编写对应的 `.md` 文件即可 ✍️ 。\n\n```vim\n    hexo init\n```\n##### 安装所有的依赖 \n\n建议使用用 `yarn` ，否则会出现依赖问题（*在本文之后有相关介绍*）。\n\n```vim\n    yarn install\n```\n##### 最后，启动本地服务\n\n在浏览器输入 `localhost:4000` 即可预览博客\n\n```vim\n    hexo server\n```\n\n**如图:** 🌁 </br>\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/hexoinit.png\" alt=\"hexo\" width=\"100%\" title=\"hexo最初的样子 😂\" align=\"center\" />\n\n----\n### 关联 GitHub\n\n通过 **GitHub** 的 `pages` 功能，我们可以把我们的博客托管到 **GitHub** ，而无需去购买云服务器 😋 ,轻松愉快的构建免费博客。\n\n#### 创建 GitHub 账户\n\n我相信 🤔 大家应该都有 **GitHub** 账号了，如果没有可去 [GitHub](https://github.com/) 官网按照步骤创建账户即可。\n\n#### 配置关联 GitHub\n\n- 有了 **GitHub** 账号之后，登录 **GitHub** ，创建一个项目，项目名称最好和你本地的项目一致，比如： `myblog`\n\n{% note danger %}\n项目建好之后，一定要开启 **GitHub Pages** 功能 ⚠️\n{% endnote %}\n\n- 点击如图 `Settings` 开启，**GitHub Pages** 功能\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/gitpages.png\" alt=\"GitHubPages\" width=\"100%\" title=\"GitHubPages Settings\" align=\"center\" />\n\n- 选择 `master branch` , 然后 **Save** \n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/gitpages2.png\" alt=\"GitHubPages\" width=\"100%\" title=\"GitHubPages Source\" align=\"center\" />\n\n- 复制你的项目连接，如图\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/gitpages3.png\" alt=\"GitHubPages\" width=\"100%\" title=\"GitHubPages URL\" align=\"center\" />\n\n- 然后在你本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/persilee/MyBlog.git\n  branch: master\n```\n\n#### 完成关联\n\n完成以上步骤之后，就可以把自己本地项目推送到 **GitHub** 托管，只剩下3步 😋\n\n1. 安装 `hexo-deployer-git` 插件（可以通过简单的命令,完成文件生成及推送功能）\n\n```vim\n    yarn add hexo-deployer-git -S\n```\n\n2. 运行 `hexo g` （生成本地文件）\n\n```vim\n    hexo g\n```\n\n3. 运行 `hexo d` （将本地文件推送到 **GitHub** ，和 `git push` 功能相同）\n\n```vim\n    hexo d\n```\n此时，**GitHub** 应该已给你生成了访问连接，连接格式是: `你的账号名称` + `.github.io` + `\\项目名称`,也可以去刚才 `GitHubPages` 设置页面查看\n例如我的：[https:\\\\persilee.github.io\\MyBlog](https:\\\\persilee.github.io\\MyBlog)\n\n这时，你就可以把连接发给小伙伴们，他们通过连接都可以访问你的 **博客** 🙃。\n\n{% note danger %}\n**这里需要注意的地方是：在执行 `hexo g` 命令时候，可能会出现以下 `error`,应该是 `yarn` 和 `npm` 冲突的依赖的问题，所以前面文章建议使用 `yarn` 管理包依赖**\n{% endnote %}\n\n```vim\nERROR Plugin load failed: hexo-renderer-marked\nError: EISDIR: illegal operation on a directory, read\nERROR Plugin load failed: hexo-server\nError: EISDIR: illegal operation on a directory, read\nERROR Plugin load failed: hexo-renderer-stylus\nError: EISDIR: illegal operation on a directory, read\n```\n\n解决办法，先用 `yarn` 分别移除，再重新安装，如下\n\n```vim\n## 先移除\nyarn remove hexo-renderer-marked\n\nyarn remove hexo-renderer-stylus\n\nyarn remove hexo-server\n\n## 再安装\nyarn add hexo-renderer-marked -S \n\nyarn add hexo-renderer-stylus -S\n\nyarn add hexo-server -S\n```\n\n在执行 `hexo g` ,顺利执行 👌\n\n----\n\n### 绑定域名\n\n我们已经可以通过 **GitHub** 分发给我的地址访问 **博客** ，但是，这对于我们这些爱 **折腾** 的 **程序猿👨‍💻‍** 来说，还不够，弄个自己的 **域名** 才够拉风😂。\n\n于是。。。\n\n开始绑定自己的 **域名** [lishaoy.net](https://lishaoy.net)\n\n然而，我们绑定 **域名** 之后，只支持 `http` 协议，这样我们在 **Google** 浏览器访问时，会有不安全标准，而且，很容易被插入广告，于是。。。**折腾** 走起🌝：搞个 `https`\n\n转入正题，经过一番 **折腾** ，采用第三方服务 [Netlify](https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate) 来提供免费的SSL/TLS证书。\n\n当然，这里我提供2种方式绑定域名，一种是 `HTTP` (不安全的网络协议)、一种是 `HTTPS` （安全的网络协议，在 **Google** 浏览器上回有一把小锁，如图）\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/lock.png\" alt=\"Netlity\" width=\"100%\" title=\"Google HTTPS 状态标识\" align=\"center\" />\n\n#### `HTTP` 绑定域名\n\n##### 设置域名解析规则\n\n首先，我们需要去运行商，新增域名解析规则，如图\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/domain.png\" alt=\"domain\" width=\"100%\" title=\"域名解析规则\" align=\"center\" />\n\n##### 新增 `CNAME` 文件\n\n配置好域名解析规则之后，还需要在项目的 `.\\source\\` 路径下新增 `CNAME` 文件，输入内容 `你的域名` ,如：[lishaoy.net](https://lishaoy.net)\n##### 重新新生成文件，推送到GitHub\n\n重新生成文件，运行 `hexo g`\n\n```vim\n    hexo g\n```\n推送 **GitHub**\n\n```vim\n    hexo d\n```\n\n-----\n\n#### `HTTPS` 绑定域名\n##### 注册 `Netlify` 账号\n\n首先，我们需要注册一个 [Netlify](https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate) 账号，地址：[Netlify](https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate) ，可以选择用 **GitHub** 注册。\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify.png\" alt=\"Netlity\" width=\"100%\" title=\"Netlity Login\" align=\"center\" />\n\n##### 新增站点\n\n- 点击如图按钮 `New site from Git`,来新增 **站点**\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify1.png\" alt=\"Netlity\" width=\"100%\" title=\"New site from Git\" align=\"center\" />\n\n- 然后，点击如图按钮 `GitHub` \n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify2.png\" alt=\"Netlity\" width=\"100%\" title=\"GitHub\" align=\"center\" />\n\n- 选择你的项目，比如我的 `MyBlog`\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify3.png\" alt=\"Netlity\" width=\"100%\" title=\"Select Site\" align=\"center\" />\n\n- 点击 `Deploy site`\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify4.png\" alt=\"Netlity\" width=\"100%\" title=\"Deploy site\" align=\"center\" />\n\n- 看到如图页面，表示成功，再点击 `Site settings` \n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify5.png\" alt=\"Netlity\" width=\"100%\" title=\"Getting started\" align=\"center\" />\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify6.png\" alt=\"Netlity\" width=\"100%\" title=\"Site details\" align=\"center\" />\n\n- 再点击 `Change site name` 修改短名称，方便记忆\n\n- 在自己的域名管理中设置 **DNS** ，我使用的是 **阿里云** ，在管理界面添加如图规则\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify7.png\" alt=\"Netlity\" width=\"100%\" title=\"设置域名规则\" align=\"center\" />\n\n- 在点击 `Domain management` 下的 `HTTPS` ，按照步骤完成操作，稍等片刻，即可看到我们的 **域名** 已经上锁 🔐 \n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/netlify8.png\" alt=\"Netlity\" width=\"100%\" title=\"lishaoy.net上锁\" align=\"center\" />\n\n😝 😜 😄 😆 😂 🤣 ...\n\n----\n### 更换 `next` 主题\n\n`hexo` 的主题很多，你可以选择其他喜欢 ❤️ 的主题，我使用的是 `next` 主题。\n\n#### 安装 `next` 主题\n\n执行以下命令，安装 `next` 主题\n\n```vim\n    git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n\n#### 更改配置文件\n\n修改根目录下的 `./_config.yml` 文件，如下\n\n```vim\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n```\n\n##### 重新新生成文件，推送到GitHub\n\n重新生成文件，运行 `hexo g`\n\n```vim\n    hexo g\n```\n推送 **GitHub**\n\n```vim\n    hexo d\n```\n\n也可以运行以下命令，启动一个本地服务，调试确定无问题之后再 推送到 **GitHub** \n\n```vim\n    hexo s --debug\n```\n\n本地服务启动后，可以在浏览器输入 `http://localhost:4000` 预览，如图\n\n<img src=\"https://cdn.lishaoy.net/hexoGithubpagesNext/nextpage.png\" alt=\"next\" width=\"100%\" title=\"next 主题最初的样子🙃\" align=\"center\" />\n\n**本文到此告一段落，关于 `next` 主题美化的问题，可以参考以下链接文章 🤗**\n\n以下是我搭建 **博客** 参考的文章链接 👇 \n\n{% note default %} \n\n- [hexo的next主题个性化教程:打造炫酷网站](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n- [Hexo搭建博客教程](https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/)\n- [Hexo博客搭建全攻略(二)：NexT主题配置](https://www.jianshu.com/p/d95cff938277)\n\n {% endnote %}\n","tags":["Next"],"categories":["hexo"]}]